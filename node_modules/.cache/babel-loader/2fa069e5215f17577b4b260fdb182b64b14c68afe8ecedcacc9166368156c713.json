{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [informationFlows, setInformationFlows] = useState([]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  // Function to show a single information flow on the graph\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\n    // Reset styles\n    setNodes(nds => nds.map(n => n.id === sourceNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid blue\"\n      }\n    } : n.id === destinationNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid green\"\n      }\n    } : n));\n    const path = findPath(sourceNode.id, destinationNode.id);\n    if (!path || path.length === 0) {\n      console.error(\"No path found between the selected nodes.\");\n      return;\n    }\n    setEdges(eds => eds.map(edge => {\n      const isInPath = path.includes(edge.source) && path.includes(edge.target);\n      return {\n        ...edge,\n        animated: isInPath,\n        style: {\n          stroke: isInPath ? \"green\" : \"black\",\n          strokeDasharray: isInPath ? \"5,5\" : undefined\n        },\n        markerEnd: isInPath ? {\n          type: MarkerType.ArrowClosed,\n          color: \"green\",\n          orient: \"auto\"\n        } : undefined\n      };\n    }));\n  };\n\n  // Export the information flows as a JSON file\n  const exportInformationFlows = () => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(informationFlows));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n\n  // Import the information flows from a JSON file\n  const importInformationFlows = event => {\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      try {\n        const importedFlows = JSON.parse(e.target.result);\n        if (Array.isArray(importedFlows)) {\n          setInformationFlows(importedFlows.map(([sourceNode, destinationNode]) => [nodes.find(node => node.id === sourceNode.id) || sourceNode, nodes.find(node => node.id === destinationNode.id) || destinationNode]));\n          alert(\"Information Flows loaded successfully.\");\n        } else {\n          alert(\"Invalid JSON format.\");\n        }\n      } catch (error) {\n        alert(\"Failed to load the JSON file. Please check the file format.\");\n      }\n    };\n    if (event.target.files.length > 0) {\n      fileReader.readAsText(event.target.files[0]);\n    }\n  };\n  const handleNodeClick = (event, nodeData) => {\n    const id = nodeData.id;\n    const node = nodes.find(n => n.id === id);\n    setSelectedNode(node);\n    const selectedInformationFlow = informationFlows === null || informationFlows === void 0 ? void 0 : informationFlows.find(flow => flow.find(flowId => (flowId === null || flowId === void 0 ? void 0 : flowId.id) === nodeData.id));\n    setSelectedInformationFlow(selectedInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(false);\n      if (!sourceNode) {\n        setSourceNode(node);\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid blue\"\n          }\n        } : n));\n      } else if (sourceNode.id !== id) {\n        setDestinationNode(node);\n\n        // Only add the flow if it doesn't already exist\n        if (!informationFlows.some(flow => flow[0].id === sourceNode.id && flow[1].id === node.id)) {\n          setInformationFlows([...informationFlows, [sourceNode, node]]);\n        }\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid green\"\n          }\n        } : n));\n        setTimeout(resetSelection, 1000);\n      }\n    }\n  };\n  const resetSelection = () => {\n    setEnableInformationFlow(!enableInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(true);\n      setSourceNode(null);\n      setDestinationNode(null);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          border: \"none\"\n        }\n      })));\n      setEdges(eds => eds.map(edge => ({\n        ...edge,\n        animated: false,\n        style: {\n          stroke: \"black\"\n        }\n      })));\n    }\n  };\n\n  // Function to show all information flows on the graph\n  const showInformationFlowOnTheGraphs = () => {\n    informationFlows.forEach(flow => {\n      const [sourceNode, destinationNode] = flow;\n      setNodes(nds => nds.map(n => n.id === sourceNode.id ? {\n        ...n,\n        style: {\n          border: \"2px solid blue\"\n        }\n      } : n.id === destinationNode.id ? {\n        ...n,\n        style: {\n          border: \"2px solid green\"\n        }\n      } : n));\n      setEdges(eds => eds.map(edge => edge.source === sourceNode.id && edge.target === destinationNode.id ? {\n        ...edge,\n        animated: true,\n        style: {\n          stroke: \"green\",\n          strokeDasharray: \"5,5\"\n        }\n      } : edge));\n    });\n  };\n\n  // Function to reset graph styles\n  const resetGraphs = () => {\n    setNodes(nds => nds.map(n => ({\n      ...n,\n      style: {\n        border: \"none\"\n      }\n    })));\n    setEdges(eds => eds.map(edge => ({\n      ...edge,\n      animated: false,\n      style: {\n        stroke: \"black\"\n      }\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: '100vw'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-9\",\n      style: {\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-3\",\n        style: {\n          position: 'absolute',\n          top: -88,\n          right: '-23vw'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: resetSelection,\n          children: \"Add Information Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 11\n        }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary ml-2\",\n          onClick: exportInformationFlows,\n          children: \"Export Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importInformationFlows,\n          style: {\n            display: \"none\"\n          },\n          id: \"uploadFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"uploadFile\",\n          className: \"btn btn-secondary ml-2 mt-2\",\n          children: \"Import Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes.map(node => ({\n          ...node,\n          data: {\n            ...node.data,\n            disable: disableAdd\n          }\n        })),\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: handleNodeClick,\n        onPaneClick: () => setSelectedNode(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this), sourceNode && destinationNode == null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Destination Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 266,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 9\n    }, this) : \"\", resetFlow & enableInformationFlow ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Source Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 275,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-3\",\n      style: {\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mr-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Holon Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nameofNode\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"nameofNode\",\n            className: \"form-control\",\n            value: selectedNode.data.label,\n            onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n              ...node,\n              data: {\n                ...node.data,\n                label: e.target.value\n              }\n            } : node))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 287,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nodeDescription\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 309,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"nodeDescription\",\n            className: \"form-control\",\n            style: {\n              height: \"200px\",\n              width: \"100%\"\n            },\n            placeholder: \"An example description...\",\n            value: selectedNode.data.description || \"\",\n            onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n              ...node,\n              data: {\n                ...node.data,\n                description: e.target.value\n              }\n            } : node))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nodeInfoFlows\",\n            children: \"Information Flows\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"nodeInfoFlows\",\n            className: \"form-control\",\n            style: {\n              height: \"100px\",\n              width: \"100%\"\n            },\n            value: informationFlows.map(flow => flow[0].data.label).join(\"\\n\"),\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: showInformationFlowOnTheGraphs,\n            children: \"Show All Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 15\n          }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary mx-2\",\n            onClick: resetGraphs,\n            children: \"Reset Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 348,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this), informationFlows.map(nodePair => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-3 alert alert-success\",\n            style: {\n              display: 'flex',\n              justifyContent: 'space-between',\n              alignItems: 'center'\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 360,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 359,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: 'flex',\n                gap: 20\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                children: \"Show Flow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 365,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-danger\",\n                onClick: () => {\n                  const nodeId1 = nodePair[0].id;\n                  const nodeId2 = nodePair[1].id;\n                  setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                  resetGraphs();\n                },\n                children: \"Delete Information Flow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 371,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 364,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title\",\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 397,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: () => setIsModalOpen(false),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"newNodeLabel\",\n            children: \"New Node Label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"newNodeLabel\",\n            className: \"form-control\",\n            placeholder: \"New Node Label\",\n            value: newNodeLabel,\n            onChange: e => setNewNodeLabel(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 409,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 407,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: () => setIsModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 420,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: () => {\n            setNodes(nds => [...nds, {\n              id: `${nds.length + 1}`,\n              type: \"customNode\",\n              data: {\n                label: newNodeLabel\n              },\n              position: {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              }\n            }]);\n            setIsModalOpen(false);\n            setNewNodeLabel(\"\");\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 395,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"JdoYFV1TICMQ29sM8XqCJ/1977I=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","jsxDEV","_jsxDEV","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","selectedInformationFlow","setSelectedInformationFlow","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","setDisableAdd","resetFlow","setResetFlow","informationFlows","setInformationFlows","onConnect","params","eds","showOneFlowOnGraph","nds","map","n","id","style","border","path","findPath","length","console","error","edge","isInPath","includes","source","target","animated","stroke","strokeDasharray","undefined","markerEnd","type","ArrowClosed","color","orient","exportInformationFlows","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","importInformationFlows","event","fileReader","FileReader","onload","e","importedFlows","parse","result","Array","isArray","find","node","alert","files","readAsText","handleNodeClick","nodeData","flow","flowId","some","setTimeout","resetSelection","showInformationFlowOnTheGraphs","forEach","resetGraphs","className","display","height","width","children","position","top","right","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","htmlFor","data","disable","fitView","onNodeClick","onPaneClick","left","borderLeft","value","label","placeholder","description","join","readOnly","nodePair","justifyContent","alignItems","gap","nodeId1","nodeId2","flows","filter","pair","isOpen","onRequestClose","x","Math","random","y","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd, setDisableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n  // Function to show a single information flow on the graph\r\nconst showOneFlowOnGraph = (sourceNode, destinationNode) => {\r\n  // Reset styles\r\n  setNodes((nds) =>\r\n    nds.map((n) =>\r\n      n.id === sourceNode.id\r\n        ? { ...n, style: { border: \"2px solid blue\" } }\r\n        : n.id === destinationNode.id\r\n        ? { ...n, style: { border: \"2px solid green\" } }\r\n        : n\r\n    )\r\n  );\r\n\r\n  const path = findPath(sourceNode.id, destinationNode.id);\r\n  if (!path || path.length === 0) {\r\n    console.error(\"No path found between the selected nodes.\");\r\n    return;\r\n  }\r\n\r\n  setEdges((eds) =>\r\n    eds.map((edge) => {\r\n      const isInPath = path.includes(edge.source) && path.includes(edge.target);\r\n      return {\r\n        ...edge,\r\n        animated: isInPath,\r\n        style: {\r\n          stroke: isInPath ? \"green\" : \"black\",\r\n          strokeDasharray: isInPath ? \"5,5\" : undefined,\r\n        },\r\n        markerEnd: isInPath\r\n          ? {\r\n              type: MarkerType.ArrowClosed,\r\n              color: \"green\",\r\n              orient: \"auto\",\r\n            }\r\n          : undefined,\r\n      };\r\n    })\r\n  );\r\n};\r\n\r\n\r\n  // Export the information flows as a JSON file\r\n  const exportInformationFlows = () => {\r\n    const dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(informationFlows));\r\n    const downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\r\n    document.body.appendChild(downloadAnchorNode);\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  };\r\n\r\n  // Import the information flows from a JSON file\r\n  const importInformationFlows = (event) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = (e) => {\r\n      try {\r\n        const importedFlows = JSON.parse(e.target.result);\r\n\r\n        if (Array.isArray(importedFlows)) {\r\n          setInformationFlows(\r\n            importedFlows.map(([sourceNode, destinationNode]) => [\r\n              nodes.find((node) => node.id === sourceNode.id) || sourceNode,\r\n              nodes.find((node) => node.id === destinationNode.id) || destinationNode,\r\n            ])\r\n          );\r\n          alert(\"Information Flows loaded successfully.\");\r\n        } else {\r\n          alert(\"Invalid JSON format.\");\r\n        }\r\n      } catch (error) {\r\n        alert(\"Failed to load the JSON file. Please check the file format.\");\r\n      }\r\n    };\r\n\r\n    if (event.target.files.length > 0) {\r\n      fileReader.readAsText(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleNodeClick = (event, nodeData) => {\r\n    const id = nodeData.id;\r\n    const node = nodes.find((n) => n.id === id);\r\n    setSelectedNode(node);\r\n    const selectedInformationFlow = informationFlows?.find(flow => flow.find(flowId => flowId?.id === nodeData.id));\r\n    setSelectedInformationFlow(selectedInformationFlow);\r\n\r\n    if (enableInformationFlow) {\r\n      setResetFlow(false);\r\n      if (!sourceNode) {\r\n        setSourceNode(node);\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id ? { ...n, style: { border: \"2px solid blue\" } } : n\r\n          )\r\n        );\r\n      } else if (sourceNode.id !== id) {\r\n        setDestinationNode(node);\r\n\r\n        // Only add the flow if it doesn't already exist\r\n        if (!informationFlows.some((flow) => flow[0].id === sourceNode.id && flow[1].id === node.id)) {\r\n          setInformationFlows([...informationFlows, [sourceNode, node]]);\r\n        }\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id\r\n              ? { ...n, style: { border: \"2px solid green\" } }\r\n              : n\r\n          )\r\n        );\r\n        setTimeout(resetSelection, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const resetSelection = () => {\r\n    setEnableInformationFlow(!enableInformationFlow);\r\n    if (enableInformationFlow) {\r\n      setResetFlow(true);\r\n      setSourceNode(null);\r\n      setDestinationNode(null);\r\n      setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n      setEdges((eds) =>\r\n        eds.map((edge) => ({\r\n          ...edge,\r\n          animated: false,\r\n          style: { stroke: \"black\" },\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  // Function to show all information flows on the graph\r\n  const showInformationFlowOnTheGraphs = () => {\r\n    informationFlows.forEach((flow) => {\r\n      const [sourceNode, destinationNode] = flow;\r\n      setNodes((nds) =>\r\n        nds.map((n) =>\r\n          n.id === sourceNode.id\r\n            ? { ...n, style: { border: \"2px solid blue\" } }\r\n            : n.id === destinationNode.id\r\n            ? { ...n, style: { border: \"2px solid green\" } }\r\n            : n\r\n        )\r\n      );\r\n\r\n      setEdges((eds) =>\r\n        eds.map((edge) =>\r\n          edge.source === sourceNode.id && edge.target === destinationNode.id\r\n            ? { ...edge, animated: true, style: { stroke: \"green\", strokeDasharray: \"5,5\" } }\r\n            : edge\r\n        )\r\n      );\r\n    });\r\n  };\r\n\r\n  // Function to reset graph styles\r\n  const resetGraphs = () => {\r\n    setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n    setEdges((eds) =>\r\n      eds.map((edge) => ({\r\n        ...edge,\r\n        animated: false,\r\n        style: { stroke: \"black\" },\r\n      }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"container-fluid\"\r\n      style={{ display: \"flex\", height: \"100vh\", width: '100vw', }}\r\n    >\r\n      <div className=\"col-9\" style={{ height: \"100%\" }}>\r\n        <div className=\"d-flex justify-content-between align-items-center mb-3\" style={{ position: 'absolute', top: -88, right: '-23vw' }}>\r\n          <button\r\n            className={\"btn btn-success\"}\r\n            onClick={resetSelection}\r\n          >\r\n            Add Information Flow\r\n          </button>\r\n          {informationFlows.length > 0 && (\r\n            <button\r\n              className={\"btn btn-primary ml-2\"}\r\n              onClick={exportInformationFlows}\r\n            >\r\n              Export Information Flows\r\n            </button>\r\n          )}\r\n          <input\r\n            type=\"file\"\r\n            accept=\".json\"\r\n            onChange={importInformationFlows}\r\n            style={{ display: \"none\", }}\r\n            id=\"uploadFile\"\r\n          />\r\n          <label htmlFor=\"uploadFile\" className=\"btn btn-secondary ml-2 mt-2\">\r\n            Import Information Flows\r\n          </label>\r\n        </div>\r\n\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes.map((node) => ({\r\n            ...node,\r\n            data: {\r\n              ...node.data,\r\n              disable: disableAdd,\r\n            },\r\n          }))}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={handleNodeClick}\r\n          onPaneClick={() => setSelectedNode(null)}\r\n        />\r\n      </div>\r\n      {sourceNode && destinationNode == null ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">\r\n            Select the Destination Node\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {resetFlow & enableInformationFlow ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">Select the Source Node</div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div\r\n        className=\"col-3\"\r\n        style={{ padding: \"10px\", borderLeft: \"1px solid #ccc\" }}\r\n      >\r\n        {selectedNode ? (\r\n          <div className=\"mr-3\">\r\n            <h3>Holon Details</h3>\r\n            <div className=\"form-group mb-3\">\r\n              <label htmlFor=\"nameofNode\">Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"nameofNode\"\r\n                className=\"form-control\"\r\n                value={selectedNode.data.label}\r\n                onChange={(e) =>\r\n                  setNodes((nds) =>\r\n                    nds.map((node) =>\r\n                      node.id === selectedNode.id\r\n                        ? {\r\n                            ...node,\r\n                            data: { ...node.data, label: e.target.value },\r\n                          }\r\n                        : node\r\n                    )\r\n                  )\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label htmlFor=\"nodeDescription\">Description</label>\r\n              <textarea\r\n                id=\"nodeDescription\"\r\n                className=\"form-control\"\r\n                style={{ height: \"200px\", width: \"100%\" }}\r\n                placeholder=\"An example description...\"\r\n                value={selectedNode.data.description || \"\"}\r\n                onChange={(e) =>\r\n                  setNodes((nds) =>\r\n                    nds.map((node) =>\r\n                      node.id === selectedNode.id\r\n                        ? {\r\n                            ...node,\r\n                            data: { ...node.data, description: e.target.value },\r\n                          }\r\n                        : node\r\n                    )\r\n                  )\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label htmlFor=\"nodeInfoFlows\">Information Flows</label>\r\n              <textarea\r\n                id=\"nodeInfoFlows\"\r\n                className=\"form-control\"\r\n                style={{ height: \"100px\", width: \"100%\" }}\r\n                value={informationFlows.map((flow) => flow[0].data.label).join(\"\\n\")}\r\n                readOnly\r\n              />\r\n            </div>\r\n            <div>\r\n              <button\r\n                className={\"btn btn-success\"}\r\n                onClick={showInformationFlowOnTheGraphs}\r\n              >\r\n                Show All Flow\r\n              </button>\r\n              {informationFlows.length > 0 && (\r\n                <button\r\n                  className={\"btn btn-primary mx-2\"}\r\n                  onClick={resetGraphs}\r\n                >\r\n                  Reset Flow\r\n                </button>\r\n              )}\r\n            </div>\r\n            {informationFlows.map((nodePair) => {\r\n              return (\r\n                <div className=\"mt-3 alert alert-success\" style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>\r\n                  <div>\r\n                    <strong>\r\n                      {nodePair[0].data.label} {\"-->\"} {nodePair[1].data.label}\r\n                    </strong>\r\n                  </div>\r\n                  <div style={{ display: 'flex', gap: 20 }}>\r\n                    <button\r\n                      className={\"btn btn-success\"}\r\n                      onClick={() => showOneFlowOnGraph(nodePair[0], nodePair[1])}\r\n                    >\r\n                      Show Flow\r\n                    </button>\r\n                    <button\r\n                      className={\"btn btn-danger\"}\r\n                      onClick={() => {\r\n                        const nodeId1 = nodePair[0].id;\r\n                        const nodeId2 = nodePair[1].id;\r\n                        setInformationFlows((flows) =>\r\n                          flows.filter(\r\n                            (pair) => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)\r\n                          )\r\n                        );\r\n                        resetGraphs()\r\n                      }}\r\n                    >\r\n                      Delete Information Flow\r\n                    </button>\r\n                  </div>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        ) : (\r\n          <div>No Selection</div>\r\n        )}\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title\">Add Node</h5>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            <span>&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <div className=\"form-group mb-3\">\r\n            <label htmlFor=\"newNodeLabel\">New Node Label</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"newNodeLabel\"\r\n              className=\"form-control\"\r\n              placeholder=\"New Node Label\"\r\n              value={newNodeLabel}\r\n              onChange={(e) => setNewNodeLabel(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            Close\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              setNodes((nds) => [\r\n                ...nds,\r\n                {\r\n                  id: `${nds.length + 1}`,\r\n                  type: \"customNode\",\r\n                  data: { label: newNodeLabel },\r\n                  position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n                },\r\n              ]);\r\n              setIsModalOpen(false);\r\n              setNewNodeLabel(\"\");\r\n            }}\r\n          >\r\n            Add Node\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}