{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [viewMode, setViewMode] = useState(\"all\"); // \"all\" or \"selected\"\n  const [informationFlows, setInformationFlows] = useState([]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const handleNodeClick = (event, nodeData) => {\n    setSelectedNode(nodeData);\n    setViewMode(\"selected\");\n    showSelectedHolonFlows(nodeData);\n  };\n  const showAllFlows = () => {\n    setViewMode(\"all\");\n    setNodes(nds => nds.map(node => ({\n      ...node,\n      style: {\n        border: \"2px solid blue\"\n      }\n    })));\n    setEdges(eds => eds.map(edge => ({\n      ...edge,\n      animated: true,\n      style: {\n        stroke: \"green\",\n        strokeDasharray: \"5,5\"\n      }\n    })));\n  };\n  const showSelectedHolonFlows = selectedNode => {\n    if (selectedNode) {\n      setNodes(nds => nds.map(node => ({\n        ...node,\n        style: {\n          border: node.id === selectedNode.id ? \"2px solid lightblue\" : \"none\"\n        }\n      })));\n      setEdges(eds => eds.map(edge => {\n        const isConnected = edge.source === selectedNode.id || edge.target === selectedNode.id;\n        return {\n          ...edge,\n          animated: isConnected,\n          style: {\n            stroke: isConnected ? \"green\" : \"black\",\n            strokeDasharray: isConnected ? \"5,5\" : undefined\n          }\n        };\n      }));\n    }\n  };\n  const handleAddInformationFlow = () => {\n    setEnableInformationFlow(!enableInformationFlow);\n    if (enableInformationFlow) {\n      setSourceNode(null);\n      setDestinationNode(null);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          border: \"none\"\n        }\n      })));\n      setEdges(eds => eds.map(edge => ({\n        ...edge,\n        animated: false,\n        style: {\n          stroke: \"black\"\n        }\n      })));\n    }\n  };\n  const handleNodeSelectionForFlow = (event, nodeData) => {\n    const id = nodeData.id;\n    const node = nodes.find(n => n.id === id);\n    if (enableInformationFlow) {\n      if (!sourceNode) {\n        setSourceNode(node);\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid blue\"\n          }\n        } : n));\n      } else if (sourceNode.id !== id) {\n        setDestinationNode(node);\n\n        // Only add the flow if it doesn't already exist\n        if (!informationFlows.some(flow => flow[0].id === sourceNode.id && flow[1].id === node.id)) {\n          setInformationFlows([...informationFlows, [sourceNode, node]]);\n        }\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid green\"\n          }\n        } : n));\n        setTimeout(handleAddInformationFlow, 1000);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"100vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-9\",\n      style: {\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-3\",\n        style: {\n          position: \"absolute\",\n          top: -88,\n          right: \"-23vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: handleAddInformationFlow,\n          children: \"Add Information Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary ml-2\",\n          onClick: showAllFlows,\n          style: {\n            backgroundColor: viewMode === \"all\" ? \"blue\" : \"grey\"\n          },\n          children: \"All\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: () => showSelectedHolonFlows(selectedNode),\n          style: {\n            backgroundColor: viewMode === \"selected\" ? \"lightblue\" : \"grey\"\n          },\n          disabled: !selectedNode,\n          children: \"Selected Holon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: enableInformationFlow ? handleNodeSelectionForFlow : handleNodeClick,\n        onPaneClick: () => setSelectedNode(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-3\",\n      style: {\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mr-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Holon Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nameofNode\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"nameofNode\",\n            className: \"form-control\",\n            value: selectedNode.data.label,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 137,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"cFuL/llwjBcXx4roJfnrafVQ6rw=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","jsxDEV","_jsxDEV","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","selectedInformationFlow","setSelectedInformationFlow","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","viewMode","setViewMode","informationFlows","setInformationFlows","onConnect","params","eds","handleNodeClick","event","nodeData","showSelectedHolonFlows","showAllFlows","nds","map","node","style","border","edge","animated","stroke","strokeDasharray","id","isConnected","source","target","undefined","handleAddInformationFlow","n","handleNodeSelectionForFlow","find","some","flow","setTimeout","className","display","height","width","children","position","top","right","onClick","fileName","_jsxFileName","lineNumber","columnNumber","backgroundColor","disabled","fitView","onNodeClick","onPaneClick","borderLeft","htmlFor","type","value","data","label","readOnly","isOpen","onRequestClose","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [viewMode, setViewMode] = useState(\"all\"); // \"all\" or \"selected\"\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n\r\n  const handleNodeClick = (event, nodeData) => {\r\n    setSelectedNode(nodeData);\r\n    setViewMode(\"selected\");\r\n    showSelectedHolonFlows(nodeData);\r\n  };\r\n\r\n  const showAllFlows = () => {\r\n    setViewMode(\"all\");\r\n    setNodes((nds) =>\r\n      nds.map((node) => ({\r\n        ...node,\r\n        style: { border: \"2px solid blue\" },\r\n      }))\r\n    );\r\n    setEdges((eds) =>\r\n      eds.map((edge) => ({\r\n        ...edge,\r\n        animated: true,\r\n        style: { stroke: \"green\", strokeDasharray: \"5,5\" },\r\n      }))\r\n    );\r\n  };\r\n\r\n  const showSelectedHolonFlows = (selectedNode) => {\r\n    if (selectedNode) {\r\n      setNodes((nds) =>\r\n        nds.map((node) => ({\r\n          ...node,\r\n          style: {\r\n            border: node.id === selectedNode.id ? \"2px solid lightblue\" : \"none\",\r\n          },\r\n        }))\r\n      );\r\n      setEdges((eds) =>\r\n        eds.map((edge) => {\r\n          const isConnected =\r\n            edge.source === selectedNode.id || edge.target === selectedNode.id;\r\n          return {\r\n            ...edge,\r\n            animated: isConnected,\r\n            style: {\r\n              stroke: isConnected ? \"green\" : \"black\",\r\n              strokeDasharray: isConnected ? \"5,5\" : undefined,\r\n            },\r\n          };\r\n        })\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleAddInformationFlow = () => {\r\n    setEnableInformationFlow(!enableInformationFlow);\r\n    if (enableInformationFlow) {\r\n      setSourceNode(null);\r\n      setDestinationNode(null);\r\n      setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n      setEdges((eds) =>\r\n        eds.map((edge) => ({\r\n          ...edge,\r\n          animated: false,\r\n          style: { stroke: \"black\" },\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const handleNodeSelectionForFlow = (event, nodeData) => {\r\n    const id = nodeData.id;\r\n    const node = nodes.find((n) => n.id === id);\r\n\r\n    if (enableInformationFlow) {\r\n      if (!sourceNode) {\r\n        setSourceNode(node);\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id ? { ...n, style: { border: \"2px solid blue\" } } : n\r\n          )\r\n        );\r\n      } else if (sourceNode.id !== id) {\r\n        setDestinationNode(node);\r\n\r\n        // Only add the flow if it doesn't already exist\r\n        if (!informationFlows.some((flow) => flow[0].id === sourceNode.id && flow[1].id === node.id)) {\r\n          setInformationFlows([...informationFlows, [sourceNode, node]]);\r\n        }\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id\r\n              ? { ...n, style: { border: \"2px solid green\" } }\r\n              : n\r\n          )\r\n        );\r\n        setTimeout(handleAddInformationFlow, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"container-fluid\"\r\n      style={{ display: \"flex\", height: \"100vh\", width: \"100vw\" }}\r\n    >\r\n      <div className=\"col-9\" style={{ height: \"100%\" }}>\r\n        <div\r\n          className=\"d-flex justify-content-between align-items-center mb-3\"\r\n          style={{ position: \"absolute\", top: -88, right: \"-23vw\" }}\r\n        >\r\n          <button\r\n            className={\"btn btn-success\"}\r\n            onClick={handleAddInformationFlow}\r\n          >\r\n            Add Information Flow\r\n          </button>\r\n          <button\r\n            className={\"btn btn-primary ml-2\"}\r\n            onClick={showAllFlows}\r\n            style={{\r\n              backgroundColor: viewMode === \"all\" ? \"blue\" : \"grey\",\r\n            }}\r\n          >\r\n            All\r\n          </button>\r\n          <button\r\n            className={\"btn btn-primary\"}\r\n            onClick={() => showSelectedHolonFlows(selectedNode)}\r\n            style={{\r\n              backgroundColor: viewMode === \"selected\" ? \"lightblue\" : \"grey\",\r\n            }}\r\n            disabled={!selectedNode}\r\n          >\r\n            Selected Holon\r\n          </button>\r\n        </div>\r\n\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={enableInformationFlow ? handleNodeSelectionForFlow : handleNodeClick}\r\n          onPaneClick={() => setSelectedNode(null)}\r\n        />\r\n      </div>\r\n      <div\r\n        className=\"col-3\"\r\n        style={{ padding: \"10px\", borderLeft: \"1px solid #ccc\" }}\r\n      >\r\n        {selectedNode ? (\r\n          <div className=\"mr-3\">\r\n            <h3>Holon Details</h3>\r\n            <div className=\"form-group mb-3\">\r\n              <label htmlFor=\"nameofNode\">Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"nameofNode\"\r\n                className=\"form-control\"\r\n                value={selectedNode.data.label}\r\n                readOnly\r\n              />\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>No Selection</div>\r\n        )}\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\r\n        {/* Modal Content */}\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}