{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  var _selectedInformationF, _selectedInformationF2;\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [isAlertModalOpen, setIsAlertModalOpen] = useState(false);\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [informationFlows, setInformationFlows] = useState([]);\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const exportInformationFlows = useCallback(() => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(informationFlows));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  }, [informationFlows]);\n  const importInformationFlows = useCallback(event => {\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      try {\n        const importedFlows = JSON.parse(e.target.result);\n        if (Array.isArray(importedFlows)) {\n          setInformationFlows(importedFlows.map(([sourceNode, destinationNode]) => {\n            return [nodes.find(node => node.id === sourceNode.id) || sourceNode, nodes.find(node => node.id === destinationNode.id) || destinationNode];\n          }));\n          alert(\"Information Flows loaded successfully.\");\n        } else {\n          alert(\"Invalid JSON format.\");\n        }\n      } catch (error) {\n        alert(\"Failed to load the JSON file. Please check the file format.\");\n      }\n    };\n    if (event.target.files.length > 0) {\n      fileReader.readAsText(event.target.files[0]);\n    }\n  }, [nodes]);\n  const findPath = useCallback((sourceId, targetId) => {\n    const visited = new Set();\n    const queue = [[sourceId]];\n    while (queue.length > 0) {\n      const path = queue.shift();\n      const node = path[path.length - 1];\n      if (node === targetId) return path;\n      if (!visited.has(node)) {\n        visited.add(node);\n        edges.filter(edge => edge.source === node || edge.target === node).forEach(edge => {\n          const nextNode = edge.source === node ? edge.target : edge.source;\n          queue.push([...path, nextNode]);\n        });\n      }\n    }\n    return [];\n  }, [edges]);\n  const resetSelection = useCallback(() => {\n    if (enableInformationFlow) {\n      setSourceNode(null);\n      setDestinationNode(null);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          ...n.style,\n          border: undefined\n        }\n      })));\n      setEdges(eds => eds.map(edge => ({\n        ...edge,\n        animated: false,\n        style: {\n          stroke: \"black\"\n        }\n      })));\n    }\n    setEnableInformationFlow(prev => !prev);\n    setResetFlow(true);\n  }, [enableInformationFlow, setNodes, setEdges]);\n  const showOneFlowOnGraph = useCallback((sourceNode, destinationNode) => {\n    setNodes(nds => nds.map(n => n.id === sourceNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid blue\"\n      }\n    } : n.id === destinationNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid green\"\n      }\n    } : n));\n    const path = findPath(sourceNode.id, destinationNode.id);\n    if (!path || path.length === 0) {\n      console.error(\"No path found between the selected nodes.\");\n      return;\n    }\n    setEdges(eds => eds.map(edge => {\n      var _edge$style, _edge$style2;\n      const isInPath = path.includes(edge.source) && path.includes(edge.target);\n      const isForwardDirection = edge.source === path[0] && edge.target === path[1];\n      return {\n        ...edge,\n        animated: isInPath ? true : edge.animated,\n        style: {\n          ...edge.style,\n          stroke: isInPath ? \"green\" : (_edge$style = edge.style) === null || _edge$style === void 0 ? void 0 : _edge$style.stroke,\n          strokeDasharray: isInPath ? \"5,5\" : (_edge$style2 = edge.style) === null || _edge$style2 === void 0 ? void 0 : _edge$style2.strokeDasharray\n        },\n        markerEnd: isInPath ? {\n          type: MarkerType.ArrowClosed,\n          color: \"green\",\n          orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\"\n        } : edge.markerEnd\n      };\n    }));\n  }, [findPath, setNodes, setEdges]);\n  const showInformationFlowOnTheGraphs = useCallback(() => {\n    informationFlows.forEach(flow => {\n      const [sourceNode, destinationNode] = flow;\n      showOneFlowOnGraph(sourceNode, destinationNode);\n    });\n    setSelectedFlowShow(false);\n  }, [informationFlows, showOneFlowOnGraph]);\n  const resetGraphs = useCallback(() => {\n    setNodes(nds => nds.map(n => ({\n      ...n,\n      style: {\n        border: \"none\"\n      }\n    })));\n    setEdges(eds => eds.map(edge => ({\n      ...edge,\n      animated: false,\n      style: {\n        stroke: \"black\"\n      }\n    })));\n    setSelectedFlowShow(false);\n  }, [setNodes, setEdges]);\n  const showSelectedHolonFlowOnTheGraphs = useCallback(() => {\n    var _selectedNode$data;\n    resetGraphs();\n    let selectedLabel = selectedNode === null || selectedNode === void 0 ? void 0 : (_selectedNode$data = selectedNode.data) === null || _selectedNode$data === void 0 ? void 0 : _selectedNode$data.label;\n    informationFlows.forEach(flow => {\n      var _flow$0$data, _flow$1$data;\n      let flowLabel0 = (_flow$0$data = flow[0].data) === null || _flow$0$data === void 0 ? void 0 : _flow$0$data.label;\n      let flowLabel1 = (_flow$1$data = flow[1].data) === null || _flow$1$data === void 0 ? void 0 : _flow$1$data.label;\n      if (flowLabel0 === selectedLabel || flowLabel1 === selectedLabel) {\n        const [sourceNode, destinationNode] = flow;\n        showOneFlowOnGraph(sourceNode, destinationNode);\n      }\n    });\n    let newInformationFlows = informationFlows.filter(flow => {\n      var _flow$0$data2, _flow$1$data2;\n      let flowLabel0 = (_flow$0$data2 = flow[0].data) === null || _flow$0$data2 === void 0 ? void 0 : _flow$0$data2.label;\n      let flowLabel1 = (_flow$1$data2 = flow[1].data) === null || _flow$1$data2 === void 0 ? void 0 : _flow$1$data2.label;\n      return flowLabel0 === selectedLabel || flowLabel1 === selectedLabel;\n    });\n    setSelectedInformationFlows(newInformationFlows);\n    setSelectedFlowShow(true);\n  }, [selectedNode, informationFlows, resetGraphs, showOneFlowOnGraph]);\n  const handleNodeClick = useCallback((event, nodeData) => {\n    var _informationFlows$fin;\n    const clickedNode = nodes.find(n => n.id === nodeData.id) || nodeData;\n    setSelectedNode(clickedNode);\n    const selectedInformationFlow = informationFlows === null || informationFlows === void 0 ? void 0 : (_informationFlows$fin = informationFlows.find(flow => flow.find(flowItem => (flowItem === null || flowItem === void 0 ? void 0 : flowItem.id) === nodeData.id))) === null || _informationFlows$fin === void 0 ? void 0 : _informationFlows$fin.find(infoFlow => (infoFlow === null || infoFlow === void 0 ? void 0 : infoFlow.id) === nodeData.id);\n    setSelectedInformationFlow(selectedInformationFlow);\n    if (!enableInformationFlow) return;\n    setResetFlow(false);\n    if (!sourceNode) {\n      setSourceNode(clickedNode);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          ...n.style,\n          border: n.id === clickedNode.id ? \"2px solid blue\" : undefined\n        }\n      })));\n    } else if (sourceNode.id !== clickedNode.id && !destinationNode) {\n      const levelTolerance = 15;\n      if (Math.abs(sourceNode.position.y - clickedNode.position.y) > levelTolerance) {\n        setAlertMessage(\"Source and destination nodes must be on the same level.\");\n        setIsAlertModalOpen(true);\n        return;\n      }\n      const path = findPath(sourceNode.id, clickedNode.id);\n      setEdges(eds => eds.map(edge => {\n        var _edge$style3, _edge$style4, _edge$style5;\n        const isInPath = path.includes(edge.source) && path.includes(edge.target);\n        return {\n          ...edge,\n          animated: (edge === null || edge === void 0 ? void 0 : (_edge$style3 = edge.style) === null || _edge$style3 === void 0 ? void 0 : _edge$style3.stroke) === \"green\" || isInPath ? true : false,\n          style: {\n            stroke: (edge === null || edge === void 0 ? void 0 : (_edge$style4 = edge.style) === null || _edge$style4 === void 0 ? void 0 : _edge$style4.stroke) === \"green\" ? \"green\" : isInPath ? \"green\" : \"black\"\n          },\n          markerEnd: {\n            type: (edge === null || edge === void 0 ? void 0 : (_edge$style5 = edge.style) === null || _edge$style5 === void 0 ? void 0 : _edge$style5.stroke) === \"green\" || isInPath ? MarkerType.ArrowClosed : null,\n            color: \"green\",\n            width: 20,\n            height: 20\n          }\n        };\n      }));\n      setDestinationNode(clickedNode);\n      let informationFl = [...informationFlows];\n      const isDuplicate = informationFl.some(flow => flow[0].id === sourceNode.id && flow[1].id === clickedNode.id);\n      if (!isDuplicate) {\n        informationFl.push([sourceNode, clickedNode]);\n        setInformationFlows(informationFl);\n      }\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          ...n.style,\n          border: n.id === clickedNode.id ? \"2px solid green\" : n.id === sourceNode.id ? \"2px solid blue\" : undefined\n        }\n      })));\n      setTimeout(() => resetSelection(), 1000);\n    }\n  }, [enableInformationFlow, nodes, sourceNode, destinationNode, informationFlows, findPath, resetSelection, setNodes, setEdges]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"98vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-8\",\n      style: {\n        height: \"100%\",\n        paddingTop: \"60px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"fixed\",\n          top: \"10px\",\n          right: \"10px\",\n          zIndex: 1000,\n          display: \"flex\",\n          gap: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: resetSelection,\n          children: \"Add Information Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary\",\n          onClick: exportInformationFlows,\n          children: \"Export Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importInformationFlows,\n          style: {\n            display: \"none\"\n          },\n          id: \"uploadFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), \"className=\\\"btn btn-primary\\\"\", /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"uploadFile\",\n          className: \"btn btn-primary\",\n          children: \"Import Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 356,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes.map(node => ({\n          ...node,\n          data: {\n            ...node.data,\n            disable: disableAdd\n          }\n        })),\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: handleNodeClick,\n        onPaneClick: () => setSelectedNode(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 326,\n      columnNumber: 7\n    }, this), sourceNode && destinationNode == null && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\",\n        fontSize: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-success\",\n        children: \"Select the Destination Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 9\n    }, this), resetFlow && enableInformationFlow && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\",\n        fontSize: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-success\",\n        children: \"Select the Source Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-4\",\n      style: {\n        padding: \"10px\",\n        paddingTop: \"60px\",\n        overflowY: \"auto\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mr-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Holon Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nameofNode\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nameofNode\",\n              className: \"form-control\",\n              value: selectedNode.data.label,\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  label: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 412,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeDescription\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"nodeDescription\",\n              className: \"form-control\",\n              style: {\n                height: \"200px\",\n                width: \"100%\"\n              },\n              placeholder: \"An example description...\",\n              value: selectedNode.data.description || \"\",\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  description: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 433,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4 my-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"mb-3\",\n              children: \"Information Flows\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 461,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              value: informationFlows.length > 0 ? selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF = selectedInformationFlow.data) === null || _selectedInformationF === void 0 ? void 0 : _selectedInformationF.label : selectedNode.data.label,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 462,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 460,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeInfoFlows\",\n              children: \"Information Flows Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              style: {\n                height: \"200px\",\n                width: \"100%\"\n              },\n              value: informationFlows.length > 0 ? selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF2 = selectedInformationFlow.data) === null || _selectedInformationF2 === void 0 ? void 0 : _selectedInformationF2.description : selectedNode.data.description,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: enableInformationFlow && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"lead\",\n              children: \"Selected Information Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: showInformationFlowOnTheGraphs,\n              children: \"Show All Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 497,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: showSelectedHolonFlowOnTheGraphs,\n              children: \"Selected Holon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 17\n            }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary mx-2\",\n              onClick: resetGraphs,\n              children: \"Reset Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 510,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 496,\n            columnNumber: 15\n          }, this), !selectedFlowShow && informationFlows.map(nodePair => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-3 alert alert-success\",\n            style: {\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 530,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 529,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                gap: 20\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                children: \"Show Flow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 536,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-danger\",\n                onClick: () => {\n                  const nodeId1 = nodePair[0].id;\n                  const nodeId2 = nodePair[1].id;\n                  setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                  resetGraphs();\n                },\n                children: \"Delete Information Flow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 542,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 535,\n              columnNumber: 21\n            }, this)]\n          }, `${nodePair[0].id}-${nodePair[1].id}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 520,\n            columnNumber: 19\n          }, this)), selectedFlowShow && selectedInformationFlows.map(nodePair => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-3 alert alert-success\",\n            style: {\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 573,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 572,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                gap: 20\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                children: \"Show Flow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 579,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-danger\",\n                onClick: () => {\n                  const nodeId1 = nodePair[0].id;\n                  const nodeId2 = nodePair[1].id;\n                  setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                  resetGraphs();\n                },\n                children: \"Delete Information Flow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 585,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 578,\n              columnNumber: 21\n            }, this)]\n          }, `${nodePair[0].id}-${nodePair[1].id}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 563,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 459,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 404,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title\",\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: () => setIsModalOpen(false),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 618,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 613,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"newNodeLabel\",\n            children: \"New Node Label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 623,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"newNodeLabel\",\n            className: \"form-control\",\n            placeholder: \"New Node Label\",\n            value: newNodeLabel,\n            onChange: e => setNewNodeLabel(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 624,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 622,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 621,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: () => setIsModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: () => {\n            setNodes(nds => [...nds, {\n              id: `${nds.length + 1}`,\n              type: \"customNode\",\n              data: {\n                label: newNodeLabel\n              },\n              position: {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              }\n            }]);\n            setIsModalOpen(false);\n            setNewNodeLabel(\"\");\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 642,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isAlertModalOpen,\n      onRequestClose: () => setIsAlertModalOpen(false),\n      style: {\n        overlay: {\n          backgroundColor: \"rgba(0, 0, 0, 0.5)\"\n        },\n        content: {\n          top: \"50%\",\n          left: \"50%\",\n          right: \"auto\",\n          bottom: \"auto\",\n          marginRight: \"-50%\",\n          transform: \"translate(-50%, -50%)\",\n          width: \"400px\",\n          height: \"auto\",\n          padding: \"20px\",\n          borderRadius: \"8px\",\n          boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\"\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title\",\n          children: \"Alert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 684,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: () => setIsAlertModalOpen(false),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 690,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 685,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 683,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: alertMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 694,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 693,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: () => setIsAlertModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 696,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 663,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 322,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"yvIeLoj9UX+1IAMROkqpQWbnyls=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","jsxDEV","_jsxDEV","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","_selectedInformationF","_selectedInformationF2","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","selectedInformationFlow","setSelectedInformationFlow","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","resetFlow","setResetFlow","isAlertModalOpen","setIsAlertModalOpen","alertMessage","setAlertMessage","informationFlows","setInformationFlows","selectedInformationFlows","setSelectedInformationFlows","selectedFlowShow","setSelectedFlowShow","onConnect","params","eds","exportInformationFlows","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","importInformationFlows","event","fileReader","FileReader","onload","e","importedFlows","parse","target","result","Array","isArray","map","find","node","id","alert","error","files","length","readAsText","findPath","sourceId","targetId","visited","Set","queue","path","shift","has","add","filter","edge","source","forEach","nextNode","push","resetSelection","nds","n","style","border","undefined","animated","stroke","prev","showOneFlowOnGraph","console","_edge$style","_edge$style2","isInPath","includes","isForwardDirection","strokeDasharray","markerEnd","type","ArrowClosed","color","orient","showInformationFlowOnTheGraphs","flow","resetGraphs","showSelectedHolonFlowOnTheGraphs","_selectedNode$data","selectedLabel","data","label","_flow$0$data","_flow$1$data","flowLabel0","flowLabel1","newInformationFlows","_flow$0$data2","_flow$1$data2","handleNodeClick","nodeData","_informationFlows$fin","clickedNode","flowItem","infoFlow","levelTolerance","Math","abs","position","y","_edge$style3","_edge$style4","_edge$style5","width","height","informationFl","isDuplicate","some","setTimeout","className","display","children","paddingTop","top","right","zIndex","gap","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","htmlFor","disable","fitView","onNodeClick","onPaneClick","left","fontSize","overflowY","value","placeholder","description","readOnly","nodePair","justifyContent","alignItems","nodeId1","nodeId2","flows","pair","isOpen","onRequestClose","x","random","overlay","backgroundColor","content","bottom","marginRight","transform","borderRadius","boxShadow","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n  const [isAlertModalOpen, setIsAlertModalOpen] = useState(false);\r\n  const [alertMessage, setAlertMessage] = useState(\"\");\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\r\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\r\n\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n\r\n  const exportInformationFlows = useCallback(() => {\r\n    const dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(informationFlows));\r\n    const downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\r\n    document.body.appendChild(downloadAnchorNode);\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  }, [informationFlows]);\r\n\r\n  const importInformationFlows = useCallback((event) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = (e) => {\r\n      try {\r\n        const importedFlows = JSON.parse(e.target.result);\r\n        if (Array.isArray(importedFlows)) {\r\n          setInformationFlows(\r\n            importedFlows.map(([sourceNode, destinationNode]) => {\r\n              return [\r\n                nodes.find((node) => node.id === sourceNode.id) || sourceNode,\r\n                nodes.find((node) => node.id === destinationNode.id) ||\r\n                  destinationNode,\r\n              ];\r\n            })\r\n          );\r\n          alert(\"Information Flows loaded successfully.\");\r\n        } else {\r\n          alert(\"Invalid JSON format.\");\r\n        }\r\n      } catch (error) {\r\n        alert(\"Failed to load the JSON file. Please check the file format.\");\r\n      }\r\n    };\r\n    if (event.target.files.length > 0) {\r\n      fileReader.readAsText(event.target.files[0]);\r\n    }\r\n  }, [nodes]);\r\n\r\n  const findPath = useCallback((sourceId, targetId) => {\r\n    const visited = new Set();\r\n    const queue = [[sourceId]];\r\n    while (queue.length > 0) {\r\n      const path = queue.shift();\r\n      const node = path[path.length - 1];\r\n      if (node === targetId) return path;\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        edges\r\n          .filter((edge) => edge.source === node || edge.target === node)\r\n          .forEach((edge) => {\r\n            const nextNode = edge.source === node ? edge.target : edge.source;\r\n            queue.push([...path, nextNode]);\r\n          });\r\n      }\r\n    }\r\n    return [];\r\n  }, [edges]);\r\n\r\n  const resetSelection = useCallback(() => {\r\n    if (enableInformationFlow) {\r\n      setSourceNode(null);\r\n      setDestinationNode(null);\r\n      setNodes((nds) =>\r\n        nds.map((n) => ({\r\n          ...n,\r\n          style: { ...n.style, border: undefined },\r\n        }))\r\n      );\r\n      setEdges((eds) =>\r\n        eds.map((edge) => ({\r\n          ...edge,\r\n          animated: false,\r\n          style: { stroke: \"black\" },\r\n        }))\r\n      );\r\n    }\r\n    setEnableInformationFlow((prev) => !prev);\r\n    setResetFlow(true);\r\n  }, [enableInformationFlow, setNodes, setEdges]);\r\n\r\n  const showOneFlowOnGraph = useCallback(\r\n    (sourceNode, destinationNode) => {\r\n      setNodes((nds) =>\r\n        nds.map((n) =>\r\n          n.id === sourceNode.id\r\n            ? { ...n, style: { border: \"2px solid blue\" } }\r\n            : n.id === destinationNode.id\r\n            ? { ...n, style: { border: \"2px solid green\" } }\r\n            : n\r\n        )\r\n      );\r\n\r\n      const path = findPath(sourceNode.id, destinationNode.id);\r\n      if (!path || path.length === 0) {\r\n        console.error(\"No path found between the selected nodes.\");\r\n        return;\r\n      }\r\n\r\n      setEdges((eds) =>\r\n        eds.map((edge) => {\r\n          const isInPath =\r\n            path.includes(edge.source) && path.includes(edge.target);\r\n          const isForwardDirection =\r\n            edge.source === path[0] && edge.target === path[1];\r\n          return {\r\n            ...edge,\r\n            animated: isInPath ? true : edge.animated,\r\n            style: {\r\n              ...edge.style,\r\n              stroke: isInPath ? \"green\" : edge.style?.stroke,\r\n              strokeDasharray: isInPath ? \"5,5\" : edge.style?.strokeDasharray,\r\n            },\r\n            markerEnd: isInPath\r\n              ? {\r\n                  type: MarkerType.ArrowClosed,\r\n                  color: \"green\",\r\n                  orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\",\r\n                }\r\n              : edge.markerEnd,\r\n          };\r\n        })\r\n      );\r\n    },\r\n    [findPath, setNodes, setEdges]\r\n  );\r\n\r\n  const showInformationFlowOnTheGraphs = useCallback(() => {\r\n    informationFlows.forEach((flow) => {\r\n      const [sourceNode, destinationNode] = flow;\r\n      showOneFlowOnGraph(sourceNode, destinationNode);\r\n    });\r\n    setSelectedFlowShow(false);\r\n  }, [informationFlows, showOneFlowOnGraph]);\r\n\r\n  const resetGraphs = useCallback(() => {\r\n    setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n    setEdges((eds) =>\r\n      eds.map((edge) => ({\r\n        ...edge,\r\n        animated: false,\r\n        style: { stroke: \"black\" },\r\n      }))\r\n    );\r\n    setSelectedFlowShow(false);\r\n  }, [setNodes, setEdges]);\r\n\r\n  const showSelectedHolonFlowOnTheGraphs = useCallback(() => {\r\n    resetGraphs();\r\n    let selectedLabel = selectedNode?.data?.label;\r\n    informationFlows.forEach((flow) => {\r\n      let flowLabel0 = flow[0].data?.label;\r\n      let flowLabel1 = flow[1].data?.label;\r\n      if (flowLabel0 === selectedLabel || flowLabel1 === selectedLabel) {\r\n        const [sourceNode, destinationNode] = flow;\r\n        showOneFlowOnGraph(sourceNode, destinationNode);\r\n      }\r\n    });\r\n    let newInformationFlows = informationFlows.filter((flow) => {\r\n      let flowLabel0 = flow[0].data?.label;\r\n      let flowLabel1 = flow[1].data?.label;\r\n      return flowLabel0 === selectedLabel || flowLabel1 === selectedLabel;\r\n    });\r\n    setSelectedInformationFlows(newInformationFlows);\r\n    setSelectedFlowShow(true);\r\n  }, [selectedNode, informationFlows, resetGraphs, showOneFlowOnGraph]);\r\n\r\n  const handleNodeClick = useCallback(\r\n    (event, nodeData) => {\r\n      const clickedNode = nodes.find((n) => n.id === nodeData.id) || nodeData;\r\n      setSelectedNode(clickedNode);\r\n      const selectedInformationFlow = informationFlows\r\n        ?.find((flow) => flow.find((flowItem) => flowItem?.id === nodeData.id))\r\n        ?.find((infoFlow) => infoFlow?.id === nodeData.id);\r\n      setSelectedInformationFlow(selectedInformationFlow);\r\n\r\n      if (!enableInformationFlow) return;\r\n\r\n      setResetFlow(false);\r\n\r\n      if (!sourceNode) {\r\n        setSourceNode(clickedNode);\r\n        setNodes((nds) =>\r\n          nds.map((n) => ({\r\n            ...n,\r\n            style: {\r\n              ...n.style,\r\n              border: n.id === clickedNode.id ? \"2px solid blue\" : undefined,\r\n            },\r\n          }))\r\n        );\r\n      } else if (sourceNode.id !== clickedNode.id && !destinationNode) {\r\n        const levelTolerance = 15;\r\n        if (\r\n          Math.abs(sourceNode.position.y - clickedNode.position.y) >\r\n          levelTolerance\r\n        ) {\r\n          setAlertMessage(\r\n            \"Source and destination nodes must be on the same level.\"\r\n          );\r\n          setIsAlertModalOpen(true);\r\n          return;\r\n        }\r\n\r\n        const path = findPath(sourceNode.id, clickedNode.id);\r\n        setEdges((eds) =>\r\n          eds.map((edge) => {\r\n            const isInPath =\r\n              path.includes(edge.source) && path.includes(edge.target);\r\n            return {\r\n              ...edge,\r\n              animated:\r\n                edge?.style?.stroke === \"green\" || isInPath ? true : false,\r\n              style: {\r\n                stroke:\r\n                  edge?.style?.stroke === \"green\"\r\n                    ? \"green\"\r\n                    : isInPath\r\n                    ? \"green\"\r\n                    : \"black\",\r\n              },\r\n              markerEnd: {\r\n                type:\r\n                  edge?.style?.stroke === \"green\" || isInPath\r\n                    ? MarkerType.ArrowClosed\r\n                    : null,\r\n                color: \"green\",\r\n                width: 20,\r\n                height: 20,\r\n              },\r\n            };\r\n          })\r\n        );\r\n\r\n        setDestinationNode(clickedNode);\r\n        let informationFl = [...informationFlows];\r\n\r\n        const isDuplicate = informationFl.some(\r\n          (flow) => flow[0].id === sourceNode.id && flow[1].id === clickedNode.id\r\n        );\r\n\r\n        if (!isDuplicate) {\r\n          informationFl.push([sourceNode, clickedNode]);\r\n          setInformationFlows(informationFl);\r\n        }\r\n        setNodes((nds) =>\r\n          nds.map((n) => ({\r\n            ...n,\r\n            style: {\r\n              ...n.style,\r\n              border:\r\n                n.id === clickedNode.id\r\n                  ? \"2px solid green\"\r\n                  : n.id === sourceNode.id\r\n                  ? \"2px solid blue\"\r\n                  : undefined,\r\n            },\r\n          }))\r\n        );\r\n        setTimeout(() => resetSelection(), 1000);\r\n      }\r\n    },\r\n    [\r\n      enableInformationFlow,\r\n      nodes,\r\n      sourceNode,\r\n      destinationNode,\r\n      informationFlows,\r\n      findPath,\r\n      resetSelection,\r\n      setNodes,\r\n      setEdges,\r\n    ]\r\n  );\r\n\r\n  return (\r\n    <div\r\n      className=\"container-fluid\"\r\n      style={{ display: \"flex\", height: \"100vh\", width: \"98vw\" }}\r\n    >\r\n      <div className=\"col-8\" style={{ height: \"100%\", paddingTop: \"60px\" }}>\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: \"10px\",\r\n            right: \"10px\",\r\n            zIndex: 1000,\r\n            display: \"flex\",\r\n            gap: \"10px\",\r\n          }}\r\n        >\r\n          <button className=\"btn btn-success\" onClick={resetSelection}>\r\n            Add Information Flow\r\n          </button>\r\n          {informationFlows.length > 0 && (\r\n            <button\r\n              className=\"btn btn-primary\"\r\n              onClick={exportInformationFlows}\r\n            >\r\n              Export Information Flows\r\n            </button>\r\n          )}\r\n          <input\r\n            type=\"file\"\r\n            accept=\".json\"\r\n            onChange={importInformationFlows}\r\n            style={{ display: \"none\" }}\r\n            id=\"uploadFile\"\r\n          />\r\n              className=\"btn btn-primary\"\r\n          <label htmlFor=\"uploadFile\" className=\"btn btn-primary\">\r\n            Import Information Flows\r\n          </label>\r\n        </div>\r\n\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes.map((node) => ({\r\n            ...node,\r\n            data: { ...node.data, disable: disableAdd },\r\n          }))}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={handleNodeClick}\r\n          onPaneClick={() => setSelectedNode(null)}\r\n        />\r\n      </div>\r\n      {sourceNode && destinationNode == null && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: \"90%\",\r\n            left: \"20%\",\r\n            fontSize: \"20px\",\r\n          }}\r\n        >\r\n          <div className=\"mt-3 alert alert-success\">\r\n            Select the Destination Node\r\n          </div>\r\n        </div>\r\n      )}\r\n      {resetFlow && enableInformationFlow && (\r\n        <div\r\n          style={{\r\n            position: \"fixed\",\r\n            top: \"90%\",\r\n            left: \"20%\",\r\n            fontSize: \"20px\",\r\n          }}\r\n        >\r\n          <div className=\"mt-3 alert alert-success\">Select the Source Node</div>\r\n        </div>\r\n      )}\r\n      <div\r\n        className=\"col-4\"\r\n        style={{ padding: \"10px\", paddingTop: \"60px\", overflowY: \"auto\" }}\r\n      >\r\n        {selectedNode ? (\r\n          <div className=\"mr-3\">\r\n            <div className=\"border border-dark p-4\">\r\n              <h4>Holon Details</h4>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nameofNode\">Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nameofNode\"\r\n                  className=\"form-control\"\r\n                  value={selectedNode.data.label}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? {\r\n                              ...node,\r\n                              data: { ...node.data, label: e.target.value },\r\n                            }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeDescription\">Description</label>\r\n                <textarea\r\n                  id=\"nodeDescription\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"200px\", width: \"100%\" }}\r\n                  placeholder=\"An example description...\"\r\n                  value={selectedNode.data.description || \"\"}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? {\r\n                              ...node,\r\n                              data: {\r\n                                ...node.data,\r\n                                description: e.target.value,\r\n                              },\r\n                            }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"border border-dark p-4 my-2\">\r\n              <div className=\"form-group mb-3\">\r\n                <h4 className=\"mb-3\">Information Flows</h4>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.data?.label\r\n                      : selectedNode.data.label\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeInfoFlows\">\r\n                  Information Flows Description\r\n                </label>\r\n                <textarea\r\n                  type=\"text\"\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"200px\", width: \"100%\" }}\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.data?.description\r\n                      : selectedNode.data.description\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n              <div>\r\n                {enableInformationFlow && (\r\n                  <p className=\"lead\">Selected Information Flow</p>\r\n                )}\r\n              </div>\r\n              <div>\r\n                <button\r\n                  className=\"btn btn-success mx-1\"\r\n                  onClick={showInformationFlowOnTheGraphs}\r\n                >\r\n                  Show All Flow\r\n                </button>\r\n                <button\r\n                  className=\"btn btn-success mx-1\"\r\n                  onClick={showSelectedHolonFlowOnTheGraphs}\r\n                >\r\n                  Selected Holon\r\n                </button>\r\n                {informationFlows.length > 0 && (\r\n                  <button\r\n                    className=\"btn btn-primary mx-2\"\r\n                    onClick={resetGraphs}\r\n                  >\r\n                    Reset Flow\r\n                  </button>\r\n                )}\r\n              </div>\r\n              {!selectedFlowShow &&\r\n                informationFlows.map((nodePair) => (\r\n                  <div\r\n                    className=\"mt-3 alert alert-success\"\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"space-between\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                    key={`${nodePair[0].id}-${nodePair[1].id}`}\r\n                  >\r\n                    <div>\r\n                      <strong>\r\n                        {nodePair[0].data.label} {\"-->\"}{\" \"}\r\n                        {nodePair[1].data.label}\r\n                      </strong>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", gap: 20 }}>\r\n                      <button\r\n                        className=\"btn btn-success\"\r\n                        onClick={() => showOneFlowOnGraph(nodePair[0], nodePair[1])}\r\n                      >\r\n                        Show Flow\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => {\r\n                          const nodeId1 = nodePair[0].id;\r\n                          const nodeId2 = nodePair[1].id;\r\n                          setInformationFlows((flows) =>\r\n                            flows.filter(\r\n                              (pair) =>\r\n                                !(pair[0].id === nodeId1 && pair[1].id === nodeId2)\r\n                            )\r\n                          );\r\n                          resetGraphs();\r\n                        }}\r\n                      >\r\n                        Delete Information Flow\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              {selectedFlowShow &&\r\n                selectedInformationFlows.map((nodePair) => (\r\n                  <div\r\n                    className=\"mt-3 alert alert-success\"\r\n                    style={{\r\n                      display: \"flex\",\r\n                      justifyContent: \"space-between\",\r\n                      alignItems: \"center\",\r\n                    }}\r\n                    key={`${nodePair[0].id}-${nodePair[1].id}`}\r\n                  >\r\n                    <div>\r\n                      <strong>\r\n                        {nodePair[0].data.label} {\"-->\"}{\" \"}\r\n                        {nodePair[1].data.label}\r\n                      </strong>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", gap: 20 }}>\r\n                      <button\r\n                        className=\"btn btn-success\"\r\n                        onClick={() => showOneFlowOnGraph(nodePair[0], nodePair[1])}\r\n                      >\r\n                        Show Flow\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => {\r\n                          const nodeId1 = nodePair[0].id;\r\n                          const nodeId2 = nodePair[1].id;\r\n                          setInformationFlows((flows) =>\r\n                            flows.filter(\r\n                              (pair) =>\r\n                                !(pair[0].id === nodeId1 && pair[1].id === nodeId2)\r\n                            )\r\n                          );\r\n                          resetGraphs();\r\n                        }}\r\n                      >\r\n                        Delete Information Flow\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>No Selection</div>\r\n        )}\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title\">Add Node</h5>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            <span>×</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <div className=\"form-group mb-3\">\r\n            <label htmlFor=\"newNodeLabel\">New Node Label</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"newNodeLabel\"\r\n              className=\"form-control\"\r\n              placeholder=\"New Node Label\"\r\n              value={newNodeLabel}\r\n              onChange={(e) => setNewNodeLabel(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            Close\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              setNodes((nds) => [\r\n                ...nds,\r\n                {\r\n                  id: `${nds.length + 1}`,\r\n                  type: \"customNode\",\r\n                  data: { label: newNodeLabel },\r\n                  position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n                },\r\n              ]);\r\n              setIsModalOpen(false);\r\n              setNewNodeLabel(\"\");\r\n            }}\r\n          >\r\n            Add Node\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n      <Modal\r\n        isOpen={isAlertModalOpen}\r\n        onRequestClose={() => setIsAlertModalOpen(false)}\r\n        style={{\r\n          overlay: { backgroundColor: \"rgba(0, 0, 0, 0.5)\" },\r\n          content: {\r\n            top: \"50%\",\r\n            left: \"50%\",\r\n            right: \"auto\",\r\n            bottom: \"auto\",\r\n            marginRight: \"-50%\",\r\n            transform: \"translate(-50%, -50%)\",\r\n            width: \"400px\",\r\n            height: \"auto\",\r\n            padding: \"20px\",\r\n            borderRadius: \"8px\",\r\n            boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\r\n          },\r\n        }}\r\n      >\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title\">Alert</h5>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={() => setIsAlertModalOpen(false)}\r\n          >\r\n            <span>×</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <p>{alertMessage}</p>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={() => setIsAlertModalOpen(false)}\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}