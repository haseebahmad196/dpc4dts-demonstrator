{"ast":null,"code":"var _jsxFileName = \"C:\\\\Documents for a job\\\\Certifications\\\\Meta Frontend\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Tree, TreeNode } from 'react-organizational-chart';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Holon = ({\n  node,\n  onAddChild,\n  onRemoveNode,\n  onSelectNode,\n  isSelected\n}) => {\n  const handleActionClick = (e, action) => {\n    e.stopPropagation();\n    action(node); // Pass the node as an argument to the action\n  };\n  const selected = isSelected(node);\n  return /*#__PURE__*/_jsxDEV(TreeNode, {\n    label: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `tree-label ${selected ? 'selected' : ''}`,\n      onClick: () => onSelectNode(node),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          onClick: e => handleActionClick(e, onAddChild),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 17,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"name\",\n        children: node.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), node.id !== 'root' && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"remove-button\",\n        onClick: e => handleActionClick(e, onRemoveNode),\n        children: \"x\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 7\n    }, this),\n    children: node.children && node.children.map(child => /*#__PURE__*/_jsxDEV(Holon, {\n      node: child,\n      onAddChild: onAddChild,\n      onRemoveNode: onRemoveNode,\n      onSelectNode: onSelectNode,\n      isSelected: isSelected\n    }, child.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 14,\n    columnNumber: 5\n  }, this);\n};\n_c = Holon;\nconst App = () => {\n  _s();\n  const initialNodes = {\n    id: 'root',\n    name: 'Information System',\n    description: 'An information system is an organized combination of people, hardware, software, communication networks, and data resources that collects, transforms, and disseminates information in an organization.',\n    children: [\n      // Initial children\n    ]\n  };\n  const [nodes, setNodes] = useState(initialNodes);\n  const [selectedHolon, setSelectedHolon] = useState(null);\n  const onAddChild = parentNode => {\n    const childName = prompt('Enter the name of the new node:');\n    if (!childName) return;\n    if (parentNode.id === 'root') {\n      // For adding a parent to the root, restructure the tree.\n      const newRoot = {\n        id: `new-root-${Math.random()}`,\n        name: childName,\n        children: [nodes] // Make the current root a child of the new root\n      };\n      setNodes(newRoot);\n    } else {\n      // Adding a child to a non-root node\n      const newChild = {\n        id: `${parentNode.id}-${Math.random()}`,\n        name: childName,\n        children: []\n      };\n      const addNode = (nodes, parentId) => {\n        if (nodes.id === parentId) {\n          nodes.children = [...nodes.children, newChild];\n          return;\n        }\n        nodes.children.forEach(child => addNode(child, parentId));\n      };\n      const newNodes = {\n        ...nodes\n      };\n      addNode(newNodes, parentNode.id);\n      setNodes(newNodes);\n    }\n  };\n  const onRemoveNode = nodeId => {\n    // Removal logic remains the same\n  };\n  const isSelected = node => selectedHolon && node.id === selectedHolon.id;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Tree, {\n      lineWidth: \"2px\",\n      lineColor: \"blue\",\n      lineBorderRadius: \"5px\",\n      children: /*#__PURE__*/_jsxDEV(Holon, {\n        node: nodes,\n        onAddChild: onAddChild,\n        onRemoveNode: onRemoveNode,\n        onSelectNode: setSelectedHolon,\n        isSelected: isSelected\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, this), selectedHolon && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"holon-details\",\n      children: \"// Details UI remains the same\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"31YFXVOmbk0FSScOe6uAY/bmYAY=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Holon\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","Tree","TreeNode","jsxDEV","_jsxDEV","Holon","node","onAddChild","onRemoveNode","onSelectNode","isSelected","handleActionClick","e","action","stopPropagation","selected","label","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","name","id","map","child","_c","App","_s","initialNodes","description","nodes","setNodes","selectedHolon","setSelectedHolon","parentNode","childName","prompt","newRoot","Math","random","newChild","addNode","parentId","forEach","newNodes","nodeId","lineWidth","lineColor","lineBorderRadius","_c2","$RefreshReg$"],"sources":["C:/Documents for a job/Certifications/Meta Frontend/my-react-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Tree, TreeNode } from 'react-organizational-chart';\nimport './styles.css';\n\nconst Holon = ({ node, onAddChild, onRemoveNode, onSelectNode, isSelected }) => {\n  const handleActionClick = (e, action) => {\n    e.stopPropagation();\n    action(node); // Pass the node as an argument to the action\n  };\n\n  const selected = isSelected(node);\n\n  return (\n    <TreeNode label={\n      <div className={`tree-label ${selected ? 'selected' : ''}`} onClick={() => onSelectNode(node)}>\n        <div className=\"buttons\">\n          <button className=\"add-button\" onClick={(e) => handleActionClick(e, onAddChild)}>+</button>\n        </div>\n        <div className=\"name\">{node.name}</div>\n        {node.id !== 'root' && (\n          <button className=\"remove-button\" onClick={(e) => handleActionClick(e, onRemoveNode)}>x</button>\n        )}\n      </div>\n    }>\n      {node.children && node.children.map(child => (\n        <Holon \n          key={child.id} \n          node={child} \n          onAddChild={onAddChild} \n          onRemoveNode={onRemoveNode} \n          onSelectNode={onSelectNode} \n          isSelected={isSelected}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const initialNodes = {\n    id: 'root',\n    name: 'Information System',\n    description: 'An information system is an organized combination of people, hardware, software, communication networks, and data resources that collects, transforms, and disseminates information in an organization.',\n    children: [\n      // Initial children\n    ],\n  };\n\n  const [nodes, setNodes] = useState(initialNodes);\n  const [selectedHolon, setSelectedHolon] = useState(null);\n\n  const onAddChild = (parentNode) => {\n    const childName = prompt('Enter the name of the new node:');\n    if (!childName) return;\n\n    if (parentNode.id === 'root') {\n      // For adding a parent to the root, restructure the tree.\n      const newRoot = {\n        id: `new-root-${Math.random()}`,\n        name: childName,\n        children: [nodes], // Make the current root a child of the new root\n      };\n      setNodes(newRoot);\n    } else {\n      // Adding a child to a non-root node\n      const newChild = {\n        id: `${parentNode.id}-${Math.random()}`,\n        name: childName,\n        children: []\n      };\n\n      const addNode = (nodes, parentId) => {\n        if (nodes.id === parentId) {\n          nodes.children = [...nodes.children, newChild];\n          return;\n        }\n\n        nodes.children.forEach(child => addNode(child, parentId));\n      };\n\n      const newNodes = { ...nodes };\n      addNode(newNodes, parentNode.id);\n      setNodes(newNodes);\n    }\n  };\n\n  const onRemoveNode = (nodeId) => {\n    // Removal logic remains the same\n  };\n\n  const isSelected = (node) => selectedHolon && node.id === selectedHolon.id;\n\n  return (\n    <div className=\"app-container\">\n      <Tree lineWidth={\"2px\"} lineColor={\"blue\"} lineBorderRadius={\"5px\"}>\n        <Holon\n          node={nodes}\n          onAddChild={onAddChild}\n          onRemoveNode={onRemoveNode}\n          onSelectNode={setSelectedHolon}\n          isSelected={isSelected}\n        />\n      </Tree>\n      {selectedHolon && (\n        <div className=\"holon-details\">\n          // Details UI remains the same\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}