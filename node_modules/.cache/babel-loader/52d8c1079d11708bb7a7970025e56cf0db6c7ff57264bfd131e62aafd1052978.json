{"ast":null,"code":"import React, { createContext, useContext, useMemo, memo, useRef, useState, useEffect, forwardRef, useCallback } from 'react';\nimport cc from 'classcat';\nimport { useStoreWithEqualityFn, createWithEqualityFn } from 'zustand/traditional';\nimport { shallow } from 'zustand/shallow';\nimport { zoomIdentity, zoom } from 'd3-zoom';\nimport { select, pointer } from 'd3-selection';\nimport { drag } from 'd3-drag';\nimport { createPortal } from 'react-dom';\nconst StoreContext = createContext(null);\nconst Provider$1 = StoreContext.Provider;\nconst errorMessages = {\n  error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\n  error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n  error003: nodeType => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n  error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\n  error005: () => 'Only child nodes can use a parent extent.',\n  error006: () => \"Can't create edge. An edge needs a source and a target.\",\n  error007: id => `The old edge with id=${id} does not exist.`,\n  error009: type => `Marker type \"${type}\" doesn't exist.`,\n  error008: (sourceHandle, edge) => `Couldn't create edge for ${!sourceHandle ? 'source' : 'target'} handle id: \"${!sourceHandle ? edge.sourceHandle : edge.targetHandle}\", edge id: ${edge.id}.`,\n  error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\n  error011: edgeType => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n  error012: id => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`\n};\nconst zustandErrorMessage = errorMessages['error001']();\nfunction useStore(selector, equalityFn) {\n  const store = useContext(StoreContext);\n  if (store === null) {\n    throw new Error(zustandErrorMessage);\n  }\n  return useStoreWithEqualityFn(store, selector, equalityFn);\n}\nconst useStoreApi = () => {\n  const store = useContext(StoreContext);\n  if (store === null) {\n    throw new Error(zustandErrorMessage);\n  }\n  return useMemo(() => ({\n    getState: store.getState,\n    setState: store.setState,\n    subscribe: store.subscribe,\n    destroy: store.destroy\n  }), [store]);\n};\nconst selector$g = s => s.userSelectionActive ? 'none' : 'all';\nfunction Panel({\n  position,\n  children,\n  className,\n  style,\n  ...rest\n}) {\n  const pointerEvents = useStore(selector$g);\n  const positionClasses = `${position}`.split('-');\n  return React.createElement(\"div\", {\n    className: cc(['react-flow__panel', className, ...positionClasses]),\n    style: {\n      ...style,\n      pointerEvents\n    },\n    ...rest\n  }, children);\n}\nfunction Attribution({\n  proOptions,\n  position = 'bottom-right'\n}) {\n  if (proOptions?.hideAttribution) {\n    return null;\n  }\n  return React.createElement(Panel, {\n    position: position,\n    className: \"react-flow__attribution\",\n    \"data-message\": \"Please only hide this attribution when you are subscribed to React Flow Pro: https://reactflow.dev/pro\"\n  }, React.createElement(\"a\", {\n    href: \"https://reactflow.dev\",\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    \"aria-label\": \"React Flow attribution\"\n  }, \"React Flow\"));\n}\nconst EdgeText = ({\n  x,\n  y,\n  label,\n  labelStyle = {},\n  labelShowBg = true,\n  labelBgStyle = {},\n  labelBgPadding = [2, 4],\n  labelBgBorderRadius = 2,\n  children,\n  className,\n  ...rest\n}) => {\n  const edgeRef = useRef(null);\n  const [edgeTextBbox, setEdgeTextBbox] = useState({\n    x: 0,\n    y: 0,\n    width: 0,\n    height: 0\n  });\n  const edgeTextClasses = cc(['react-flow__edge-textwrapper', className]);\n  useEffect(() => {\n    if (edgeRef.current) {\n      const textBbox = edgeRef.current.getBBox();\n      setEdgeTextBbox({\n        x: textBbox.x,\n        y: textBbox.y,\n        width: textBbox.width,\n        height: textBbox.height\n      });\n    }\n  }, [label]);\n  if (typeof label === 'undefined' || !label) {\n    return null;\n  }\n  return React.createElement(\"g\", {\n    transform: `translate(${x - edgeTextBbox.width / 2} ${y - edgeTextBbox.height / 2})`,\n    className: edgeTextClasses,\n    visibility: edgeTextBbox.width ? 'visible' : 'hidden',\n    ...rest\n  }, labelShowBg && React.createElement(\"rect\", {\n    width: edgeTextBbox.width + 2 * labelBgPadding[0],\n    x: -labelBgPadding[0],\n    y: -labelBgPadding[1],\n    height: edgeTextBbox.height + 2 * labelBgPadding[1],\n    className: \"react-flow__edge-textbg\",\n    style: labelBgStyle,\n    rx: labelBgBorderRadius,\n    ry: labelBgBorderRadius\n  }), React.createElement(\"text\", {\n    className: \"react-flow__edge-text\",\n    y: edgeTextBbox.height / 2,\n    dy: \"0.3em\",\n    ref: edgeRef,\n    style: labelStyle\n  }, label), children);\n};\nvar EdgeText$1 = memo(EdgeText);\nconst getDimensions = node => ({\n  width: node.offsetWidth,\n  height: node.offsetHeight\n});\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\nconst clampPosition = (position = {\n  x: 0,\n  y: 0\n}, extent) => ({\n  x: clamp(position.x, extent[0][0], extent[1][0]),\n  y: clamp(position.y, extent[0][1], extent[1][1])\n});\n// returns a number between 0 and 1 that represents the velocity of the movement\n// when the mouse is close to the edge of the canvas\nconst calcAutoPanVelocity = (value, min, max) => {\n  if (value < min) {\n    return clamp(Math.abs(value - min), 1, 50) / 50;\n  } else if (value > max) {\n    return -clamp(Math.abs(value - max), 1, 50) / 50;\n  }\n  return 0;\n};\nconst calcAutoPan = (pos, bounds) => {\n  const xMovement = calcAutoPanVelocity(pos.x, 35, bounds.width - 35) * 20;\n  const yMovement = calcAutoPanVelocity(pos.y, 35, bounds.height - 35) * 20;\n  return [xMovement, yMovement];\n};\nconst getHostForElement = element => element.getRootNode?.() || window?.document;\nconst getBoundsOfBoxes = (box1, box2) => ({\n  x: Math.min(box1.x, box2.x),\n  y: Math.min(box1.y, box2.y),\n  x2: Math.max(box1.x2, box2.x2),\n  y2: Math.max(box1.y2, box2.y2)\n});\nconst rectToBox = ({\n  x,\n  y,\n  width,\n  height\n}) => ({\n  x,\n  y,\n  x2: x + width,\n  y2: y + height\n});\nconst boxToRect = ({\n  x,\n  y,\n  x2,\n  y2\n}) => ({\n  x,\n  y,\n  width: x2 - x,\n  height: y2 - y\n});\nconst nodeToRect = node => ({\n  ...(node.positionAbsolute || {\n    x: 0,\n    y: 0\n  }),\n  width: node.width || 0,\n  height: node.height || 0\n});\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB) => {\n  const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n  const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n  return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = obj => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst isNumeric = n => !isNaN(n) && isFinite(n);\nconst internalsSymbol = Symbol.for('internals');\n// used for a11y key board controls for nodes and edges\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\nconst devWarn = (id, message) => {\n  if (process.env.NODE_ENV === 'development') {\n    console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n  }\n};\nconst isReactKeyboardEvent = event => 'nativeEvent' in event;\nfunction isInputDOMNode(event) {\n  const kbEvent = isReactKeyboardEvent(event) ? event.nativeEvent : event;\n  // using composed path for handling shadow dom\n  const target = kbEvent.composedPath?.()?.[0] || event.target;\n  const isInput = ['INPUT', 'SELECT', 'TEXTAREA'].includes(target?.nodeName) || target?.hasAttribute('contenteditable');\n  // when an input field is focused we don't want to trigger deletion or movement of nodes\n  return isInput || !!target?.closest('.nokey');\n}\nconst isMouseEvent = event => 'clientX' in event;\nconst getEventPosition = (event, bounds) => {\n  const isMouseTriggered = isMouseEvent(event);\n  const evtX = isMouseTriggered ? event.clientX : event.touches?.[0].clientX;\n  const evtY = isMouseTriggered ? event.clientY : event.touches?.[0].clientY;\n  return {\n    x: evtX - (bounds?.left ?? 0),\n    y: evtY - (bounds?.top ?? 0)\n  };\n};\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\nconst BaseEdge = ({\n  id,\n  path,\n  labelX,\n  labelY,\n  label,\n  labelStyle,\n  labelShowBg,\n  labelBgStyle,\n  labelBgPadding,\n  labelBgBorderRadius,\n  style,\n  markerEnd,\n  markerStart,\n  interactionWidth = 20\n}) => {\n  return React.createElement(React.Fragment, null, React.createElement(\"path\", {\n    id: id,\n    style: style,\n    d: path,\n    fill: \"none\",\n    className: \"react-flow__edge-path\",\n    markerEnd: markerEnd,\n    markerStart: markerStart\n  }), interactionWidth && React.createElement(\"path\", {\n    d: path,\n    fill: \"none\",\n    strokeOpacity: 0,\n    strokeWidth: interactionWidth,\n    className: \"react-flow__edge-interaction\"\n  }), label && isNumeric(labelX) && isNumeric(labelY) ? React.createElement(EdgeText$1, {\n    x: labelX,\n    y: labelY,\n    label: label,\n    labelStyle: labelStyle,\n    labelShowBg: labelShowBg,\n    labelBgStyle: labelBgStyle,\n    labelBgPadding: labelBgPadding,\n    labelBgBorderRadius: labelBgBorderRadius\n  }) : null);\n};\nBaseEdge.displayName = 'BaseEdge';\nconst getMarkerEnd = (markerType, markerEndId) => {\n  if (typeof markerEndId !== 'undefined' && markerEndId) {\n    return `url(#${markerEndId})`;\n  }\n  return typeof markerType !== 'undefined' ? `url(#react-flow__${markerType})` : 'none';\n};\nfunction getMouseHandler$1(id, getState, handler) {\n  return handler === undefined ? handler : event => {\n    const edge = getState().edges.find(e => e.id === id);\n    if (edge) {\n      handler(event, {\n        ...edge\n      });\n    }\n  };\n}\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY\n}) {\n  const xOffset = Math.abs(targetX - sourceX) / 2;\n  const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n  const yOffset = Math.abs(targetY - sourceY) / 2;\n  const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n  return [centerX, centerY, xOffset, yOffset];\n}\nfunction getBezierEdgeCenter({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourceControlX,\n  sourceControlY,\n  targetControlX,\n  targetControlY\n}) {\n  // cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n  // https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n  const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n  const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n  const offsetX = Math.abs(centerX - sourceX);\n  const offsetY = Math.abs(centerY - sourceY);\n  return [centerX, centerY, offsetX, offsetY];\n}\nvar ConnectionMode;\n(function (ConnectionMode) {\n  ConnectionMode[\"Strict\"] = \"strict\";\n  ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n  PanOnScrollMode[\"Free\"] = \"free\";\n  PanOnScrollMode[\"Vertical\"] = \"vertical\";\n  PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function (SelectionMode) {\n  SelectionMode[\"Partial\"] = \"partial\";\n  SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n  ConnectionLineType[\"Bezier\"] = \"default\";\n  ConnectionLineType[\"Straight\"] = \"straight\";\n  ConnectionLineType[\"Step\"] = \"step\";\n  ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n  ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\nvar MarkerType;\n(function (MarkerType) {\n  MarkerType[\"Arrow\"] = \"arrow\";\n  MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\nvar Position;\n(function (Position) {\n  Position[\"Left\"] = \"left\";\n  Position[\"Top\"] = \"top\";\n  Position[\"Right\"] = \"right\";\n  Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\nfunction getControl({\n  pos,\n  x1,\n  y1,\n  x2,\n  y2\n}) {\n  if (pos === Position.Left || pos === Position.Right) {\n    return [0.5 * (x1 + x2), y1];\n  }\n  return [x1, 0.5 * (y1 + y2)];\n}\nfunction getSimpleBezierPath({\n  sourceX,\n  sourceY,\n  sourcePosition = Position.Bottom,\n  targetX,\n  targetY,\n  targetPosition = Position.Top\n}) {\n  const [sourceControlX, sourceControlY] = getControl({\n    pos: sourcePosition,\n    x1: sourceX,\n    y1: sourceY,\n    x2: targetX,\n    y2: targetY\n  });\n  const [targetControlX, targetControlY] = getControl({\n    pos: targetPosition,\n    x1: targetX,\n    y1: targetY,\n    x2: sourceX,\n    y2: sourceY\n  });\n  const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourceControlX,\n    sourceControlY,\n    targetControlX,\n    targetControlY\n  });\n  return [`M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\nconst SimpleBezierEdge = memo(({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition = Position.Bottom,\n  targetPosition = Position.Top,\n  label,\n  labelStyle,\n  labelShowBg,\n  labelBgStyle,\n  labelBgPadding,\n  labelBgBorderRadius,\n  style,\n  markerEnd,\n  markerStart,\n  interactionWidth\n}) => {\n  const [path, labelX, labelY] = getSimpleBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition\n  });\n  return React.createElement(BaseEdge, {\n    path: path,\n    labelX: labelX,\n    labelY: labelY,\n    label: label,\n    labelStyle: labelStyle,\n    labelShowBg: labelShowBg,\n    labelBgStyle: labelBgStyle,\n    labelBgPadding: labelBgPadding,\n    labelBgBorderRadius: labelBgBorderRadius,\n    style: style,\n    markerEnd: markerEnd,\n    markerStart: markerStart,\n    interactionWidth: interactionWidth\n  });\n});\nSimpleBezierEdge.displayName = 'SimpleBezierEdge';\nconst handleDirections = {\n  [Position.Left]: {\n    x: -1,\n    y: 0\n  },\n  [Position.Right]: {\n    x: 1,\n    y: 0\n  },\n  [Position.Top]: {\n    x: 0,\n    y: -1\n  },\n  [Position.Bottom]: {\n    x: 0,\n    y: 1\n  }\n};\nconst getDirection = ({\n  source,\n  sourcePosition = Position.Bottom,\n  target\n}) => {\n  if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n    return source.x < target.x ? {\n      x: 1,\n      y: 0\n    } : {\n      x: -1,\n      y: 0\n    };\n  }\n  return source.y < target.y ? {\n    x: 0,\n    y: 1\n  } : {\n    x: 0,\n    y: -1\n  };\n};\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n// ith this function we try to mimic a orthogonal edge routing behaviour\n// It's not as good as a real orthogonal edge routing but it's faster and good enough as a default for step and smooth step edges\nfunction getPoints({\n  source,\n  sourcePosition = Position.Bottom,\n  target,\n  targetPosition = Position.Top,\n  center,\n  offset\n}) {\n  const sourceDir = handleDirections[sourcePosition];\n  const targetDir = handleDirections[targetPosition];\n  const sourceGapped = {\n    x: source.x + sourceDir.x * offset,\n    y: source.y + sourceDir.y * offset\n  };\n  const targetGapped = {\n    x: target.x + targetDir.x * offset,\n    y: target.y + targetDir.y * offset\n  };\n  const dir = getDirection({\n    source: sourceGapped,\n    sourcePosition,\n    target: targetGapped\n  });\n  const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n  const currDir = dir[dirAccessor];\n  let points = [];\n  let centerX, centerY;\n  const sourceGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const targetGapOffset = {\n    x: 0,\n    y: 0\n  };\n  const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n    sourceX: source.x,\n    sourceY: source.y,\n    targetX: target.x,\n    targetY: target.y\n  });\n  // opposite handle positions, default case\n  if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n    centerX = center.x ?? defaultCenterX;\n    centerY = center.y ?? defaultCenterY;\n    //    --->\n    //    |\n    // >---\n    const verticalSplit = [{\n      x: centerX,\n      y: sourceGapped.y\n    }, {\n      x: centerX,\n      y: targetGapped.y\n    }];\n    //    |\n    //  ---\n    //  |\n    const horizontalSplit = [{\n      x: sourceGapped.x,\n      y: centerY\n    }, {\n      x: targetGapped.x,\n      y: centerY\n    }];\n    if (sourceDir[dirAccessor] === currDir) {\n      points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n    } else {\n      points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n    }\n  } else {\n    // sourceTarget means we take x from source and y from target, targetSource is the opposite\n    const sourceTarget = [{\n      x: sourceGapped.x,\n      y: targetGapped.y\n    }];\n    const targetSource = [{\n      x: targetGapped.x,\n      y: sourceGapped.y\n    }];\n    // this handles edges with same handle positions\n    if (dirAccessor === 'x') {\n      points = sourceDir.x === currDir ? targetSource : sourceTarget;\n    } else {\n      points = sourceDir.y === currDir ? sourceTarget : targetSource;\n    }\n    if (sourcePosition === targetPosition) {\n      const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n      // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n      if (diff <= offset) {\n        const gapOffset = Math.min(offset - 1, offset - diff);\n        if (sourceDir[dirAccessor] === currDir) {\n          sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n        } else {\n          targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n        }\n      }\n    }\n    // these are conditions for handling mixed handle positions like Right -> Bottom for example\n    if (sourcePosition !== targetPosition) {\n      const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n      const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n      const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n      const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n      const flipSourceTarget = sourceDir[dirAccessor] === 1 && (!isSameDir && sourceGtTargetOppo || isSameDir && sourceLtTargetOppo) || sourceDir[dirAccessor] !== 1 && (!isSameDir && sourceLtTargetOppo || isSameDir && sourceGtTargetOppo);\n      if (flipSourceTarget) {\n        points = dirAccessor === 'x' ? sourceTarget : targetSource;\n      }\n    }\n    const sourceGapPoint = {\n      x: sourceGapped.x + sourceGapOffset.x,\n      y: sourceGapped.y + sourceGapOffset.y\n    };\n    const targetGapPoint = {\n      x: targetGapped.x + targetGapOffset.x,\n      y: targetGapped.y + targetGapOffset.y\n    };\n    const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n    const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n    // we want to place the label on the longest segment of the edge\n    if (maxXDistance >= maxYDistance) {\n      centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n      centerY = points[0].y;\n    } else {\n      centerX = points[0].x;\n      centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n    }\n  }\n  const pathPoints = [source, {\n    x: sourceGapped.x + sourceGapOffset.x,\n    y: sourceGapped.y + sourceGapOffset.y\n  }, ...points, {\n    x: targetGapped.x + targetGapOffset.x,\n    y: targetGapped.y + targetGapOffset.y\n  }, target];\n  return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\n}\nfunction getBend(a, b, c, size) {\n  const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n  const {\n    x,\n    y\n  } = b;\n  // no bend\n  if (a.x === x && x === c.x || a.y === y && y === c.y) {\n    return `L${x} ${y}`;\n  }\n  // first segment is horizontal\n  if (a.y === y) {\n    const xDir = a.x < c.x ? -1 : 1;\n    const yDir = a.y < c.y ? 1 : -1;\n    return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n  }\n  const xDir = a.x < c.x ? 1 : -1;\n  const yDir = a.y < c.y ? -1 : 1;\n  return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\nfunction getSmoothStepPath({\n  sourceX,\n  sourceY,\n  sourcePosition = Position.Bottom,\n  targetX,\n  targetY,\n  targetPosition = Position.Top,\n  borderRadius = 5,\n  centerX,\n  centerY,\n  offset = 20\n}) {\n  const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n    source: {\n      x: sourceX,\n      y: sourceY\n    },\n    sourcePosition,\n    target: {\n      x: targetX,\n      y: targetY\n    },\n    targetPosition,\n    center: {\n      x: centerX,\n      y: centerY\n    },\n    offset\n  });\n  const path = points.reduce((res, p, i) => {\n    let segment = '';\n    if (i > 0 && i < points.length - 1) {\n      segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n    } else {\n      segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n    }\n    res += segment;\n    return res;\n  }, '');\n  return [path, labelX, labelY, offsetX, offsetY];\n}\nconst SmoothStepEdge = memo(({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  label,\n  labelStyle,\n  labelShowBg,\n  labelBgStyle,\n  labelBgPadding,\n  labelBgBorderRadius,\n  style,\n  sourcePosition = Position.Bottom,\n  targetPosition = Position.Top,\n  markerEnd,\n  markerStart,\n  pathOptions,\n  interactionWidth\n}) => {\n  const [path, labelX, labelY] = getSmoothStepPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n    borderRadius: pathOptions?.borderRadius,\n    offset: pathOptions?.offset\n  });\n  return React.createElement(BaseEdge, {\n    path: path,\n    labelX: labelX,\n    labelY: labelY,\n    label: label,\n    labelStyle: labelStyle,\n    labelShowBg: labelShowBg,\n    labelBgStyle: labelBgStyle,\n    labelBgPadding: labelBgPadding,\n    labelBgBorderRadius: labelBgBorderRadius,\n    style: style,\n    markerEnd: markerEnd,\n    markerStart: markerStart,\n    interactionWidth: interactionWidth\n  });\n});\nSmoothStepEdge.displayName = 'SmoothStepEdge';\nconst StepEdge = memo(props => React.createElement(SmoothStepEdge, {\n  ...props,\n  pathOptions: useMemo(() => ({\n    borderRadius: 0,\n    offset: props.pathOptions?.offset\n  }), [props.pathOptions?.offset])\n}));\nStepEdge.displayName = 'StepEdge';\nfunction getStraightPath({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY\n}) {\n  const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  });\n  return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\nconst StraightEdge = memo(({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  label,\n  labelStyle,\n  labelShowBg,\n  labelBgStyle,\n  labelBgPadding,\n  labelBgBorderRadius,\n  style,\n  markerEnd,\n  markerStart,\n  interactionWidth\n}) => {\n  const [path, labelX, labelY] = getStraightPath({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY\n  });\n  return React.createElement(BaseEdge, {\n    path: path,\n    labelX: labelX,\n    labelY: labelY,\n    label: label,\n    labelStyle: labelStyle,\n    labelShowBg: labelShowBg,\n    labelBgStyle: labelBgStyle,\n    labelBgPadding: labelBgPadding,\n    labelBgBorderRadius: labelBgBorderRadius,\n    style: style,\n    markerEnd: markerEnd,\n    markerStart: markerStart,\n    interactionWidth: interactionWidth\n  });\n});\nStraightEdge.displayName = 'StraightEdge';\nfunction calculateControlOffset(distance, curvature) {\n  if (distance >= 0) {\n    return 0.5 * distance;\n  }\n  return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature({\n  pos,\n  x1,\n  y1,\n  x2,\n  y2,\n  c\n}) {\n  switch (pos) {\n    case Position.Left:\n      return [x1 - calculateControlOffset(x1 - x2, c), y1];\n    case Position.Right:\n      return [x1 + calculateControlOffset(x2 - x1, c), y1];\n    case Position.Top:\n      return [x1, y1 - calculateControlOffset(y1 - y2, c)];\n    case Position.Bottom:\n      return [x1, y1 + calculateControlOffset(y2 - y1, c)];\n  }\n}\nfunction getBezierPath({\n  sourceX,\n  sourceY,\n  sourcePosition = Position.Bottom,\n  targetX,\n  targetY,\n  targetPosition = Position.Top,\n  curvature = 0.25\n}) {\n  const [sourceControlX, sourceControlY] = getControlWithCurvature({\n    pos: sourcePosition,\n    x1: sourceX,\n    y1: sourceY,\n    x2: targetX,\n    y2: targetY,\n    c: curvature\n  });\n  const [targetControlX, targetControlY] = getControlWithCurvature({\n    pos: targetPosition,\n    x1: targetX,\n    y1: targetY,\n    x2: sourceX,\n    y2: sourceY,\n    c: curvature\n  });\n  const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourceControlX,\n    sourceControlY,\n    targetControlX,\n    targetControlY\n  });\n  return [`M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\nconst BezierEdge = memo(({\n  sourceX,\n  sourceY,\n  targetX,\n  targetY,\n  sourcePosition = Position.Bottom,\n  targetPosition = Position.Top,\n  label,\n  labelStyle,\n  labelShowBg,\n  labelBgStyle,\n  labelBgPadding,\n  labelBgBorderRadius,\n  style,\n  markerEnd,\n  markerStart,\n  pathOptions,\n  interactionWidth\n}) => {\n  const [path, labelX, labelY] = getBezierPath({\n    sourceX,\n    sourceY,\n    sourcePosition,\n    targetX,\n    targetY,\n    targetPosition,\n    curvature: pathOptions?.curvature\n  });\n  return React.createElement(BaseEdge, {\n    path: path,\n    labelX: labelX,\n    labelY: labelY,\n    label: label,\n    labelStyle: labelStyle,\n    labelShowBg: labelShowBg,\n    labelBgStyle: labelBgStyle,\n    labelBgPadding: labelBgPadding,\n    labelBgBorderRadius: labelBgBorderRadius,\n    style: style,\n    markerEnd: markerEnd,\n    markerStart: markerStart,\n    interactionWidth: interactionWidth\n  });\n});\nBezierEdge.displayName = 'BezierEdge';\nconst NodeIdContext = createContext(null);\nconst Provider = NodeIdContext.Provider;\nNodeIdContext.Consumer;\nconst useNodeId = () => {\n  const nodeId = useContext(NodeIdContext);\n  return nodeId;\n};\nconst isEdge = element => 'id' in element && 'source' in element && 'target' in element;\nconst isNode = element => 'id' in element && !('source' in element) && !('target' in element);\nconst getOutgoers = (node, nodes, edges) => {\n  if (!isNode(node)) {\n    return [];\n  }\n  const outgoerIds = edges.filter(e => e.source === node.id).map(e => e.target);\n  return nodes.filter(n => outgoerIds.includes(n.id));\n};\nconst getIncomers = (node, nodes, edges) => {\n  if (!isNode(node)) {\n    return [];\n  }\n  const incomersIds = edges.filter(e => e.target === node.id).map(e => e.source);\n  return nodes.filter(n => incomersIds.includes(n.id));\n};\nconst getEdgeId = ({\n  source,\n  sourceHandle,\n  target,\n  targetHandle\n}) => `reactflow__edge-${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\nconst getMarkerId = (marker, rfId) => {\n  if (typeof marker === 'undefined') {\n    return '';\n  }\n  if (typeof marker === 'string') {\n    return marker;\n  }\n  const idPrefix = rfId ? `${rfId}__` : '';\n  return `${idPrefix}${Object.keys(marker).sort().map(key => `${key}=${marker[key]}`).join('&')}`;\n};\nconst connectionExists = (edge, edges) => {\n  return edges.some(el => el.source === edge.source && el.target === edge.target && (el.sourceHandle === edge.sourceHandle || !el.sourceHandle && !edge.sourceHandle) && (el.targetHandle === edge.targetHandle || !el.targetHandle && !edge.targetHandle));\n};\nconst addEdge = (edgeParams, edges) => {\n  if (!edgeParams.source || !edgeParams.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  let edge;\n  if (isEdge(edgeParams)) {\n    edge = {\n      ...edgeParams\n    };\n  } else {\n    edge = {\n      ...edgeParams,\n      id: getEdgeId(edgeParams)\n    };\n  }\n  if (connectionExists(edge, edges)) {\n    return edges;\n  }\n  return edges.concat(edge);\n};\nconst updateEdge = (oldEdge, newConnection, edges, options = {\n  shouldReplaceId: true\n}) => {\n  const {\n    id: oldEdgeId,\n    ...rest\n  } = oldEdge;\n  if (!newConnection.source || !newConnection.target) {\n    devWarn('006', errorMessages['error006']());\n    return edges;\n  }\n  const foundEdge = edges.find(e => e.id === oldEdgeId);\n  if (!foundEdge) {\n    devWarn('007', errorMessages['error007'](oldEdgeId));\n    return edges;\n  }\n  // Remove old edge and create the new edge with parameters of old edge.\n  const edge = {\n    ...rest,\n    id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n    source: newConnection.source,\n    target: newConnection.target,\n    sourceHandle: newConnection.sourceHandle,\n    targetHandle: newConnection.targetHandle\n  };\n  return edges.filter(e => e.id !== oldEdgeId).concat(edge);\n};\nconst pointToRendererPoint = ({\n  x,\n  y\n}, [tx, ty, tScale], snapToGrid, [snapX, snapY]) => {\n  const position = {\n    x: (x - tx) / tScale,\n    y: (y - ty) / tScale\n  };\n  if (snapToGrid) {\n    return {\n      x: snapX * Math.round(position.x / snapX),\n      y: snapY * Math.round(position.y / snapY)\n    };\n  }\n  return position;\n};\nconst rendererPointToPoint = ({\n  x,\n  y\n}, [tx, ty, tScale]) => {\n  return {\n    x: x * tScale + tx,\n    y: y * tScale + ty\n  };\n};\nconst getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {\n  if (!node) {\n    return {\n      x: 0,\n      y: 0,\n      positionAbsolute: {\n        x: 0,\n        y: 0\n      }\n    };\n  }\n  const offsetX = (node.width ?? 0) * nodeOrigin[0];\n  const offsetY = (node.height ?? 0) * nodeOrigin[1];\n  const position = {\n    x: node.position.x - offsetX,\n    y: node.position.y - offsetY\n  };\n  return {\n    ...position,\n    positionAbsolute: node.positionAbsolute ? {\n      x: node.positionAbsolute.x - offsetX,\n      y: node.positionAbsolute.y - offsetY\n    } : position\n  };\n};\nconst getNodesBounds = (nodes, nodeOrigin = [0, 0]) => {\n  if (nodes.length === 0) {\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0\n    };\n  }\n  const box = nodes.reduce((currBox, node) => {\n    const {\n      x,\n      y\n    } = getNodePositionWithOrigin(node, nodeOrigin).positionAbsolute;\n    return getBoundsOfBoxes(currBox, rectToBox({\n      x,\n      y,\n      width: node.width || 0,\n      height: node.height || 0\n    }));\n  }, {\n    x: Infinity,\n    y: Infinity,\n    x2: -Infinity,\n    y2: -Infinity\n  });\n  return boxToRect(box);\n};\n// @deprecated Use `getNodesBounds`.\nconst getRectOfNodes = (nodes, nodeOrigin = [0, 0]) => {\n  console.warn('[DEPRECATED] `getRectOfNodes` is deprecated. Instead use `getNodesBounds` https://reactflow.dev/api-reference/utils/get-nodes-bounds.');\n  return getNodesBounds(nodes, nodeOrigin);\n};\nconst getNodesInside = (nodeInternals, rect, [tx, ty, tScale] = [0, 0, 1], partially = false,\n// set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\nexcludeNonSelectableNodes = false, nodeOrigin = [0, 0]) => {\n  const paneRect = {\n    x: (rect.x - tx) / tScale,\n    y: (rect.y - ty) / tScale,\n    width: rect.width / tScale,\n    height: rect.height / tScale\n  };\n  const visibleNodes = [];\n  nodeInternals.forEach(node => {\n    const {\n      width,\n      height,\n      selectable = true,\n      hidden = false\n    } = node;\n    if (excludeNonSelectableNodes && !selectable || hidden) {\n      return false;\n    }\n    const {\n      positionAbsolute\n    } = getNodePositionWithOrigin(node, nodeOrigin);\n    const nodeRect = {\n      x: positionAbsolute.x,\n      y: positionAbsolute.y,\n      width: width || 0,\n      height: height || 0\n    };\n    const overlappingArea = getOverlappingArea(paneRect, nodeRect);\n    const notInitialized = typeof width === 'undefined' || typeof height === 'undefined' || width === null || height === null;\n    const partiallyVisible = partially && overlappingArea > 0;\n    const area = (width || 0) * (height || 0);\n    const isVisible = notInitialized || partiallyVisible || overlappingArea >= area;\n    if (isVisible || node.dragging) {\n      visibleNodes.push(node);\n    }\n  });\n  return visibleNodes;\n};\nconst getConnectedEdges = (nodes, edges) => {\n  const nodeIds = nodes.map(node => node.id);\n  return edges.filter(edge => nodeIds.includes(edge.source) || nodeIds.includes(edge.target));\n};\n// @deprecated Use `getViewportForBounds`.\nconst getTransformForBounds = (bounds, width, height, minZoom, maxZoom, padding = 0.1) => {\n  const {\n    x,\n    y,\n    zoom\n  } = getViewportForBounds(bounds, width, height, minZoom, maxZoom, padding);\n  console.warn('[DEPRECATED] `getTransformForBounds` is deprecated. Instead use `getViewportForBounds`. Beware that the return value is type Viewport (`{ x: number, y: number, zoom: number }`) instead of Transform (`[number, number, number]`). https://reactflow.dev/api-reference/utils/get-viewport-for-bounds');\n  return [x, y, zoom];\n};\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding = 0.1) => {\n  const xZoom = width / (bounds.width * (1 + padding));\n  const yZoom = height / (bounds.height * (1 + padding));\n  const zoom = Math.min(xZoom, yZoom);\n  const clampedZoom = clamp(zoom, minZoom, maxZoom);\n  const boundsCenterX = bounds.x + bounds.width / 2;\n  const boundsCenterY = bounds.y + bounds.height / 2;\n  const x = width / 2 - boundsCenterX * clampedZoom;\n  const y = height / 2 - boundsCenterY * clampedZoom;\n  return {\n    x,\n    y,\n    zoom: clampedZoom\n  };\n};\nconst getD3Transition = (selection, duration = 0) => {\n  return selection.transition().duration(duration);\n};\n\n// this functions collects all handles and adds an absolute position\n// so that we can later find the closest handle to the mouse position\nfunction getHandles(node, handleBounds, type, currentHandle) {\n  return (handleBounds[type] || []).reduce((res, h) => {\n    if (`${node.id}-${h.id}-${type}` !== currentHandle) {\n      res.push({\n        id: h.id || null,\n        type,\n        nodeId: node.id,\n        x: (node.positionAbsolute?.x ?? 0) + h.x + h.width / 2,\n        y: (node.positionAbsolute?.y ?? 0) + h.y + h.height / 2\n      });\n    }\n    return res;\n  }, []);\n}\nfunction getClosestHandle(event, doc, pos, connectionRadius, handles, validator) {\n  // we always want to prioritize the handle below the mouse cursor over the closest distance handle,\n  // because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const domNodes = doc.elementsFromPoint(x, y);\n  const handleBelow = domNodes.find(el => el.classList.contains('react-flow__handle'));\n  if (handleBelow) {\n    const handleNodeId = handleBelow.getAttribute('data-nodeid');\n    if (handleNodeId) {\n      const handleType = getHandleType(undefined, handleBelow);\n      const handleId = handleBelow.getAttribute('data-handleid');\n      const validHandleResult = validator({\n        nodeId: handleNodeId,\n        id: handleId,\n        type: handleType\n      });\n      if (validHandleResult) {\n        const handle = handles.find(h => h.nodeId === handleNodeId && h.type === handleType && h.id === handleId);\n        return {\n          handle: {\n            id: handleId,\n            type: handleType,\n            nodeId: handleNodeId,\n            x: handle?.x || pos.x,\n            y: handle?.y || pos.y\n          },\n          validHandleResult\n        };\n      }\n    }\n  }\n  // if we couldn't find a handle below the mouse cursor we look for the closest distance based on the connectionRadius\n  let closestHandles = [];\n  let minDistance = Infinity;\n  handles.forEach(handle => {\n    const distance = Math.sqrt((handle.x - pos.x) ** 2 + (handle.y - pos.y) ** 2);\n    if (distance <= connectionRadius) {\n      const validHandleResult = validator(handle);\n      if (distance <= minDistance) {\n        if (distance < minDistance) {\n          closestHandles = [{\n            handle,\n            validHandleResult\n          }];\n        } else if (distance === minDistance) {\n          // when multiple handles are on the same distance we collect all of them\n          closestHandles.push({\n            handle,\n            validHandleResult\n          });\n        }\n        minDistance = distance;\n      }\n    }\n  });\n  if (!closestHandles.length) {\n    return {\n      handle: null,\n      validHandleResult: defaultResult()\n    };\n  }\n  if (closestHandles.length === 1) {\n    return closestHandles[0];\n  }\n  const hasValidHandle = closestHandles.some(({\n    validHandleResult\n  }) => validHandleResult.isValid);\n  const hasTargetHandle = closestHandles.some(({\n    handle\n  }) => handle.type === 'target');\n  // if multiple handles are layouted on top of each other we prefer the one with type = target and the one that is valid\n  return closestHandles.find(({\n    handle,\n    validHandleResult\n  }) => hasTargetHandle ? handle.type === 'target' : hasValidHandle ? validHandleResult.isValid : true) || closestHandles[0];\n}\nconst nullConnection = {\n  source: null,\n  target: null,\n  sourceHandle: null,\n  targetHandle: null\n};\nconst defaultResult = () => ({\n  handleDomNode: null,\n  isValid: false,\n  connection: nullConnection,\n  endHandle: null\n});\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(handle, connectionMode, fromNodeId, fromHandleId, fromType, isValidConnection, doc) {\n  const isTarget = fromType === 'target';\n  const handleToCheck = doc.querySelector(`.react-flow__handle[data-id=\"${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`);\n  const result = {\n    ...defaultResult(),\n    handleDomNode: handleToCheck\n  };\n  if (handleToCheck) {\n    const handleType = getHandleType(undefined, handleToCheck);\n    const handleNodeId = handleToCheck.getAttribute('data-nodeid');\n    const handleId = handleToCheck.getAttribute('data-handleid');\n    const connectable = handleToCheck.classList.contains('connectable');\n    const connectableEnd = handleToCheck.classList.contains('connectableend');\n    const connection = {\n      source: isTarget ? handleNodeId : fromNodeId,\n      sourceHandle: isTarget ? handleId : fromHandleId,\n      target: isTarget ? fromNodeId : handleNodeId,\n      targetHandle: isTarget ? fromHandleId : handleId\n    };\n    result.connection = connection;\n    const isConnectable = connectable && connectableEnd;\n    // in strict mode we don't allow target to target or source to source connections\n    const isValid = isConnectable && (connectionMode === ConnectionMode.Strict ? isTarget && handleType === 'source' || !isTarget && handleType === 'target' : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n    if (isValid) {\n      result.endHandle = {\n        nodeId: handleNodeId,\n        handleId,\n        type: handleType\n      };\n      result.isValid = isValidConnection(connection);\n    }\n  }\n  return result;\n}\nfunction getHandleLookup({\n  nodes,\n  nodeId,\n  handleId,\n  handleType\n}) {\n  return nodes.reduce((res, node) => {\n    if (node[internalsSymbol]) {\n      const {\n        handleBounds\n      } = node[internalsSymbol];\n      let sourceHandles = [];\n      let targetHandles = [];\n      if (handleBounds) {\n        sourceHandles = getHandles(node, handleBounds, 'source', `${nodeId}-${handleId}-${handleType}`);\n        targetHandles = getHandles(node, handleBounds, 'target', `${nodeId}-${handleId}-${handleType}`);\n      }\n      res.push(...sourceHandles, ...targetHandles);\n    }\n    return res;\n  }, []);\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n  if (edgeUpdaterType) {\n    return edgeUpdaterType;\n  } else if (handleDomNode?.classList.contains('target')) {\n    return 'target';\n  } else if (handleDomNode?.classList.contains('source')) {\n    return 'source';\n  }\n  return null;\n}\nfunction resetRecentHandle(handleDomNode) {\n  handleDomNode?.classList.remove('valid', 'connecting', 'react-flow__handle-valid', 'react-flow__handle-connecting');\n}\nfunction getConnectionStatus(isInsideConnectionRadius, isHandleValid) {\n  let connectionStatus = null;\n  if (isHandleValid) {\n    connectionStatus = 'valid';\n  } else if (isInsideConnectionRadius && !isHandleValid) {\n    connectionStatus = 'invalid';\n  }\n  return connectionStatus;\n}\nfunction handlePointerDown({\n  event,\n  handleId,\n  nodeId,\n  onConnect,\n  isTarget,\n  getState,\n  setState,\n  isValidConnection,\n  edgeUpdaterType,\n  onEdgeUpdateEnd\n}) {\n  // when react-flow is used inside a shadow root we can't use document\n  const doc = getHostForElement(event.target);\n  const {\n    connectionMode,\n    domNode,\n    autoPanOnConnect,\n    connectionRadius,\n    onConnectStart,\n    panBy,\n    getNodes,\n    cancelConnection\n  } = getState();\n  let autoPanId = 0;\n  let closestHandle;\n  const {\n    x,\n    y\n  } = getEventPosition(event);\n  const clickedHandle = doc?.elementFromPoint(x, y);\n  const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n  const containerBounds = domNode?.getBoundingClientRect();\n  if (!containerBounds || !handleType) {\n    return;\n  }\n  let prevActiveHandle;\n  let connectionPosition = getEventPosition(event, containerBounds);\n  let autoPanStarted = false;\n  let connection = null;\n  let isValid = false;\n  let handleDomNode = null;\n  const handleLookup = getHandleLookup({\n    nodes: getNodes(),\n    nodeId,\n    handleId,\n    handleType\n  });\n  // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n  const autoPan = () => {\n    if (!autoPanOnConnect) {\n      return;\n    }\n    const [xMovement, yMovement] = calcAutoPan(connectionPosition, containerBounds);\n    panBy({\n      x: xMovement,\n      y: yMovement\n    });\n    autoPanId = requestAnimationFrame(autoPan);\n  };\n  setState({\n    connectionPosition,\n    connectionStatus: null,\n    // connectionNodeId etc will be removed in the next major in favor of connectionStartHandle\n    connectionNodeId: nodeId,\n    connectionHandleId: handleId,\n    connectionHandleType: handleType,\n    connectionStartHandle: {\n      nodeId,\n      handleId,\n      type: handleType\n    },\n    connectionEndHandle: null\n  });\n  onConnectStart?.(event, {\n    nodeId,\n    handleId,\n    handleType\n  });\n  function onPointerMove(event) {\n    const {\n      transform\n    } = getState();\n    connectionPosition = getEventPosition(event, containerBounds);\n    const {\n      handle,\n      validHandleResult\n    } = getClosestHandle(event, doc, pointToRendererPoint(connectionPosition, transform, false, [1, 1]), connectionRadius, handleLookup, handle => isValidHandle(handle, connectionMode, nodeId, handleId, isTarget ? 'target' : 'source', isValidConnection, doc));\n    closestHandle = handle;\n    if (!autoPanStarted) {\n      autoPan();\n      autoPanStarted = true;\n    }\n    handleDomNode = validHandleResult.handleDomNode;\n    connection = validHandleResult.connection;\n    isValid = validHandleResult.isValid;\n    setState({\n      connectionPosition: closestHandle && isValid ? rendererPointToPoint({\n        x: closestHandle.x,\n        y: closestHandle.y\n      }, transform) : connectionPosition,\n      connectionStatus: getConnectionStatus(!!closestHandle, isValid),\n      connectionEndHandle: validHandleResult.endHandle\n    });\n    if (!closestHandle && !isValid && !handleDomNode) {\n      return resetRecentHandle(prevActiveHandle);\n    }\n    if (connection.source !== connection.target && handleDomNode) {\n      resetRecentHandle(prevActiveHandle);\n      prevActiveHandle = handleDomNode;\n      // @todo: remove the old class names \"react-flow__handle-\" in the next major version\n      handleDomNode.classList.add('connecting', 'react-flow__handle-connecting');\n      handleDomNode.classList.toggle('valid', isValid);\n      handleDomNode.classList.toggle('react-flow__handle-valid', isValid);\n    }\n  }\n  function onPointerUp(event) {\n    if ((closestHandle || handleDomNode) && connection && isValid) {\n      onConnect?.(connection);\n    }\n    // it's important to get a fresh reference from the store here\n    // in order to get the latest state of onConnectEnd\n    getState().onConnectEnd?.(event);\n    if (edgeUpdaterType) {\n      onEdgeUpdateEnd?.(event);\n    }\n    resetRecentHandle(prevActiveHandle);\n    cancelConnection();\n    cancelAnimationFrame(autoPanId);\n    autoPanStarted = false;\n    isValid = false;\n    connection = null;\n    handleDomNode = null;\n    doc.removeEventListener('mousemove', onPointerMove);\n    doc.removeEventListener('mouseup', onPointerUp);\n    doc.removeEventListener('touchmove', onPointerMove);\n    doc.removeEventListener('touchend', onPointerUp);\n  }\n  doc.addEventListener('mousemove', onPointerMove);\n  doc.addEventListener('mouseup', onPointerUp);\n  doc.addEventListener('touchmove', onPointerMove);\n  doc.addEventListener('touchend', onPointerUp);\n}\nconst alwaysValid = () => true;\nconst selector$f = s => ({\n  connectionStartHandle: s.connectionStartHandle,\n  connectOnClick: s.connectOnClick,\n  noPanClassName: s.noPanClassName\n});\nconst connectingSelector = (nodeId, handleId, type) => state => {\n  const {\n    connectionStartHandle: startHandle,\n    connectionEndHandle: endHandle,\n    connectionClickStartHandle: clickHandle\n  } = state;\n  return {\n    connecting: startHandle?.nodeId === nodeId && startHandle?.handleId === handleId && startHandle?.type === type || endHandle?.nodeId === nodeId && endHandle?.handleId === handleId && endHandle?.type === type,\n    clickConnecting: clickHandle?.nodeId === nodeId && clickHandle?.handleId === handleId && clickHandle?.type === type\n  };\n};\nconst Handle = forwardRef(({\n  type = 'source',\n  position = Position.Top,\n  isValidConnection,\n  isConnectable = true,\n  isConnectableStart = true,\n  isConnectableEnd = true,\n  id,\n  onConnect,\n  children,\n  className,\n  onMouseDown,\n  onTouchStart,\n  ...rest\n}, ref) => {\n  const handleId = id || null;\n  const isTarget = type === 'target';\n  const store = useStoreApi();\n  const nodeId = useNodeId();\n  const {\n    connectOnClick,\n    noPanClassName\n  } = useStore(selector$f, shallow);\n  const {\n    connecting,\n    clickConnecting\n  } = useStore(connectingSelector(nodeId, handleId, type), shallow);\n  if (!nodeId) {\n    store.getState().onError?.('010', errorMessages['error010']());\n  }\n  const onConnectExtended = params => {\n    const {\n      defaultEdgeOptions,\n      onConnect: onConnectAction,\n      hasDefaultEdges\n    } = store.getState();\n    const edgeParams = {\n      ...defaultEdgeOptions,\n      ...params\n    };\n    if (hasDefaultEdges) {\n      const {\n        edges,\n        setEdges\n      } = store.getState();\n      setEdges(addEdge(edgeParams, edges));\n    }\n    onConnectAction?.(edgeParams);\n    onConnect?.(edgeParams);\n  };\n  const onPointerDown = event => {\n    if (!nodeId) {\n      return;\n    }\n    const isMouseTriggered = isMouseEvent(event);\n    if (isConnectableStart && (isMouseTriggered && event.button === 0 || !isMouseTriggered)) {\n      handlePointerDown({\n        event,\n        handleId,\n        nodeId,\n        onConnect: onConnectExtended,\n        isTarget,\n        getState: store.getState,\n        setState: store.setState,\n        isValidConnection: isValidConnection || store.getState().isValidConnection || alwaysValid\n      });\n    }\n    if (isMouseTriggered) {\n      onMouseDown?.(event);\n    } else {\n      onTouchStart?.(event);\n    }\n  };\n  const onClick = event => {\n    const {\n      onClickConnectStart,\n      onClickConnectEnd,\n      connectionClickStartHandle,\n      connectionMode,\n      isValidConnection: isValidConnectionStore\n    } = store.getState();\n    if (!nodeId || !connectionClickStartHandle && !isConnectableStart) {\n      return;\n    }\n    if (!connectionClickStartHandle) {\n      onClickConnectStart?.(event, {\n        nodeId,\n        handleId,\n        handleType: type\n      });\n      store.setState({\n        connectionClickStartHandle: {\n          nodeId,\n          type,\n          handleId\n        }\n      });\n      return;\n    }\n    const doc = getHostForElement(event.target);\n    const isValidConnectionHandler = isValidConnection || isValidConnectionStore || alwaysValid;\n    const {\n      connection,\n      isValid\n    } = isValidHandle({\n      nodeId,\n      id: handleId,\n      type\n    }, connectionMode, connectionClickStartHandle.nodeId, connectionClickStartHandle.handleId || null, connectionClickStartHandle.type, isValidConnectionHandler, doc);\n    if (isValid) {\n      onConnectExtended(connection);\n    }\n    onClickConnectEnd?.(event);\n    store.setState({\n      connectionClickStartHandle: null\n    });\n  };\n  return React.createElement(\"div\", {\n    \"data-handleid\": handleId,\n    \"data-nodeid\": nodeId,\n    \"data-handlepos\": position,\n    \"data-id\": `${nodeId}-${handleId}-${type}`,\n    className: cc(['react-flow__handle', `react-flow__handle-${position}`, 'nodrag', noPanClassName, className, {\n      source: !isTarget,\n      target: isTarget,\n      connectable: isConnectable,\n      connectablestart: isConnectableStart,\n      connectableend: isConnectableEnd,\n      connecting: clickConnecting,\n      // this class is used to style the handle when the user is connecting\n      connectionindicator: isConnectable && (isConnectableStart && !connecting || isConnectableEnd && connecting)\n    }]),\n    onMouseDown: onPointerDown,\n    onTouchStart: onPointerDown,\n    onClick: connectOnClick ? onClick : undefined,\n    ref: ref,\n    ...rest\n  }, children);\n});\nHandle.displayName = 'Handle';\nvar Handle$1 = memo(Handle);\nconst DefaultNode = ({\n  data,\n  isConnectable,\n  targetPosition = Position.Top,\n  sourcePosition = Position.Bottom\n}) => {\n  return React.createElement(React.Fragment, null, React.createElement(Handle$1, {\n    type: \"target\",\n    position: targetPosition,\n    isConnectable: isConnectable\n  }), data?.label, React.createElement(Handle$1, {\n    type: \"source\",\n    position: sourcePosition,\n    isConnectable: isConnectable\n  }));\n};\nDefaultNode.displayName = 'DefaultNode';\nvar DefaultNode$1 = memo(DefaultNode);\nconst InputNode = ({\n  data,\n  isConnectable,\n  sourcePosition = Position.Bottom\n}) => React.createElement(React.Fragment, null, data?.label, React.createElement(Handle$1, {\n  type: \"source\",\n  position: sourcePosition,\n  isConnectable: isConnectable\n}));\nInputNode.displayName = 'InputNode';\nvar InputNode$1 = memo(InputNode);\nconst OutputNode = ({\n  data,\n  isConnectable,\n  targetPosition = Position.Top\n}) => React.createElement(React.Fragment, null, React.createElement(Handle$1, {\n  type: \"target\",\n  position: targetPosition,\n  isConnectable: isConnectable\n}), data?.label);\nOutputNode.displayName = 'OutputNode';\nvar OutputNode$1 = memo(OutputNode);\nconst GroupNode = () => null;\nGroupNode.displayName = 'GroupNode';\nconst selector$e = s => ({\n  selectedNodes: s.getNodes().filter(n => n.selected),\n  selectedEdges: s.edges.filter(e => e.selected).map(e => ({\n    ...e\n  }))\n});\nconst selectId = obj => obj.id;\nfunction areEqual(a, b) {\n  return shallow(a.selectedNodes.map(selectId), b.selectedNodes.map(selectId)) && shallow(a.selectedEdges.map(selectId), b.selectedEdges.map(selectId));\n}\n// This is just a helper component for calling the onSelectionChange listener.\n// @TODO: Now that we have the onNodesChange and on EdgesChange listeners, do we still need this component?\nconst SelectionListener = memo(({\n  onSelectionChange\n}) => {\n  const store = useStoreApi();\n  const {\n    selectedNodes,\n    selectedEdges\n  } = useStore(selector$e, areEqual);\n  useEffect(() => {\n    const params = {\n      nodes: selectedNodes,\n      edges: selectedEdges\n    };\n    onSelectionChange?.(params);\n    store.getState().onSelectionChange.forEach(fn => fn(params));\n  }, [selectedNodes, selectedEdges, onSelectionChange]);\n  return null;\n});\nSelectionListener.displayName = 'SelectionListener';\nconst changeSelector = s => !!s.onSelectionChange;\nfunction Wrapper$1({\n  onSelectionChange\n}) {\n  const storeHasSelectionChange = useStore(changeSelector);\n  if (onSelectionChange || storeHasSelectionChange) {\n    return React.createElement(SelectionListener, {\n      onSelectionChange: onSelectionChange\n    });\n  }\n  return null;\n}\nconst selector$d = s => ({\n  setNodes: s.setNodes,\n  setEdges: s.setEdges,\n  setDefaultNodesAndEdges: s.setDefaultNodesAndEdges,\n  setMinZoom: s.setMinZoom,\n  setMaxZoom: s.setMaxZoom,\n  setTranslateExtent: s.setTranslateExtent,\n  setNodeExtent: s.setNodeExtent,\n  reset: s.reset\n});\nfunction useStoreUpdater(value, setStoreState) {\n  useEffect(() => {\n    if (typeof value !== 'undefined') {\n      setStoreState(value);\n    }\n  }, [value]);\n}\n// updates with values in store that don't have a dedicated setter function\nfunction useDirectStoreUpdater(key, value, setState) {\n  useEffect(() => {\n    if (typeof value !== 'undefined') {\n      setState({\n        [key]: value\n      });\n    }\n  }, [value]);\n}\nconst StoreUpdater = ({\n  nodes,\n  edges,\n  defaultNodes,\n  defaultEdges,\n  onConnect,\n  onConnectStart,\n  onConnectEnd,\n  onClickConnectStart,\n  onClickConnectEnd,\n  nodesDraggable,\n  nodesConnectable,\n  nodesFocusable,\n  edgesFocusable,\n  edgesUpdatable,\n  elevateNodesOnSelect,\n  minZoom,\n  maxZoom,\n  nodeExtent,\n  onNodesChange,\n  onEdgesChange,\n  elementsSelectable,\n  connectionMode,\n  snapGrid,\n  snapToGrid,\n  translateExtent,\n  connectOnClick,\n  defaultEdgeOptions,\n  fitView,\n  fitViewOptions,\n  onNodesDelete,\n  onEdgesDelete,\n  onNodeDrag,\n  onNodeDragStart,\n  onNodeDragStop,\n  onSelectionDrag,\n  onSelectionDragStart,\n  onSelectionDragStop,\n  noPanClassName,\n  nodeOrigin,\n  rfId,\n  autoPanOnConnect,\n  autoPanOnNodeDrag,\n  onError,\n  connectionRadius,\n  isValidConnection,\n  nodeDragThreshold\n}) => {\n  const {\n    setNodes,\n    setEdges,\n    setDefaultNodesAndEdges,\n    setMinZoom,\n    setMaxZoom,\n    setTranslateExtent,\n    setNodeExtent,\n    reset\n  } = useStore(selector$d, shallow);\n  const store = useStoreApi();\n  useEffect(() => {\n    const edgesWithDefaults = defaultEdges?.map(e => ({\n      ...e,\n      ...defaultEdgeOptions\n    }));\n    setDefaultNodesAndEdges(defaultNodes, edgesWithDefaults);\n    return () => {\n      reset();\n    };\n  }, []);\n  useDirectStoreUpdater('defaultEdgeOptions', defaultEdgeOptions, store.setState);\n  useDirectStoreUpdater('connectionMode', connectionMode, store.setState);\n  useDirectStoreUpdater('onConnect', onConnect, store.setState);\n  useDirectStoreUpdater('onConnectStart', onConnectStart, store.setState);\n  useDirectStoreUpdater('onConnectEnd', onConnectEnd, store.setState);\n  useDirectStoreUpdater('onClickConnectStart', onClickConnectStart, store.setState);\n  useDirectStoreUpdater('onClickConnectEnd', onClickConnectEnd, store.setState);\n  useDirectStoreUpdater('nodesDraggable', nodesDraggable, store.setState);\n  useDirectStoreUpdater('nodesConnectable', nodesConnectable, store.setState);\n  useDirectStoreUpdater('nodesFocusable', nodesFocusable, store.setState);\n  useDirectStoreUpdater('edgesFocusable', edgesFocusable, store.setState);\n  useDirectStoreUpdater('edgesUpdatable', edgesUpdatable, store.setState);\n  useDirectStoreUpdater('elementsSelectable', elementsSelectable, store.setState);\n  useDirectStoreUpdater('elevateNodesOnSelect', elevateNodesOnSelect, store.setState);\n  useDirectStoreUpdater('snapToGrid', snapToGrid, store.setState);\n  useDirectStoreUpdater('snapGrid', snapGrid, store.setState);\n  useDirectStoreUpdater('onNodesChange', onNodesChange, store.setState);\n  useDirectStoreUpdater('onEdgesChange', onEdgesChange, store.setState);\n  useDirectStoreUpdater('connectOnClick', connectOnClick, store.setState);\n  useDirectStoreUpdater('fitViewOnInit', fitView, store.setState);\n  useDirectStoreUpdater('fitViewOnInitOptions', fitViewOptions, store.setState);\n  useDirectStoreUpdater('onNodesDelete', onNodesDelete, store.setState);\n  useDirectStoreUpdater('onEdgesDelete', onEdgesDelete, store.setState);\n  useDirectStoreUpdater('onNodeDrag', onNodeDrag, store.setState);\n  useDirectStoreUpdater('onNodeDragStart', onNodeDragStart, store.setState);\n  useDirectStoreUpdater('onNodeDragStop', onNodeDragStop, store.setState);\n  useDirectStoreUpdater('onSelectionDrag', onSelectionDrag, store.setState);\n  useDirectStoreUpdater('onSelectionDragStart', onSelectionDragStart, store.setState);\n  useDirectStoreUpdater('onSelectionDragStop', onSelectionDragStop, store.setState);\n  useDirectStoreUpdater('noPanClassName', noPanClassName, store.setState);\n  useDirectStoreUpdater('nodeOrigin', nodeOrigin, store.setState);\n  useDirectStoreUpdater('rfId', rfId, store.setState);\n  useDirectStoreUpdater('autoPanOnConnect', autoPanOnConnect, store.setState);\n  useDirectStoreUpdater('autoPanOnNodeDrag', autoPanOnNodeDrag, store.setState);\n  useDirectStoreUpdater('onError', onError, store.setState);\n  useDirectStoreUpdater('connectionRadius', connectionRadius, store.setState);\n  useDirectStoreUpdater('isValidConnection', isValidConnection, store.setState);\n  useDirectStoreUpdater('nodeDragThreshold', nodeDragThreshold, store.setState);\n  useStoreUpdater(nodes, setNodes);\n  useStoreUpdater(edges, setEdges);\n  useStoreUpdater(minZoom, setMinZoom);\n  useStoreUpdater(maxZoom, setMaxZoom);\n  useStoreUpdater(translateExtent, setTranslateExtent);\n  useStoreUpdater(nodeExtent, setNodeExtent);\n  return null;\n};\nconst style = {\n  display: 'none'\n};\nconst ariaLiveStyle = {\n  position: 'absolute',\n  width: 1,\n  height: 1,\n  margin: -1,\n  border: 0,\n  padding: 0,\n  overflow: 'hidden',\n  clip: 'rect(0px, 0px, 0px, 0px)',\n  clipPath: 'inset(100%)'\n};\nconst ARIA_NODE_DESC_KEY = 'react-flow__node-desc';\nconst ARIA_EDGE_DESC_KEY = 'react-flow__edge-desc';\nconst ARIA_LIVE_MESSAGE = 'react-flow__aria-live';\nconst selector$c = s => s.ariaLiveMessage;\nfunction AriaLiveMessage({\n  rfId\n}) {\n  const ariaLiveMessage = useStore(selector$c);\n  return React.createElement(\"div\", {\n    id: `${ARIA_LIVE_MESSAGE}-${rfId}`,\n    \"aria-live\": \"assertive\",\n    \"aria-atomic\": \"true\",\n    style: ariaLiveStyle\n  }, ariaLiveMessage);\n}\nfunction A11yDescriptions({\n  rfId,\n  disableKeyboardA11y\n}) {\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    id: `${ARIA_NODE_DESC_KEY}-${rfId}`,\n    style: style\n  }, \"Press enter or space to select a node.\", !disableKeyboardA11y && 'You can then use the arrow keys to move the node around.', \" Press delete to remove it and escape to cancel.\", ' '), React.createElement(\"div\", {\n    id: `${ARIA_EDGE_DESC_KEY}-${rfId}`,\n    style: style\n  }, \"Press enter or space to select an edge. You can then press delete to remove it or escape to cancel.\"), !disableKeyboardA11y && React.createElement(AriaLiveMessage, {\n    rfId: rfId\n  }));\n}\n\n// the keycode can be a string 'a' or an array of strings ['a', 'a+d']\n// a string means a single key 'a' or a combination when '+' is used 'a+d'\n// an array means different possibilities. Explainer: ['a', 'd+s'] here the\n// user can use the single key 'a' or the combination 'd' + 's'\nvar useKeyPress = (keyCode = null, options = {\n  actInsideInputWithModifier: true\n}) => {\n  const [keyPressed, setKeyPressed] = useState(false);\n  // we need to remember if a modifier key is pressed in order to track it\n  const modifierPressed = useRef(false);\n  // we need to remember the pressed keys in order to support combinations\n  const pressedKeys = useRef(new Set([]));\n  // keyCodes = array with single keys [['a']] or key combinations [['a', 's']]\n  // keysToWatch = array with all keys flattened ['a', 'd', 'ShiftLeft']\n  // used to check if we store event.code or event.key. When the code is in the list of keysToWatch\n  // we use the code otherwise the key. Explainer: When you press the left \"command\" key, the code is \"MetaLeft\"\n  // and the key is \"Meta\". We want users to be able to pass keys and codes so we assume that the key is meant when\n  // we can't find it in the list of keysToWatch.\n  const [keyCodes, keysToWatch] = useMemo(() => {\n    if (keyCode !== null) {\n      const keyCodeArr = Array.isArray(keyCode) ? keyCode : [keyCode];\n      const keys = keyCodeArr.filter(kc => typeof kc === 'string').map(kc => kc.split('+'));\n      const keysFlat = keys.reduce((res, item) => res.concat(...item), []);\n      return [keys, keysFlat];\n    }\n    return [[], []];\n  }, [keyCode]);\n  useEffect(() => {\n    const doc = typeof document !== 'undefined' ? document : null;\n    const target = options?.target || doc;\n    if (keyCode !== null) {\n      const downHandler = event => {\n        modifierPressed.current = event.ctrlKey || event.metaKey || event.shiftKey;\n        const preventAction = (!modifierPressed.current || modifierPressed.current && !options.actInsideInputWithModifier) && isInputDOMNode(event);\n        if (preventAction) {\n          return false;\n        }\n        const keyOrCode = useKeyOrCode(event.code, keysToWatch);\n        pressedKeys.current.add(event[keyOrCode]);\n        if (isMatchingKey(keyCodes, pressedKeys.current, false)) {\n          event.preventDefault();\n          setKeyPressed(true);\n        }\n      };\n      const upHandler = event => {\n        const preventAction = (!modifierPressed.current || modifierPressed.current && !options.actInsideInputWithModifier) && isInputDOMNode(event);\n        if (preventAction) {\n          return false;\n        }\n        const keyOrCode = useKeyOrCode(event.code, keysToWatch);\n        if (isMatchingKey(keyCodes, pressedKeys.current, true)) {\n          setKeyPressed(false);\n          pressedKeys.current.clear();\n        } else {\n          pressedKeys.current.delete(event[keyOrCode]);\n        }\n        // fix for Mac: when cmd key is pressed, keyup is not triggered for any other key, see: https://stackoverflow.com/questions/27380018/when-cmd-key-is-kept-pressed-keyup-is-not-triggered-for-any-other-key\n        if (event.key === 'Meta') {\n          pressedKeys.current.clear();\n        }\n        modifierPressed.current = false;\n      };\n      const resetHandler = () => {\n        pressedKeys.current.clear();\n        setKeyPressed(false);\n      };\n      target?.addEventListener('keydown', downHandler);\n      target?.addEventListener('keyup', upHandler);\n      window.addEventListener('blur', resetHandler);\n      return () => {\n        target?.removeEventListener('keydown', downHandler);\n        target?.removeEventListener('keyup', upHandler);\n        window.removeEventListener('blur', resetHandler);\n      };\n    }\n  }, [keyCode, setKeyPressed]);\n  return keyPressed;\n};\n// utils\nfunction isMatchingKey(keyCodes, pressedKeys, isUp) {\n  return keyCodes\n  // we only want to compare same sizes of keyCode definitions\n  // and pressed keys. When the user specified 'Meta' as a key somewhere\n  // this would also be truthy without this filter when user presses 'Meta' + 'r'\n  .filter(keys => isUp || keys.length === pressedKeys.size)\n  // since we want to support multiple possibilities only one of the\n  // combinations need to be part of the pressed keys\n  .some(keys => keys.every(k => pressedKeys.has(k)));\n}\nfunction useKeyOrCode(eventCode, keysToWatch) {\n  return keysToWatch.includes(eventCode) ? 'code' : 'key';\n}\nfunction calculateXYZPosition(node, nodeInternals, result, nodeOrigin) {\n  const parentId = node.parentNode || node.parentId;\n  if (!parentId) {\n    return result;\n  }\n  const parentNode = nodeInternals.get(parentId);\n  const parentNodePosition = getNodePositionWithOrigin(parentNode, nodeOrigin);\n  return calculateXYZPosition(parentNode, nodeInternals, {\n    x: (result.x ?? 0) + parentNodePosition.x,\n    y: (result.y ?? 0) + parentNodePosition.y,\n    z: (parentNode[internalsSymbol]?.z ?? 0) > (result.z ?? 0) ? parentNode[internalsSymbol]?.z ?? 0 : result.z ?? 0\n  }, nodeOrigin);\n}\nfunction updateAbsoluteNodePositions(nodeInternals, nodeOrigin, parentNodes) {\n  nodeInternals.forEach(node => {\n    const parentId = node.parentNode || node.parentId;\n    if (parentId && !nodeInternals.has(parentId)) {\n      throw new Error(`Parent node ${parentId} not found`);\n    }\n    if (parentId || parentNodes?.[node.id]) {\n      const {\n        x,\n        y,\n        z\n      } = calculateXYZPosition(node, nodeInternals, {\n        ...node.position,\n        z: node[internalsSymbol]?.z ?? 0\n      }, nodeOrigin);\n      node.positionAbsolute = {\n        x,\n        y\n      };\n      node[internalsSymbol].z = z;\n      if (parentNodes?.[node.id]) {\n        node[internalsSymbol].isParent = true;\n      }\n    }\n  });\n}\nfunction createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect) {\n  const nextNodeInternals = new Map();\n  const parentNodes = {};\n  const selectedNodeZ = elevateNodesOnSelect ? 1000 : 0;\n  nodes.forEach(node => {\n    const z = (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n    const currInternals = nodeInternals.get(node.id);\n    const internals = {\n      ...node,\n      positionAbsolute: {\n        x: node.position.x,\n        y: node.position.y\n      }\n    };\n    const parentId = node.parentNode || node.parentId;\n    if (parentId) {\n      parentNodes[parentId] = true;\n    }\n    const resetHandleBounds = currInternals?.type && currInternals?.type !== node.type;\n    Object.defineProperty(internals, internalsSymbol, {\n      enumerable: false,\n      value: {\n        handleBounds: resetHandleBounds ? undefined : currInternals?.[internalsSymbol]?.handleBounds,\n        z\n      }\n    });\n    nextNodeInternals.set(node.id, internals);\n  });\n  updateAbsoluteNodePositions(nextNodeInternals, nodeOrigin, parentNodes);\n  return nextNodeInternals;\n}\nfunction fitView(get, options = {}) {\n  const {\n    getNodes,\n    width,\n    height,\n    minZoom,\n    maxZoom,\n    d3Zoom,\n    d3Selection,\n    fitViewOnInitDone,\n    fitViewOnInit,\n    nodeOrigin\n  } = get();\n  const isInitialFitView = options.initial && !fitViewOnInitDone && fitViewOnInit;\n  const d3initialized = d3Zoom && d3Selection;\n  if (d3initialized && (isInitialFitView || !options.initial)) {\n    const nodes = getNodes().filter(n => {\n      const isVisible = options.includeHiddenNodes ? n.width && n.height : !n.hidden;\n      if (options.nodes?.length) {\n        return isVisible && options.nodes.some(optionNode => optionNode.id === n.id);\n      }\n      return isVisible;\n    });\n    const nodesInitialized = nodes.every(n => n.width && n.height);\n    if (nodes.length > 0 && nodesInitialized) {\n      const bounds = getNodesBounds(nodes, nodeOrigin);\n      const {\n        x,\n        y,\n        zoom\n      } = getViewportForBounds(bounds, width, height, options.minZoom ?? minZoom, options.maxZoom ?? maxZoom, options.padding ?? 0.1);\n      const nextTransform = zoomIdentity.translate(x, y).scale(zoom);\n      if (typeof options.duration === 'number' && options.duration > 0) {\n        d3Zoom.transform(getD3Transition(d3Selection, options.duration), nextTransform);\n      } else {\n        d3Zoom.transform(d3Selection, nextTransform);\n      }\n      return true;\n    }\n  }\n  return false;\n}\nfunction handleControlledNodeSelectionChange(nodeChanges, nodeInternals) {\n  nodeChanges.forEach(change => {\n    const node = nodeInternals.get(change.id);\n    if (node) {\n      nodeInternals.set(node.id, {\n        ...node,\n        [internalsSymbol]: node[internalsSymbol],\n        selected: change.selected\n      });\n    }\n  });\n  return new Map(nodeInternals);\n}\nfunction handleControlledEdgeSelectionChange(edgeChanges, edges) {\n  return edges.map(e => {\n    const change = edgeChanges.find(change => change.id === e.id);\n    if (change) {\n      e.selected = change.selected;\n    }\n    return e;\n  });\n}\nfunction updateNodesAndEdgesSelections({\n  changedNodes,\n  changedEdges,\n  get,\n  set\n}) {\n  const {\n    nodeInternals,\n    edges,\n    onNodesChange,\n    onEdgesChange,\n    hasDefaultNodes,\n    hasDefaultEdges\n  } = get();\n  if (changedNodes?.length) {\n    if (hasDefaultNodes) {\n      set({\n        nodeInternals: handleControlledNodeSelectionChange(changedNodes, nodeInternals)\n      });\n    }\n    onNodesChange?.(changedNodes);\n  }\n  if (changedEdges?.length) {\n    if (hasDefaultEdges) {\n      set({\n        edges: handleControlledEdgeSelectionChange(changedEdges, edges)\n      });\n    }\n    onEdgesChange?.(changedEdges);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => {};\nconst initialViewportHelper = {\n  zoomIn: noop,\n  zoomOut: noop,\n  zoomTo: noop,\n  getZoom: () => 1,\n  setViewport: noop,\n  getViewport: () => ({\n    x: 0,\n    y: 0,\n    zoom: 1\n  }),\n  fitView: () => false,\n  setCenter: noop,\n  fitBounds: noop,\n  project: position => position,\n  screenToFlowPosition: position => position,\n  flowToScreenPosition: position => position,\n  viewportInitialized: false\n};\nconst selector$b = s => ({\n  d3Zoom: s.d3Zoom,\n  d3Selection: s.d3Selection\n});\nconst useViewportHelper = () => {\n  const store = useStoreApi();\n  const {\n    d3Zoom,\n    d3Selection\n  } = useStore(selector$b, shallow);\n  const viewportHelperFunctions = useMemo(() => {\n    if (d3Selection && d3Zoom) {\n      return {\n        zoomIn: options => d3Zoom.scaleBy(getD3Transition(d3Selection, options?.duration), 1.2),\n        zoomOut: options => d3Zoom.scaleBy(getD3Transition(d3Selection, options?.duration), 1 / 1.2),\n        zoomTo: (zoomLevel, options) => d3Zoom.scaleTo(getD3Transition(d3Selection, options?.duration), zoomLevel),\n        getZoom: () => store.getState().transform[2],\n        setViewport: (transform, options) => {\n          const [x, y, zoom] = store.getState().transform;\n          const nextTransform = zoomIdentity.translate(transform.x ?? x, transform.y ?? y).scale(transform.zoom ?? zoom);\n          d3Zoom.transform(getD3Transition(d3Selection, options?.duration), nextTransform);\n        },\n        getViewport: () => {\n          const [x, y, zoom] = store.getState().transform;\n          return {\n            x,\n            y,\n            zoom\n          };\n        },\n        fitView: options => fitView(store.getState, options),\n        setCenter: (x, y, options) => {\n          const {\n            width,\n            height,\n            maxZoom\n          } = store.getState();\n          const nextZoom = typeof options?.zoom !== 'undefined' ? options.zoom : maxZoom;\n          const centerX = width / 2 - x * nextZoom;\n          const centerY = height / 2 - y * nextZoom;\n          const transform = zoomIdentity.translate(centerX, centerY).scale(nextZoom);\n          d3Zoom.transform(getD3Transition(d3Selection, options?.duration), transform);\n        },\n        fitBounds: (bounds, options) => {\n          const {\n            width,\n            height,\n            minZoom,\n            maxZoom\n          } = store.getState();\n          const {\n            x,\n            y,\n            zoom\n          } = getViewportForBounds(bounds, width, height, minZoom, maxZoom, options?.padding ?? 0.1);\n          const transform = zoomIdentity.translate(x, y).scale(zoom);\n          d3Zoom.transform(getD3Transition(d3Selection, options?.duration), transform);\n        },\n        // @deprecated Use `screenToFlowPosition`.\n        project: position => {\n          const {\n            transform,\n            snapToGrid,\n            snapGrid\n          } = store.getState();\n          console.warn('[DEPRECATED] `project` is deprecated. Instead use `screenToFlowPosition`. There is no need to subtract the react flow bounds anymore! https://reactflow.dev/api-reference/types/react-flow-instance#screen-to-flow-position');\n          return pointToRendererPoint(position, transform, snapToGrid, snapGrid);\n        },\n        screenToFlowPosition: position => {\n          const {\n            transform,\n            snapToGrid,\n            snapGrid,\n            domNode\n          } = store.getState();\n          if (!domNode) {\n            return position;\n          }\n          const {\n            x: domX,\n            y: domY\n          } = domNode.getBoundingClientRect();\n          const relativePosition = {\n            x: position.x - domX,\n            y: position.y - domY\n          };\n          return pointToRendererPoint(relativePosition, transform, snapToGrid, snapGrid);\n        },\n        flowToScreenPosition: position => {\n          const {\n            transform,\n            domNode\n          } = store.getState();\n          if (!domNode) {\n            return position;\n          }\n          const {\n            x: domX,\n            y: domY\n          } = domNode.getBoundingClientRect();\n          const rendererPosition = rendererPointToPoint(position, transform);\n          return {\n            x: rendererPosition.x + domX,\n            y: rendererPosition.y + domY\n          };\n        },\n        viewportInitialized: true\n      };\n    }\n    return initialViewportHelper;\n  }, [d3Zoom, d3Selection]);\n  return viewportHelperFunctions;\n};\n\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nfunction useReactFlow() {\n  const viewportHelper = useViewportHelper();\n  const store = useStoreApi();\n  const getNodes = useCallback(() => {\n    return store.getState().getNodes().map(n => ({\n      ...n\n    }));\n  }, []);\n  const getNode = useCallback(id => {\n    return store.getState().nodeInternals.get(id);\n  }, []);\n  const getEdges = useCallback(() => {\n    const {\n      edges = []\n    } = store.getState();\n    return edges.map(e => ({\n      ...e\n    }));\n  }, []);\n  const getEdge = useCallback(id => {\n    const {\n      edges = []\n    } = store.getState();\n    return edges.find(e => e.id === id);\n  }, []);\n  const setNodes = useCallback(payload => {\n    const {\n      getNodes,\n      setNodes,\n      hasDefaultNodes,\n      onNodesChange\n    } = store.getState();\n    const nodes = getNodes();\n    const nextNodes = typeof payload === 'function' ? payload(nodes) : payload;\n    if (hasDefaultNodes) {\n      setNodes(nextNodes);\n    } else if (onNodesChange) {\n      const changes = nextNodes.length === 0 ? nodes.map(node => ({\n        type: 'remove',\n        id: node.id\n      })) : nextNodes.map(node => ({\n        item: node,\n        type: 'reset'\n      }));\n      onNodesChange(changes);\n    }\n  }, []);\n  const setEdges = useCallback(payload => {\n    const {\n      edges = [],\n      setEdges,\n      hasDefaultEdges,\n      onEdgesChange\n    } = store.getState();\n    const nextEdges = typeof payload === 'function' ? payload(edges) : payload;\n    if (hasDefaultEdges) {\n      setEdges(nextEdges);\n    } else if (onEdgesChange) {\n      const changes = nextEdges.length === 0 ? edges.map(edge => ({\n        type: 'remove',\n        id: edge.id\n      })) : nextEdges.map(edge => ({\n        item: edge,\n        type: 'reset'\n      }));\n      onEdgesChange(changes);\n    }\n  }, []);\n  const addNodes = useCallback(payload => {\n    const nodes = Array.isArray(payload) ? payload : [payload];\n    const {\n      getNodes,\n      setNodes,\n      hasDefaultNodes,\n      onNodesChange\n    } = store.getState();\n    if (hasDefaultNodes) {\n      const currentNodes = getNodes();\n      const nextNodes = [...currentNodes, ...nodes];\n      setNodes(nextNodes);\n    } else if (onNodesChange) {\n      const changes = nodes.map(node => ({\n        item: node,\n        type: 'add'\n      }));\n      onNodesChange(changes);\n    }\n  }, []);\n  const addEdges = useCallback(payload => {\n    const nextEdges = Array.isArray(payload) ? payload : [payload];\n    const {\n      edges = [],\n      setEdges,\n      hasDefaultEdges,\n      onEdgesChange\n    } = store.getState();\n    if (hasDefaultEdges) {\n      setEdges([...edges, ...nextEdges]);\n    } else if (onEdgesChange) {\n      const changes = nextEdges.map(edge => ({\n        item: edge,\n        type: 'add'\n      }));\n      onEdgesChange(changes);\n    }\n  }, []);\n  const toObject = useCallback(() => {\n    const {\n      getNodes,\n      edges = [],\n      transform\n    } = store.getState();\n    const [x, y, zoom] = transform;\n    return {\n      nodes: getNodes().map(n => ({\n        ...n\n      })),\n      edges: edges.map(e => ({\n        ...e\n      })),\n      viewport: {\n        x,\n        y,\n        zoom\n      }\n    };\n  }, []);\n  const deleteElements = useCallback(({\n    nodes: nodesDeleted,\n    edges: edgesDeleted\n  }) => {\n    const {\n      nodeInternals,\n      getNodes,\n      edges,\n      hasDefaultNodes,\n      hasDefaultEdges,\n      onNodesDelete,\n      onEdgesDelete,\n      onNodesChange,\n      onEdgesChange\n    } = store.getState();\n    const nodeIds = (nodesDeleted || []).map(node => node.id);\n    const edgeIds = (edgesDeleted || []).map(edge => edge.id);\n    const nodesToRemove = getNodes().reduce((res, node) => {\n      const parentId = node.parentNode || node.parentId;\n      const parentHit = !nodeIds.includes(node.id) && parentId && res.find(n => n.id === parentId);\n      const deletable = typeof node.deletable === 'boolean' ? node.deletable : true;\n      if (deletable && (nodeIds.includes(node.id) || parentHit)) {\n        res.push(node);\n      }\n      return res;\n    }, []);\n    const deletableEdges = edges.filter(e => typeof e.deletable === 'boolean' ? e.deletable : true);\n    const initialHitEdges = deletableEdges.filter(e => edgeIds.includes(e.id));\n    if (nodesToRemove || initialHitEdges) {\n      const connectedEdges = getConnectedEdges(nodesToRemove, deletableEdges);\n      const edgesToRemove = [...initialHitEdges, ...connectedEdges];\n      const edgeIdsToRemove = edgesToRemove.reduce((res, edge) => {\n        if (!res.includes(edge.id)) {\n          res.push(edge.id);\n        }\n        return res;\n      }, []);\n      if (hasDefaultEdges || hasDefaultNodes) {\n        if (hasDefaultEdges) {\n          store.setState({\n            edges: edges.filter(e => !edgeIdsToRemove.includes(e.id))\n          });\n        }\n        if (hasDefaultNodes) {\n          nodesToRemove.forEach(node => {\n            nodeInternals.delete(node.id);\n          });\n          store.setState({\n            nodeInternals: new Map(nodeInternals)\n          });\n        }\n      }\n      if (edgeIdsToRemove.length > 0) {\n        onEdgesDelete?.(edgesToRemove);\n        if (onEdgesChange) {\n          onEdgesChange(edgeIdsToRemove.map(id => ({\n            id,\n            type: 'remove'\n          })));\n        }\n      }\n      if (nodesToRemove.length > 0) {\n        onNodesDelete?.(nodesToRemove);\n        if (onNodesChange) {\n          const nodeChanges = nodesToRemove.map(n => ({\n            id: n.id,\n            type: 'remove'\n          }));\n          onNodesChange(nodeChanges);\n        }\n      }\n    }\n  }, []);\n  const getNodeRect = useCallback(nodeOrRect => {\n    const isRect = isRectObject(nodeOrRect);\n    const node = isRect ? null : store.getState().nodeInternals.get(nodeOrRect.id);\n    if (!isRect && !node) {\n      return [null, null, isRect];\n    }\n    const nodeRect = isRect ? nodeOrRect : nodeToRect(node);\n    return [nodeRect, node, isRect];\n  }, []);\n  const getIntersectingNodes = useCallback((nodeOrRect, partially = true, nodes) => {\n    const [nodeRect, node, isRect] = getNodeRect(nodeOrRect);\n    if (!nodeRect) {\n      return [];\n    }\n    return (nodes || store.getState().getNodes()).filter(n => {\n      if (!isRect && (n.id === node.id || !n.positionAbsolute)) {\n        return false;\n      }\n      const currNodeRect = nodeToRect(n);\n      const overlappingArea = getOverlappingArea(currNodeRect, nodeRect);\n      const partiallyVisible = partially && overlappingArea > 0;\n      return partiallyVisible || overlappingArea >= nodeRect.width * nodeRect.height;\n    });\n  }, []);\n  const isNodeIntersecting = useCallback((nodeOrRect, area, partially = true) => {\n    const [nodeRect] = getNodeRect(nodeOrRect);\n    if (!nodeRect) {\n      return false;\n    }\n    const overlappingArea = getOverlappingArea(nodeRect, area);\n    const partiallyVisible = partially && overlappingArea > 0;\n    return partiallyVisible || overlappingArea >= nodeRect.width * nodeRect.height;\n  }, []);\n  return useMemo(() => {\n    return {\n      ...viewportHelper,\n      getNodes,\n      getNode,\n      getEdges,\n      getEdge,\n      setNodes,\n      setEdges,\n      addNodes,\n      addEdges,\n      toObject,\n      deleteElements,\n      getIntersectingNodes,\n      isNodeIntersecting\n    };\n  }, [viewportHelper, getNodes, getNode, getEdges, getEdge, setNodes, setEdges, addNodes, addEdges, toObject, deleteElements, getIntersectingNodes, isNodeIntersecting]);\n}\nconst deleteKeyOptions = {\n  actInsideInputWithModifier: false\n};\nvar useGlobalKeyHandler = ({\n  deleteKeyCode,\n  multiSelectionKeyCode\n}) => {\n  const store = useStoreApi();\n  const {\n    deleteElements\n  } = useReactFlow();\n  const deleteKeyPressed = useKeyPress(deleteKeyCode, deleteKeyOptions);\n  const multiSelectionKeyPressed = useKeyPress(multiSelectionKeyCode);\n  useEffect(() => {\n    if (deleteKeyPressed) {\n      const {\n        edges,\n        getNodes\n      } = store.getState();\n      const selectedNodes = getNodes().filter(node => node.selected);\n      const selectedEdges = edges.filter(edge => edge.selected);\n      deleteElements({\n        nodes: selectedNodes,\n        edges: selectedEdges\n      });\n      store.setState({\n        nodesSelectionActive: false\n      });\n    }\n  }, [deleteKeyPressed]);\n  useEffect(() => {\n    store.setState({\n      multiSelectionActive: multiSelectionKeyPressed\n    });\n  }, [multiSelectionKeyPressed]);\n};\nfunction useResizeHandler(rendererNode) {\n  const store = useStoreApi();\n  useEffect(() => {\n    let resizeObserver;\n    const updateDimensions = () => {\n      if (!rendererNode.current) {\n        return;\n      }\n      const size = getDimensions(rendererNode.current);\n      if (size.height === 0 || size.width === 0) {\n        store.getState().onError?.('004', errorMessages['error004']());\n      }\n      store.setState({\n        width: size.width || 500,\n        height: size.height || 500\n      });\n    };\n    updateDimensions();\n    window.addEventListener('resize', updateDimensions);\n    if (rendererNode.current) {\n      resizeObserver = new ResizeObserver(() => updateDimensions());\n      resizeObserver.observe(rendererNode.current);\n    }\n    return () => {\n      window.removeEventListener('resize', updateDimensions);\n      if (resizeObserver && rendererNode.current) {\n        resizeObserver.unobserve(rendererNode.current);\n      }\n    };\n  }, []);\n}\nconst containerStyle = {\n  position: 'absolute',\n  width: '100%',\n  height: '100%',\n  top: 0,\n  left: 0\n};\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nconst viewChanged = (prevViewport, eventTransform) => prevViewport.x !== eventTransform.x || prevViewport.y !== eventTransform.y || prevViewport.zoom !== eventTransform.k;\nconst eventToFlowTransform = eventTransform => ({\n  x: eventTransform.x,\n  y: eventTransform.y,\n  zoom: eventTransform.k\n});\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst wheelDelta = event => {\n  const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n  return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\nconst selector$a = s => ({\n  d3Zoom: s.d3Zoom,\n  d3Selection: s.d3Selection,\n  d3ZoomHandler: s.d3ZoomHandler,\n  userSelectionActive: s.userSelectionActive\n});\nconst ZoomPane = ({\n  onMove,\n  onMoveStart,\n  onMoveEnd,\n  onPaneContextMenu,\n  zoomOnScroll = true,\n  zoomOnPinch = true,\n  panOnScroll = false,\n  panOnScrollSpeed = 0.5,\n  panOnScrollMode = PanOnScrollMode.Free,\n  zoomOnDoubleClick = true,\n  elementsSelectable,\n  panOnDrag = true,\n  defaultViewport,\n  translateExtent,\n  minZoom,\n  maxZoom,\n  zoomActivationKeyCode,\n  preventScrolling = true,\n  children,\n  noWheelClassName,\n  noPanClassName\n}) => {\n  const timerId = useRef();\n  const store = useStoreApi();\n  const isZoomingOrPanning = useRef(false);\n  const zoomedWithRightMouseButton = useRef(false);\n  const zoomPane = useRef(null);\n  const prevTransform = useRef({\n    x: 0,\n    y: 0,\n    zoom: 0\n  });\n  const {\n    d3Zoom,\n    d3Selection,\n    d3ZoomHandler,\n    userSelectionActive\n  } = useStore(selector$a, shallow);\n  const zoomActivationKeyPressed = useKeyPress(zoomActivationKeyCode);\n  const mouseButton = useRef(0);\n  const isPanScrolling = useRef(false);\n  const panScrollTimeout = useRef();\n  useResizeHandler(zoomPane);\n  useEffect(() => {\n    if (zoomPane.current) {\n      const bbox = zoomPane.current.getBoundingClientRect();\n      const d3ZoomInstance = zoom().scaleExtent([minZoom, maxZoom]).translateExtent(translateExtent);\n      const selection = select(zoomPane.current).call(d3ZoomInstance);\n      const updatedTransform = zoomIdentity.translate(defaultViewport.x, defaultViewport.y).scale(clamp(defaultViewport.zoom, minZoom, maxZoom));\n      const extent = [[0, 0], [bbox.width, bbox.height]];\n      const constrainedTransform = d3ZoomInstance.constrain()(updatedTransform, extent, translateExtent);\n      d3ZoomInstance.transform(selection, constrainedTransform);\n      d3ZoomInstance.wheelDelta(wheelDelta);\n      store.setState({\n        d3Zoom: d3ZoomInstance,\n        d3Selection: selection,\n        d3ZoomHandler: selection.on('wheel.zoom'),\n        // we need to pass transform because zoom handler is not registered when we set the initial transform\n        transform: [constrainedTransform.x, constrainedTransform.y, constrainedTransform.k],\n        domNode: zoomPane.current.closest('.react-flow')\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (d3Selection && d3Zoom) {\n      if (panOnScroll && !zoomActivationKeyPressed && !userSelectionActive) {\n        d3Selection.on('wheel.zoom', event => {\n          if (isWrappedWithClass(event, noWheelClassName)) {\n            return false;\n          }\n          event.preventDefault();\n          event.stopImmediatePropagation();\n          const currentZoom = d3Selection.property('__zoom').k || 1;\n          // macos and win set ctrlKey=true for pinch gesture on a trackpad\n          if (event.ctrlKey && zoomOnPinch) {\n            const point = pointer(event);\n            const pinchDelta = wheelDelta(event);\n            const zoom = currentZoom * Math.pow(2, pinchDelta);\n            // @ts-ignore\n            d3Zoom.scaleTo(d3Selection, zoom, point, event);\n            return;\n          }\n          // increase scroll speed in firefox\n          // firefox: deltaMode === 1; chrome: deltaMode === 0\n          const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n          let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n          let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n          // this enables vertical scrolling with shift + scroll on windows\n          if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n            deltaX = event.deltaY * deltaNormalize;\n            deltaY = 0;\n          }\n          d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed,\n          // @ts-ignore\n          {\n            internal: true\n          });\n          const nextViewport = eventToFlowTransform(d3Selection.property('__zoom'));\n          const {\n            onViewportChangeStart,\n            onViewportChange,\n            onViewportChangeEnd\n          } = store.getState();\n          clearTimeout(panScrollTimeout.current);\n          // for pan on scroll we need to handle the event calls on our own\n          // we can't use the start, zoom and end events from d3-zoom\n          // because start and move gets called on every scroll event and not once at the beginning\n          if (!isPanScrolling.current) {\n            isPanScrolling.current = true;\n            onMoveStart?.(event, nextViewport);\n            onViewportChangeStart?.(nextViewport);\n          }\n          if (isPanScrolling.current) {\n            onMove?.(event, nextViewport);\n            onViewportChange?.(nextViewport);\n            panScrollTimeout.current = setTimeout(() => {\n              onMoveEnd?.(event, nextViewport);\n              onViewportChangeEnd?.(nextViewport);\n              isPanScrolling.current = false;\n            }, 150);\n          }\n        }, {\n          passive: false\n        });\n      } else if (typeof d3ZoomHandler !== 'undefined') {\n        d3Selection.on('wheel.zoom', function (event, d) {\n          // we still want to enable pinch zooming even if preventScrolling is set to false\n          const invalidEvent = !preventScrolling && event.type === 'wheel' && !event.ctrlKey;\n          if (invalidEvent || isWrappedWithClass(event, noWheelClassName)) {\n            return null;\n          }\n          event.preventDefault();\n          d3ZoomHandler.call(this, event, d);\n        }, {\n          passive: false\n        });\n      }\n    }\n  }, [userSelectionActive, panOnScroll, panOnScrollMode, d3Selection, d3Zoom, d3ZoomHandler, zoomActivationKeyPressed, zoomOnPinch, preventScrolling, noWheelClassName, onMoveStart, onMove, onMoveEnd]);\n  useEffect(() => {\n    if (d3Zoom) {\n      d3Zoom.on('start', event => {\n        if (!event.sourceEvent || event.sourceEvent.internal) {\n          return null;\n        }\n        // we need to remember it here, because it's always 0 in the \"zoom\" event\n        mouseButton.current = event.sourceEvent?.button;\n        const {\n          onViewportChangeStart\n        } = store.getState();\n        const flowTransform = eventToFlowTransform(event.transform);\n        isZoomingOrPanning.current = true;\n        prevTransform.current = flowTransform;\n        if (event.sourceEvent?.type === 'mousedown') {\n          store.setState({\n            paneDragging: true\n          });\n        }\n        onViewportChangeStart?.(flowTransform);\n        onMoveStart?.(event.sourceEvent, flowTransform);\n      });\n    }\n  }, [d3Zoom, onMoveStart]);\n  useEffect(() => {\n    if (d3Zoom) {\n      if (userSelectionActive && !isZoomingOrPanning.current) {\n        d3Zoom.on('zoom', null);\n      } else if (!userSelectionActive) {\n        d3Zoom.on('zoom', event => {\n          const {\n            onViewportChange\n          } = store.getState();\n          store.setState({\n            transform: [event.transform.x, event.transform.y, event.transform.k]\n          });\n          zoomedWithRightMouseButton.current = !!(onPaneContextMenu && isRightClickPan(panOnDrag, mouseButton.current ?? 0));\n          if ((onMove || onViewportChange) && !event.sourceEvent?.internal) {\n            const flowTransform = eventToFlowTransform(event.transform);\n            onViewportChange?.(flowTransform);\n            onMove?.(event.sourceEvent, flowTransform);\n          }\n        });\n      }\n    }\n  }, [userSelectionActive, d3Zoom, onMove, panOnDrag, onPaneContextMenu]);\n  useEffect(() => {\n    if (d3Zoom) {\n      d3Zoom.on('end', event => {\n        if (!event.sourceEvent || event.sourceEvent.internal) {\n          return null;\n        }\n        const {\n          onViewportChangeEnd\n        } = store.getState();\n        isZoomingOrPanning.current = false;\n        store.setState({\n          paneDragging: false\n        });\n        if (onPaneContextMenu && isRightClickPan(panOnDrag, mouseButton.current ?? 0) && !zoomedWithRightMouseButton.current) {\n          onPaneContextMenu(event.sourceEvent);\n        }\n        zoomedWithRightMouseButton.current = false;\n        if ((onMoveEnd || onViewportChangeEnd) && viewChanged(prevTransform.current, event.transform)) {\n          const flowTransform = eventToFlowTransform(event.transform);\n          prevTransform.current = flowTransform;\n          clearTimeout(timerId.current);\n          timerId.current = setTimeout(() => {\n            onViewportChangeEnd?.(flowTransform);\n            onMoveEnd?.(event.sourceEvent, flowTransform);\n          }, panOnScroll ? 150 : 0);\n        }\n      });\n    }\n  }, [d3Zoom, panOnScroll, panOnDrag, onMoveEnd, onPaneContextMenu]);\n  useEffect(() => {\n    if (d3Zoom) {\n      d3Zoom.filter(event => {\n        const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n        const pinchZoom = zoomOnPinch && event.ctrlKey;\n        if ((panOnDrag === true || Array.isArray(panOnDrag) && panOnDrag.includes(1)) && event.button === 1 && event.type === 'mousedown' && (isWrappedWithClass(event, 'react-flow__node') || isWrappedWithClass(event, 'react-flow__edge'))) {\n          return true;\n        }\n        // if all interactions are disabled, we prevent all zoom events\n        if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n          return false;\n        }\n        // during a selection we prevent all other interactions\n        if (userSelectionActive) {\n          return false;\n        }\n        // if zoom on double click is disabled, we prevent the double click event\n        if (!zoomOnDoubleClick && event.type === 'dblclick') {\n          return false;\n        }\n        // if the target element is inside an element with the nowheel class, we prevent zooming\n        if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n          return false;\n        }\n        // if the target element is inside an element with the nopan class, we prevent panning\n        if (isWrappedWithClass(event, noPanClassName) && (event.type !== 'wheel' || panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed)) {\n          return false;\n        }\n        if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n          return false;\n        }\n        // when there is no scroll handling enabled, we prevent all wheel events\n        if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n          return false;\n        }\n        // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n        if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n          return false;\n        }\n        // if the pane is only movable using allowed clicks\n        if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\n          return false;\n        }\n        // We only allow right clicks if pan on drag is set to right click\n        const buttonAllowed = Array.isArray(panOnDrag) && panOnDrag.includes(event.button) || !event.button || event.button <= 1;\n        // default filter for d3-zoom\n        return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\n      });\n    }\n  }, [userSelectionActive, d3Zoom, zoomOnScroll, zoomOnPinch, panOnScroll, zoomOnDoubleClick, panOnDrag, elementsSelectable, zoomActivationKeyPressed]);\n  return React.createElement(\"div\", {\n    className: \"react-flow__renderer\",\n    ref: zoomPane,\n    style: containerStyle\n  }, children);\n};\nconst selector$9 = s => ({\n  userSelectionActive: s.userSelectionActive,\n  userSelectionRect: s.userSelectionRect\n});\nfunction UserSelection() {\n  const {\n    userSelectionActive,\n    userSelectionRect\n  } = useStore(selector$9, shallow);\n  const isActive = userSelectionActive && userSelectionRect;\n  if (!isActive) {\n    return null;\n  }\n  return React.createElement(\"div\", {\n    className: \"react-flow__selection react-flow__container\",\n    style: {\n      width: userSelectionRect.width,\n      height: userSelectionRect.height,\n      transform: `translate(${userSelectionRect.x}px, ${userSelectionRect.y}px)`\n    }\n  });\n}\nfunction handleParentExpand(res, updateItem) {\n  const parentId = updateItem.parentNode || updateItem.parentId;\n  const parent = res.find(e => e.id === parentId);\n  if (parent) {\n    const extendWidth = updateItem.position.x + updateItem.width - parent.width;\n    const extendHeight = updateItem.position.y + updateItem.height - parent.height;\n    if (extendWidth > 0 || extendHeight > 0 || updateItem.position.x < 0 || updateItem.position.y < 0) {\n      parent.style = {\n        ...parent.style\n      } || {};\n      parent.style.width = parent.style.width ?? parent.width;\n      parent.style.height = parent.style.height ?? parent.height;\n      if (extendWidth > 0) {\n        parent.style.width += extendWidth;\n      }\n      if (extendHeight > 0) {\n        parent.style.height += extendHeight;\n      }\n      if (updateItem.position.x < 0) {\n        const xDiff = Math.abs(updateItem.position.x);\n        parent.position.x = parent.position.x - xDiff;\n        parent.style.width += xDiff;\n        updateItem.position.x = 0;\n      }\n      if (updateItem.position.y < 0) {\n        const yDiff = Math.abs(updateItem.position.y);\n        parent.position.y = parent.position.y - yDiff;\n        parent.style.height += yDiff;\n        updateItem.position.y = 0;\n      }\n      parent.width = parent.style.width;\n      parent.height = parent.style.height;\n    }\n  }\n}\nfunction applyChanges(changes, elements) {\n  // we need this hack to handle the setNodes and setEdges function of the useReactFlow hook for controlled flows\n  if (changes.some(c => c.type === 'reset')) {\n    return changes.filter(c => c.type === 'reset').map(c => c.item);\n  }\n  const initElements = changes.filter(c => c.type === 'add').map(c => c.item);\n  return elements.reduce((res, item) => {\n    const currentChanges = changes.filter(c => c.id === item.id);\n    if (currentChanges.length === 0) {\n      res.push(item);\n      return res;\n    }\n    const updateItem = {\n      ...item\n    };\n    for (const currentChange of currentChanges) {\n      if (currentChange) {\n        switch (currentChange.type) {\n          case 'select':\n            {\n              updateItem.selected = currentChange.selected;\n              break;\n            }\n          case 'position':\n            {\n              if (typeof currentChange.position !== 'undefined') {\n                updateItem.position = currentChange.position;\n              }\n              if (typeof currentChange.positionAbsolute !== 'undefined') {\n                updateItem.positionAbsolute = currentChange.positionAbsolute;\n              }\n              if (typeof currentChange.dragging !== 'undefined') {\n                updateItem.dragging = currentChange.dragging;\n              }\n              if (updateItem.expandParent) {\n                handleParentExpand(res, updateItem);\n              }\n              break;\n            }\n          case 'dimensions':\n            {\n              if (typeof currentChange.dimensions !== 'undefined') {\n                updateItem.width = currentChange.dimensions.width;\n                updateItem.height = currentChange.dimensions.height;\n              }\n              if (typeof currentChange.updateStyle !== 'undefined') {\n                updateItem.style = {\n                  ...(updateItem.style || {}),\n                  ...currentChange.dimensions\n                };\n              }\n              if (typeof currentChange.resizing === 'boolean') {\n                updateItem.resizing = currentChange.resizing;\n              }\n              if (updateItem.expandParent) {\n                handleParentExpand(res, updateItem);\n              }\n              break;\n            }\n          case 'remove':\n            {\n              return res;\n            }\n        }\n      }\n    }\n    res.push(updateItem);\n    return res;\n  }, initElements);\n}\nfunction applyNodeChanges(changes, nodes) {\n  return applyChanges(changes, nodes);\n}\nfunction applyEdgeChanges(changes, edges) {\n  return applyChanges(changes, edges);\n}\nconst createSelectionChange = (id, selected) => ({\n  id,\n  type: 'select',\n  selected\n});\nfunction getSelectionChanges(items, selectedIds) {\n  return items.reduce((res, item) => {\n    const willBeSelected = selectedIds.includes(item.id);\n    if (!item.selected && willBeSelected) {\n      item.selected = true;\n      res.push(createSelectionChange(item.id, true));\n    } else if (item.selected && !willBeSelected) {\n      item.selected = false;\n      res.push(createSelectionChange(item.id, false));\n    }\n    return res;\n  }, []);\n}\n\n/**\n * The user selection rectangle gets displayed when a user drags the mouse while pressing shift\n */\nconst wrapHandler = (handler, containerRef) => {\n  return event => {\n    if (event.target !== containerRef.current) {\n      return;\n    }\n    handler?.(event);\n  };\n};\nconst selector$8 = s => ({\n  userSelectionActive: s.userSelectionActive,\n  elementsSelectable: s.elementsSelectable,\n  dragging: s.paneDragging\n});\nconst Pane = memo(({\n  isSelecting,\n  selectionMode = SelectionMode.Full,\n  panOnDrag,\n  onSelectionStart,\n  onSelectionEnd,\n  onPaneClick,\n  onPaneContextMenu,\n  onPaneScroll,\n  onPaneMouseEnter,\n  onPaneMouseMove,\n  onPaneMouseLeave,\n  children\n}) => {\n  const container = useRef(null);\n  const store = useStoreApi();\n  const prevSelectedNodesCount = useRef(0);\n  const prevSelectedEdgesCount = useRef(0);\n  const containerBounds = useRef();\n  const {\n    userSelectionActive,\n    elementsSelectable,\n    dragging\n  } = useStore(selector$8, shallow);\n  const resetUserSelection = () => {\n    store.setState({\n      userSelectionActive: false,\n      userSelectionRect: null\n    });\n    prevSelectedNodesCount.current = 0;\n    prevSelectedEdgesCount.current = 0;\n  };\n  const onClick = event => {\n    onPaneClick?.(event);\n    store.getState().resetSelectedElements();\n    store.setState({\n      nodesSelectionActive: false\n    });\n  };\n  const onContextMenu = event => {\n    if (Array.isArray(panOnDrag) && panOnDrag?.includes(2)) {\n      event.preventDefault();\n      return;\n    }\n    onPaneContextMenu?.(event);\n  };\n  const onWheel = onPaneScroll ? event => onPaneScroll(event) : undefined;\n  const onMouseDown = event => {\n    const {\n      resetSelectedElements,\n      domNode\n    } = store.getState();\n    containerBounds.current = domNode?.getBoundingClientRect();\n    if (!elementsSelectable || !isSelecting || event.button !== 0 || event.target !== container.current || !containerBounds.current) {\n      return;\n    }\n    const {\n      x,\n      y\n    } = getEventPosition(event, containerBounds.current);\n    resetSelectedElements();\n    store.setState({\n      userSelectionRect: {\n        width: 0,\n        height: 0,\n        startX: x,\n        startY: y,\n        x,\n        y\n      }\n    });\n    onSelectionStart?.(event);\n  };\n  const onMouseMove = event => {\n    const {\n      userSelectionRect,\n      nodeInternals,\n      edges,\n      transform,\n      onNodesChange,\n      onEdgesChange,\n      nodeOrigin,\n      getNodes\n    } = store.getState();\n    if (!isSelecting || !containerBounds.current || !userSelectionRect) {\n      return;\n    }\n    store.setState({\n      userSelectionActive: true,\n      nodesSelectionActive: false\n    });\n    const mousePos = getEventPosition(event, containerBounds.current);\n    const startX = userSelectionRect.startX ?? 0;\n    const startY = userSelectionRect.startY ?? 0;\n    const nextUserSelectRect = {\n      ...userSelectionRect,\n      x: mousePos.x < startX ? mousePos.x : startX,\n      y: mousePos.y < startY ? mousePos.y : startY,\n      width: Math.abs(mousePos.x - startX),\n      height: Math.abs(mousePos.y - startY)\n    };\n    const nodes = getNodes();\n    const selectedNodes = getNodesInside(nodeInternals, nextUserSelectRect, transform, selectionMode === SelectionMode.Partial, true, nodeOrigin);\n    const selectedEdgeIds = getConnectedEdges(selectedNodes, edges).map(e => e.id);\n    const selectedNodeIds = selectedNodes.map(n => n.id);\n    if (prevSelectedNodesCount.current !== selectedNodeIds.length) {\n      prevSelectedNodesCount.current = selectedNodeIds.length;\n      const changes = getSelectionChanges(nodes, selectedNodeIds);\n      if (changes.length) {\n        onNodesChange?.(changes);\n      }\n    }\n    if (prevSelectedEdgesCount.current !== selectedEdgeIds.length) {\n      prevSelectedEdgesCount.current = selectedEdgeIds.length;\n      const changes = getSelectionChanges(edges, selectedEdgeIds);\n      if (changes.length) {\n        onEdgesChange?.(changes);\n      }\n    }\n    store.setState({\n      userSelectionRect: nextUserSelectRect\n    });\n  };\n  const onMouseUp = event => {\n    if (event.button !== 0) {\n      return;\n    }\n    const {\n      userSelectionRect\n    } = store.getState();\n    // We only want to trigger click functions when in selection mode if\n    // the user did not move the mouse.\n    if (!userSelectionActive && userSelectionRect && event.target === container.current) {\n      onClick?.(event);\n    }\n    store.setState({\n      nodesSelectionActive: prevSelectedNodesCount.current > 0\n    });\n    resetUserSelection();\n    onSelectionEnd?.(event);\n  };\n  const onMouseLeave = event => {\n    if (userSelectionActive) {\n      store.setState({\n        nodesSelectionActive: prevSelectedNodesCount.current > 0\n      });\n      onSelectionEnd?.(event);\n    }\n    resetUserSelection();\n  };\n  const hasActiveSelection = elementsSelectable && (isSelecting || userSelectionActive);\n  return React.createElement(\"div\", {\n    className: cc(['react-flow__pane', {\n      dragging,\n      selection: isSelecting\n    }]),\n    onClick: hasActiveSelection ? undefined : wrapHandler(onClick, container),\n    onContextMenu: wrapHandler(onContextMenu, container),\n    onWheel: wrapHandler(onWheel, container),\n    onMouseEnter: hasActiveSelection ? undefined : onPaneMouseEnter,\n    onMouseDown: hasActiveSelection ? onMouseDown : undefined,\n    onMouseMove: hasActiveSelection ? onMouseMove : onPaneMouseMove,\n    onMouseUp: hasActiveSelection ? onMouseUp : undefined,\n    onMouseLeave: hasActiveSelection ? onMouseLeave : onPaneMouseLeave,\n    ref: container,\n    style: containerStyle\n  }, children, React.createElement(UserSelection, null));\n});\nPane.displayName = 'Pane';\nfunction isParentSelected(node, nodeInternals) {\n  const parentId = node.parentNode || node.parentId;\n  if (!parentId) {\n    return false;\n  }\n  const parentNode = nodeInternals.get(parentId);\n  if (!parentNode) {\n    return false;\n  }\n  if (parentNode.selected) {\n    return true;\n  }\n  return isParentSelected(parentNode, nodeInternals);\n}\nfunction hasSelector(target, selector, nodeRef) {\n  let current = target;\n  do {\n    if (current?.matches(selector)) return true;\n    if (current === nodeRef.current) return false;\n    current = current.parentElement;\n  } while (current);\n  return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeInternals, nodesDraggable, mousePos, nodeId) {\n  return Array.from(nodeInternals.values()).filter(n => (n.selected || n.id === nodeId) && (!n.parentNode || n.parentId || !isParentSelected(n, nodeInternals)) && (n.draggable || nodesDraggable && typeof n.draggable === 'undefined')).map(n => ({\n    id: n.id,\n    position: n.position || {\n      x: 0,\n      y: 0\n    },\n    positionAbsolute: n.positionAbsolute || {\n      x: 0,\n      y: 0\n    },\n    distance: {\n      x: mousePos.x - (n.positionAbsolute?.x ?? 0),\n      y: mousePos.y - (n.positionAbsolute?.y ?? 0)\n    },\n    delta: {\n      x: 0,\n      y: 0\n    },\n    extent: n.extent,\n    parentNode: n.parentNode || n.parentId,\n    parentId: n.parentNode || n.parentId,\n    width: n.width,\n    height: n.height,\n    expandParent: n.expandParent\n  }));\n}\nfunction clampNodeExtent(node, extent) {\n  if (!extent || extent === 'parent') {\n    return extent;\n  }\n  return [extent[0], [extent[1][0] - (node.width || 0), extent[1][1] - (node.height || 0)]];\n}\nfunction calcNextPosition(node, nextPosition, nodeInternals, nodeExtent, nodeOrigin = [0, 0], onError) {\n  const clampedNodeExtent = clampNodeExtent(node, node.extent || nodeExtent);\n  let currentExtent = clampedNodeExtent;\n  const parentId = node.parentNode || node.parentId;\n  if (node.extent === 'parent' && !node.expandParent) {\n    if (parentId && node.width && node.height) {\n      const parent = nodeInternals.get(parentId);\n      const {\n        x: parentX,\n        y: parentY\n      } = getNodePositionWithOrigin(parent, nodeOrigin).positionAbsolute;\n      currentExtent = parent && isNumeric(parentX) && isNumeric(parentY) && isNumeric(parent.width) && isNumeric(parent.height) ? [[parentX + node.width * nodeOrigin[0], parentY + node.height * nodeOrigin[1]], [parentX + parent.width - node.width + node.width * nodeOrigin[0], parentY + parent.height - node.height + node.height * nodeOrigin[1]]] : currentExtent;\n    } else {\n      onError?.('005', errorMessages['error005']());\n      currentExtent = clampedNodeExtent;\n    }\n  } else if (node.extent && parentId && node.extent !== 'parent') {\n    const parent = nodeInternals.get(parentId);\n    const {\n      x: parentX,\n      y: parentY\n    } = getNodePositionWithOrigin(parent, nodeOrigin).positionAbsolute;\n    currentExtent = [[node.extent[0][0] + parentX, node.extent[0][1] + parentY], [node.extent[1][0] + parentX, node.extent[1][1] + parentY]];\n  }\n  let parentPosition = {\n    x: 0,\n    y: 0\n  };\n  if (parentId) {\n    const parentNode = nodeInternals.get(parentId);\n    parentPosition = getNodePositionWithOrigin(parentNode, nodeOrigin).positionAbsolute;\n  }\n  const positionAbsolute = currentExtent && currentExtent !== 'parent' ? clampPosition(nextPosition, currentExtent) : nextPosition;\n  return {\n    position: {\n      x: positionAbsolute.x - parentPosition.x,\n      y: positionAbsolute.y - parentPosition.y\n    },\n    positionAbsolute\n  };\n}\n// returns two params:\n// 1. the dragged node (or the first of the list, if we are dragging a node selection)\n// 2. array of selected nodes (for multi selections)\nfunction getEventHandlerParams({\n  nodeId,\n  dragItems,\n  nodeInternals\n}) {\n  const extentedDragItems = dragItems.map(n => {\n    const node = nodeInternals.get(n.id);\n    return {\n      ...node,\n      position: n.position,\n      positionAbsolute: n.positionAbsolute\n    };\n  });\n  return [nodeId ? extentedDragItems.find(n => n.id === nodeId) : extentedDragItems[0], extentedDragItems];\n}\nconst getHandleBounds = (selector, nodeElement, zoom, nodeOrigin) => {\n  const handles = nodeElement.querySelectorAll(selector);\n  if (!handles || !handles.length) {\n    return null;\n  }\n  const handlesArray = Array.from(handles);\n  const nodeBounds = nodeElement.getBoundingClientRect();\n  const nodeOffset = {\n    x: nodeBounds.width * nodeOrigin[0],\n    y: nodeBounds.height * nodeOrigin[1]\n  };\n  return handlesArray.map(handle => {\n    const handleBounds = handle.getBoundingClientRect();\n    return {\n      id: handle.getAttribute('data-handleid'),\n      position: handle.getAttribute('data-handlepos'),\n      x: (handleBounds.left - nodeBounds.left - nodeOffset.x) / zoom,\n      y: (handleBounds.top - nodeBounds.top - nodeOffset.y) / zoom,\n      ...getDimensions(handle)\n    };\n  });\n};\nfunction getMouseHandler(id, getState, handler) {\n  return handler === undefined ? handler : event => {\n    const node = getState().nodeInternals.get(id);\n    if (node) {\n      handler(event, {\n        ...node\n      });\n    }\n  };\n}\n// this handler is called by\n// 1. the click handler when node is not draggable or selectNodesOnDrag = false\n// or\n// 2. the on drag start handler when node is draggable and selectNodesOnDrag = true\nfunction handleNodeClick({\n  id,\n  store,\n  unselect = false,\n  nodeRef\n}) {\n  const {\n    addSelectedNodes,\n    unselectNodesAndEdges,\n    multiSelectionActive,\n    nodeInternals,\n    onError\n  } = store.getState();\n  const node = nodeInternals.get(id);\n  if (!node) {\n    onError?.('012', errorMessages['error012'](id));\n    return;\n  }\n  store.setState({\n    nodesSelectionActive: false\n  });\n  if (!node.selected) {\n    addSelectedNodes([id]);\n  } else if (unselect || node.selected && multiSelectionActive) {\n    unselectNodesAndEdges({\n      nodes: [node],\n      edges: []\n    });\n    requestAnimationFrame(() => nodeRef?.current?.blur());\n  }\n}\nfunction useGetPointerPosition() {\n  const store = useStoreApi();\n  // returns the pointer position projected to the RF coordinate system\n  const getPointerPosition = useCallback(({\n    sourceEvent\n  }) => {\n    const {\n      transform,\n      snapGrid,\n      snapToGrid\n    } = store.getState();\n    const x = sourceEvent.touches ? sourceEvent.touches[0].clientX : sourceEvent.clientX;\n    const y = sourceEvent.touches ? sourceEvent.touches[0].clientY : sourceEvent.clientY;\n    const pointerPos = {\n      x: (x - transform[0]) / transform[2],\n      y: (y - transform[1]) / transform[2]\n    };\n    // we need the snapped position in order to be able to skip unnecessary drag events\n    return {\n      xSnapped: snapToGrid ? snapGrid[0] * Math.round(pointerPos.x / snapGrid[0]) : pointerPos.x,\n      ySnapped: snapToGrid ? snapGrid[1] * Math.round(pointerPos.y / snapGrid[1]) : pointerPos.y,\n      ...pointerPos\n    };\n  }, []);\n  return getPointerPosition;\n}\nfunction wrapSelectionDragFunc(selectionFunc) {\n  return (event, _, nodes) => selectionFunc?.(event, nodes);\n}\nfunction useDrag({\n  nodeRef,\n  disabled = false,\n  noDragClassName,\n  handleSelector,\n  nodeId,\n  isSelectable,\n  selectNodesOnDrag\n}) {\n  const store = useStoreApi();\n  const [dragging, setDragging] = useState(false);\n  const dragItems = useRef([]);\n  const lastPos = useRef({\n    x: null,\n    y: null\n  });\n  const autoPanId = useRef(0);\n  const containerBounds = useRef(null);\n  const mousePosition = useRef({\n    x: 0,\n    y: 0\n  });\n  const dragEvent = useRef(null);\n  const autoPanStarted = useRef(false);\n  const dragStarted = useRef(false);\n  const getPointerPosition = useGetPointerPosition();\n  useEffect(() => {\n    if (nodeRef?.current) {\n      const selection = select(nodeRef.current);\n      const updateNodes = ({\n        x,\n        y\n      }) => {\n        const {\n          nodeInternals,\n          onNodeDrag,\n          onSelectionDrag,\n          updateNodePositions,\n          nodeExtent,\n          snapGrid,\n          snapToGrid,\n          nodeOrigin,\n          onError\n        } = store.getState();\n        lastPos.current = {\n          x,\n          y\n        };\n        let hasChange = false;\n        let nodesBox = {\n          x: 0,\n          y: 0,\n          x2: 0,\n          y2: 0\n        };\n        if (dragItems.current.length > 1 && nodeExtent) {\n          const rect = getNodesBounds(dragItems.current, nodeOrigin);\n          nodesBox = rectToBox(rect);\n        }\n        dragItems.current = dragItems.current.map(n => {\n          const nextPosition = {\n            x: x - n.distance.x,\n            y: y - n.distance.y\n          };\n          if (snapToGrid) {\n            nextPosition.x = snapGrid[0] * Math.round(nextPosition.x / snapGrid[0]);\n            nextPosition.y = snapGrid[1] * Math.round(nextPosition.y / snapGrid[1]);\n          }\n          // if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\n          // based on its position so that the node stays at it's position relative to the selection.\n          const adjustedNodeExtent = [[nodeExtent[0][0], nodeExtent[0][1]], [nodeExtent[1][0], nodeExtent[1][1]]];\n          if (dragItems.current.length > 1 && nodeExtent && !n.extent) {\n            adjustedNodeExtent[0][0] = n.positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n            adjustedNodeExtent[1][0] = n.positionAbsolute.x + (n.width ?? 0) - nodesBox.x2 + nodeExtent[1][0];\n            adjustedNodeExtent[0][1] = n.positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n            adjustedNodeExtent[1][1] = n.positionAbsolute.y + (n.height ?? 0) - nodesBox.y2 + nodeExtent[1][1];\n          }\n          const updatedPos = calcNextPosition(n, nextPosition, nodeInternals, adjustedNodeExtent, nodeOrigin, onError);\n          // we want to make sure that we only fire a change event when there is a change\n          hasChange = hasChange || n.position.x !== updatedPos.position.x || n.position.y !== updatedPos.position.y;\n          n.position = updatedPos.position;\n          n.positionAbsolute = updatedPos.positionAbsolute;\n          return n;\n        });\n        if (!hasChange) {\n          return;\n        }\n        updateNodePositions(dragItems.current, true, true);\n        setDragging(true);\n        const onDrag = nodeId ? onNodeDrag : wrapSelectionDragFunc(onSelectionDrag);\n        if (onDrag && dragEvent.current) {\n          const [currentNode, nodes] = getEventHandlerParams({\n            nodeId,\n            dragItems: dragItems.current,\n            nodeInternals\n          });\n          onDrag(dragEvent.current, currentNode, nodes);\n        }\n      };\n      const autoPan = () => {\n        if (!containerBounds.current) {\n          return;\n        }\n        const [xMovement, yMovement] = calcAutoPan(mousePosition.current, containerBounds.current);\n        if (xMovement !== 0 || yMovement !== 0) {\n          const {\n            transform,\n            panBy\n          } = store.getState();\n          lastPos.current.x = (lastPos.current.x ?? 0) - xMovement / transform[2];\n          lastPos.current.y = (lastPos.current.y ?? 0) - yMovement / transform[2];\n          if (panBy({\n            x: xMovement,\n            y: yMovement\n          })) {\n            updateNodes(lastPos.current);\n          }\n        }\n        autoPanId.current = requestAnimationFrame(autoPan);\n      };\n      const startDrag = event => {\n        const {\n          nodeInternals,\n          multiSelectionActive,\n          nodesDraggable,\n          unselectNodesAndEdges,\n          onNodeDragStart,\n          onSelectionDragStart\n        } = store.getState();\n        dragStarted.current = true;\n        const onStart = nodeId ? onNodeDragStart : wrapSelectionDragFunc(onSelectionDragStart);\n        if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n          if (!nodeInternals.get(nodeId)?.selected) {\n            // we need to reset selected nodes when selectNodesOnDrag=false\n            unselectNodesAndEdges();\n          }\n        }\n        if (nodeId && isSelectable && selectNodesOnDrag) {\n          handleNodeClick({\n            id: nodeId,\n            store,\n            nodeRef: nodeRef\n          });\n        }\n        const pointerPos = getPointerPosition(event);\n        lastPos.current = pointerPos;\n        dragItems.current = getDragItems(nodeInternals, nodesDraggable, pointerPos, nodeId);\n        if (onStart && dragItems.current) {\n          const [currentNode, nodes] = getEventHandlerParams({\n            nodeId,\n            dragItems: dragItems.current,\n            nodeInternals\n          });\n          onStart(event.sourceEvent, currentNode, nodes);\n        }\n      };\n      if (disabled) {\n        selection.on('.drag', null);\n      } else {\n        const dragHandler = drag().on('start', event => {\n          const {\n            domNode,\n            nodeDragThreshold\n          } = store.getState();\n          if (nodeDragThreshold === 0) {\n            startDrag(event);\n          }\n          const pointerPos = getPointerPosition(event);\n          lastPos.current = pointerPos;\n          containerBounds.current = domNode?.getBoundingClientRect() || null;\n          mousePosition.current = getEventPosition(event.sourceEvent, containerBounds.current);\n        }).on('drag', event => {\n          const pointerPos = getPointerPosition(event);\n          const {\n            autoPanOnNodeDrag,\n            nodeDragThreshold\n          } = store.getState();\n          if (!autoPanStarted.current && dragStarted.current && autoPanOnNodeDrag) {\n            autoPanStarted.current = true;\n            autoPan();\n          }\n          if (!dragStarted.current) {\n            const x = pointerPos.xSnapped - (lastPos?.current?.x ?? 0);\n            const y = pointerPos.ySnapped - (lastPos?.current?.y ?? 0);\n            const distance = Math.sqrt(x * x + y * y);\n            if (distance > nodeDragThreshold) {\n              startDrag(event);\n            }\n          }\n          // skip events without movement\n          if ((lastPos.current.x !== pointerPos.xSnapped || lastPos.current.y !== pointerPos.ySnapped) && dragItems.current && dragStarted.current) {\n            dragEvent.current = event.sourceEvent;\n            mousePosition.current = getEventPosition(event.sourceEvent, containerBounds.current);\n            updateNodes(pointerPos);\n          }\n        }).on('end', event => {\n          if (!dragStarted.current) {\n            return;\n          }\n          setDragging(false);\n          autoPanStarted.current = false;\n          dragStarted.current = false;\n          cancelAnimationFrame(autoPanId.current);\n          if (dragItems.current) {\n            const {\n              updateNodePositions,\n              nodeInternals,\n              onNodeDragStop,\n              onSelectionDragStop\n            } = store.getState();\n            const onStop = nodeId ? onNodeDragStop : wrapSelectionDragFunc(onSelectionDragStop);\n            updateNodePositions(dragItems.current, false, false);\n            if (onStop) {\n              const [currentNode, nodes] = getEventHandlerParams({\n                nodeId,\n                dragItems: dragItems.current,\n                nodeInternals\n              });\n              onStop(event.sourceEvent, currentNode, nodes);\n            }\n          }\n        }).filter(event => {\n          const target = event.target;\n          const isDraggable = !event.button && (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, nodeRef)) && (!handleSelector || hasSelector(target, handleSelector, nodeRef));\n          return isDraggable;\n        });\n        selection.call(dragHandler);\n        return () => {\n          selection.on('.drag', null);\n        };\n      }\n    }\n  }, [nodeRef, disabled, noDragClassName, handleSelector, isSelectable, store, nodeId, selectNodesOnDrag, getPointerPosition]);\n  return dragging;\n}\nfunction useUpdateNodePositions() {\n  const store = useStoreApi();\n  const updatePositions = useCallback(params => {\n    const {\n      nodeInternals,\n      nodeExtent,\n      updateNodePositions,\n      getNodes,\n      snapToGrid,\n      snapGrid,\n      onError,\n      nodesDraggable\n    } = store.getState();\n    const selectedNodes = getNodes().filter(n => n.selected && (n.draggable || nodesDraggable && typeof n.draggable === 'undefined'));\n    // by default a node moves 5px on each key press, or 20px if shift is pressed\n    // if snap grid is enabled, we use that for the velocity.\n    const xVelo = snapToGrid ? snapGrid[0] : 5;\n    const yVelo = snapToGrid ? snapGrid[1] : 5;\n    const factor = params.isShiftPressed ? 4 : 1;\n    const positionDiffX = params.x * xVelo * factor;\n    const positionDiffY = params.y * yVelo * factor;\n    const nodeUpdates = selectedNodes.map(n => {\n      if (n.positionAbsolute) {\n        const nextPosition = {\n          x: n.positionAbsolute.x + positionDiffX,\n          y: n.positionAbsolute.y + positionDiffY\n        };\n        if (snapToGrid) {\n          nextPosition.x = snapGrid[0] * Math.round(nextPosition.x / snapGrid[0]);\n          nextPosition.y = snapGrid[1] * Math.round(nextPosition.y / snapGrid[1]);\n        }\n        const {\n          positionAbsolute,\n          position\n        } = calcNextPosition(n, nextPosition, nodeInternals, nodeExtent, undefined, onError);\n        n.position = position;\n        n.positionAbsolute = positionAbsolute;\n      }\n      return n;\n    });\n    updateNodePositions(nodeUpdates, true, false);\n  }, []);\n  return updatePositions;\n}\nconst arrowKeyDiffs = {\n  ArrowUp: {\n    x: 0,\n    y: -1\n  },\n  ArrowDown: {\n    x: 0,\n    y: 1\n  },\n  ArrowLeft: {\n    x: -1,\n    y: 0\n  },\n  ArrowRight: {\n    x: 1,\n    y: 0\n  }\n};\nvar wrapNode = NodeComponent => {\n  const NodeWrapper = ({\n    id,\n    type,\n    data,\n    xPos,\n    yPos,\n    xPosOrigin,\n    yPosOrigin,\n    selected,\n    onClick,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    onContextMenu,\n    onDoubleClick,\n    style,\n    className,\n    isDraggable,\n    isSelectable,\n    isConnectable,\n    isFocusable,\n    selectNodesOnDrag,\n    sourcePosition,\n    targetPosition,\n    hidden,\n    resizeObserver,\n    dragHandle,\n    zIndex,\n    isParent,\n    noDragClassName,\n    noPanClassName,\n    initialized,\n    disableKeyboardA11y,\n    ariaLabel,\n    rfId,\n    hasHandleBounds\n  }) => {\n    const store = useStoreApi();\n    const nodeRef = useRef(null);\n    const prevNodeRef = useRef(null);\n    const prevSourcePosition = useRef(sourcePosition);\n    const prevTargetPosition = useRef(targetPosition);\n    const prevType = useRef(type);\n    const hasPointerEvents = isSelectable || isDraggable || onClick || onMouseEnter || onMouseMove || onMouseLeave;\n    const updatePositions = useUpdateNodePositions();\n    const onMouseEnterHandler = getMouseHandler(id, store.getState, onMouseEnter);\n    const onMouseMoveHandler = getMouseHandler(id, store.getState, onMouseMove);\n    const onMouseLeaveHandler = getMouseHandler(id, store.getState, onMouseLeave);\n    const onContextMenuHandler = getMouseHandler(id, store.getState, onContextMenu);\n    const onDoubleClickHandler = getMouseHandler(id, store.getState, onDoubleClick);\n    const onSelectNodeHandler = event => {\n      const {\n        nodeDragThreshold\n      } = store.getState();\n      if (isSelectable && (!selectNodesOnDrag || !isDraggable || nodeDragThreshold > 0)) {\n        // this handler gets called within the drag start event when selectNodesOnDrag=true\n        handleNodeClick({\n          id,\n          store,\n          nodeRef\n        });\n      }\n      if (onClick) {\n        const node = store.getState().nodeInternals.get(id);\n        if (node) {\n          onClick(event, {\n            ...node\n          });\n        }\n      }\n    };\n    const onKeyDown = event => {\n      if (isInputDOMNode(event)) {\n        return;\n      }\n      if (disableKeyboardA11y) {\n        return;\n      }\n      if (elementSelectionKeys.includes(event.key) && isSelectable) {\n        const unselect = event.key === 'Escape';\n        handleNodeClick({\n          id,\n          store,\n          unselect,\n          nodeRef\n        });\n      } else if (isDraggable && selected && Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {\n        store.setState({\n          ariaLiveMessage: `Moved selected node ${event.key.replace('Arrow', '').toLowerCase()}. New position, x: ${~~xPos}, y: ${~~yPos}`\n        });\n        updatePositions({\n          x: arrowKeyDiffs[event.key].x,\n          y: arrowKeyDiffs[event.key].y,\n          isShiftPressed: event.shiftKey\n        });\n      }\n    };\n    useEffect(() => {\n      return () => {\n        if (prevNodeRef.current) {\n          resizeObserver?.unobserve(prevNodeRef.current);\n          prevNodeRef.current = null;\n        }\n      };\n    }, []);\n    useEffect(() => {\n      if (nodeRef.current && !hidden) {\n        const currNode = nodeRef.current;\n        if (!initialized || !hasHandleBounds || prevNodeRef.current !== currNode) {\n          // At this point we always want to make sure that the node gets re-measured / re-initialized.\n          // We need to unobserve it first in case it is still observed\n          if (prevNodeRef.current) {\n            resizeObserver?.unobserve(prevNodeRef.current);\n          }\n          resizeObserver?.observe(currNode);\n          prevNodeRef.current = currNode;\n        }\n      }\n    }, [hidden, initialized, hasHandleBounds]);\n    useEffect(() => {\n      // when the user programmatically changes the source or handle position, we re-initialize the node\n      const typeChanged = prevType.current !== type;\n      const sourcePosChanged = prevSourcePosition.current !== sourcePosition;\n      const targetPosChanged = prevTargetPosition.current !== targetPosition;\n      if (nodeRef.current && (typeChanged || sourcePosChanged || targetPosChanged)) {\n        if (typeChanged) {\n          prevType.current = type;\n        }\n        if (sourcePosChanged) {\n          prevSourcePosition.current = sourcePosition;\n        }\n        if (targetPosChanged) {\n          prevTargetPosition.current = targetPosition;\n        }\n        store.getState().updateNodeDimensions([{\n          id,\n          nodeElement: nodeRef.current,\n          forceUpdate: true\n        }]);\n      }\n    }, [id, type, sourcePosition, targetPosition]);\n    const dragging = useDrag({\n      nodeRef,\n      disabled: hidden || !isDraggable,\n      noDragClassName,\n      handleSelector: dragHandle,\n      nodeId: id,\n      isSelectable,\n      selectNodesOnDrag\n    });\n    if (hidden) {\n      return null;\n    }\n    return React.createElement(\"div\", {\n      className: cc(['react-flow__node', `react-flow__node-${type}`, {\n        // this is overwritable by passing `nopan` as a class name\n        [noPanClassName]: isDraggable\n      }, className, {\n        selected,\n        selectable: isSelectable,\n        parent: isParent,\n        dragging\n      }]),\n      ref: nodeRef,\n      style: {\n        zIndex,\n        transform: `translate(${xPosOrigin}px,${yPosOrigin}px)`,\n        pointerEvents: hasPointerEvents ? 'all' : 'none',\n        visibility: initialized ? 'visible' : 'hidden',\n        ...style\n      },\n      \"data-id\": id,\n      \"data-testid\": `rf__node-${id}`,\n      onMouseEnter: onMouseEnterHandler,\n      onMouseMove: onMouseMoveHandler,\n      onMouseLeave: onMouseLeaveHandler,\n      onContextMenu: onContextMenuHandler,\n      onClick: onSelectNodeHandler,\n      onDoubleClick: onDoubleClickHandler,\n      onKeyDown: isFocusable ? onKeyDown : undefined,\n      tabIndex: isFocusable ? 0 : undefined,\n      role: isFocusable ? 'button' : undefined,\n      \"aria-describedby\": disableKeyboardA11y ? undefined : `${ARIA_NODE_DESC_KEY}-${rfId}`,\n      \"aria-label\": ariaLabel\n    }, React.createElement(Provider, {\n      value: id\n    }, React.createElement(NodeComponent, {\n      id: id,\n      data: data,\n      type: type,\n      xPos: xPos,\n      yPos: yPos,\n      selected: selected,\n      isConnectable: isConnectable,\n      sourcePosition: sourcePosition,\n      targetPosition: targetPosition,\n      dragging: dragging,\n      dragHandle: dragHandle,\n      zIndex: zIndex\n    })));\n  };\n  NodeWrapper.displayName = 'NodeWrapper';\n  return memo(NodeWrapper);\n};\n\n/**\n * The nodes selection rectangle gets displayed when a user\n * made a selection with on or several nodes\n */\nconst selector$7 = s => {\n  const selectedNodes = s.getNodes().filter(n => n.selected);\n  return {\n    ...getNodesBounds(selectedNodes, s.nodeOrigin),\n    transformString: `translate(${s.transform[0]}px,${s.transform[1]}px) scale(${s.transform[2]})`,\n    userSelectionActive: s.userSelectionActive\n  };\n};\nfunction NodesSelection({\n  onSelectionContextMenu,\n  noPanClassName,\n  disableKeyboardA11y\n}) {\n  const store = useStoreApi();\n  const {\n    width,\n    height,\n    x: left,\n    y: top,\n    transformString,\n    userSelectionActive\n  } = useStore(selector$7, shallow);\n  const updatePositions = useUpdateNodePositions();\n  const nodeRef = useRef(null);\n  useEffect(() => {\n    if (!disableKeyboardA11y) {\n      nodeRef.current?.focus({\n        preventScroll: true\n      });\n    }\n  }, [disableKeyboardA11y]);\n  useDrag({\n    nodeRef\n  });\n  if (userSelectionActive || !width || !height) {\n    return null;\n  }\n  const onContextMenu = onSelectionContextMenu ? event => {\n    const selectedNodes = store.getState().getNodes().filter(n => n.selected);\n    onSelectionContextMenu(event, selectedNodes);\n  } : undefined;\n  const onKeyDown = event => {\n    if (Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {\n      updatePositions({\n        x: arrowKeyDiffs[event.key].x,\n        y: arrowKeyDiffs[event.key].y,\n        isShiftPressed: event.shiftKey\n      });\n    }\n  };\n  return React.createElement(\"div\", {\n    className: cc(['react-flow__nodesselection', 'react-flow__container', noPanClassName]),\n    style: {\n      transform: transformString\n    }\n  }, React.createElement(\"div\", {\n    ref: nodeRef,\n    className: \"react-flow__nodesselection-rect\",\n    onContextMenu: onContextMenu,\n    tabIndex: disableKeyboardA11y ? undefined : -1,\n    onKeyDown: disableKeyboardA11y ? undefined : onKeyDown,\n    style: {\n      width,\n      height,\n      top,\n      left\n    }\n  }));\n}\nvar NodesSelection$1 = memo(NodesSelection);\nconst selector$6 = s => s.nodesSelectionActive;\nconst FlowRenderer = ({\n  children,\n  onPaneClick,\n  onPaneMouseEnter,\n  onPaneMouseMove,\n  onPaneMouseLeave,\n  onPaneContextMenu,\n  onPaneScroll,\n  deleteKeyCode,\n  onMove,\n  onMoveStart,\n  onMoveEnd,\n  selectionKeyCode,\n  selectionOnDrag,\n  selectionMode,\n  onSelectionStart,\n  onSelectionEnd,\n  multiSelectionKeyCode,\n  panActivationKeyCode,\n  zoomActivationKeyCode,\n  elementsSelectable,\n  zoomOnScroll,\n  zoomOnPinch,\n  panOnScroll: _panOnScroll,\n  panOnScrollSpeed,\n  panOnScrollMode,\n  zoomOnDoubleClick,\n  panOnDrag: _panOnDrag,\n  defaultViewport,\n  translateExtent,\n  minZoom,\n  maxZoom,\n  preventScrolling,\n  onSelectionContextMenu,\n  noWheelClassName,\n  noPanClassName,\n  disableKeyboardA11y\n}) => {\n  const nodesSelectionActive = useStore(selector$6);\n  const selectionKeyPressed = useKeyPress(selectionKeyCode);\n  const panActivationKeyPressed = useKeyPress(panActivationKeyCode);\n  const panOnDrag = panActivationKeyPressed || _panOnDrag;\n  const panOnScroll = panActivationKeyPressed || _panOnScroll;\n  const isSelecting = selectionKeyPressed || selectionOnDrag && panOnDrag !== true;\n  useGlobalKeyHandler({\n    deleteKeyCode,\n    multiSelectionKeyCode\n  });\n  return React.createElement(ZoomPane, {\n    onMove: onMove,\n    onMoveStart: onMoveStart,\n    onMoveEnd: onMoveEnd,\n    onPaneContextMenu: onPaneContextMenu,\n    elementsSelectable: elementsSelectable,\n    zoomOnScroll: zoomOnScroll,\n    zoomOnPinch: zoomOnPinch,\n    panOnScroll: panOnScroll,\n    panOnScrollSpeed: panOnScrollSpeed,\n    panOnScrollMode: panOnScrollMode,\n    zoomOnDoubleClick: zoomOnDoubleClick,\n    panOnDrag: !selectionKeyPressed && panOnDrag,\n    defaultViewport: defaultViewport,\n    translateExtent: translateExtent,\n    minZoom: minZoom,\n    maxZoom: maxZoom,\n    zoomActivationKeyCode: zoomActivationKeyCode,\n    preventScrolling: preventScrolling,\n    noWheelClassName: noWheelClassName,\n    noPanClassName: noPanClassName\n  }, React.createElement(Pane, {\n    onSelectionStart: onSelectionStart,\n    onSelectionEnd: onSelectionEnd,\n    onPaneClick: onPaneClick,\n    onPaneMouseEnter: onPaneMouseEnter,\n    onPaneMouseMove: onPaneMouseMove,\n    onPaneMouseLeave: onPaneMouseLeave,\n    onPaneContextMenu: onPaneContextMenu,\n    onPaneScroll: onPaneScroll,\n    panOnDrag: panOnDrag,\n    isSelecting: !!isSelecting,\n    selectionMode: selectionMode\n  }, children, nodesSelectionActive && React.createElement(NodesSelection$1, {\n    onSelectionContextMenu: onSelectionContextMenu,\n    noPanClassName: noPanClassName,\n    disableKeyboardA11y: disableKeyboardA11y\n  })));\n};\nFlowRenderer.displayName = 'FlowRenderer';\nvar FlowRenderer$1 = memo(FlowRenderer);\nfunction useVisibleNodes(onlyRenderVisible) {\n  const nodes = useStore(useCallback(s => onlyRenderVisible ? getNodesInside(s.nodeInternals, {\n    x: 0,\n    y: 0,\n    width: s.width,\n    height: s.height\n  }, s.transform, true) : s.getNodes(), [onlyRenderVisible]));\n  return nodes;\n}\nfunction createNodeTypes(nodeTypes) {\n  const standardTypes = {\n    input: wrapNode(nodeTypes.input || InputNode$1),\n    default: wrapNode(nodeTypes.default || DefaultNode$1),\n    output: wrapNode(nodeTypes.output || OutputNode$1),\n    group: wrapNode(nodeTypes.group || GroupNode)\n  };\n  const wrappedTypes = {};\n  const specialTypes = Object.keys(nodeTypes).filter(k => !['input', 'default', 'output', 'group'].includes(k)).reduce((res, key) => {\n    res[key] = wrapNode(nodeTypes[key] || DefaultNode$1);\n    return res;\n  }, wrappedTypes);\n  return {\n    ...standardTypes,\n    ...specialTypes\n  };\n}\nconst getPositionWithOrigin = ({\n  x,\n  y,\n  width,\n  height,\n  origin\n}) => {\n  if (!width || !height) {\n    return {\n      x,\n      y\n    };\n  }\n  if (origin[0] < 0 || origin[1] < 0 || origin[0] > 1 || origin[1] > 1) {\n    return {\n      x,\n      y\n    };\n  }\n  return {\n    x: x - width * origin[0],\n    y: y - height * origin[1]\n  };\n};\nconst selector$5 = s => ({\n  nodesDraggable: s.nodesDraggable,\n  nodesConnectable: s.nodesConnectable,\n  nodesFocusable: s.nodesFocusable,\n  elementsSelectable: s.elementsSelectable,\n  updateNodeDimensions: s.updateNodeDimensions,\n  onError: s.onError\n});\nconst NodeRenderer = props => {\n  const {\n    nodesDraggable,\n    nodesConnectable,\n    nodesFocusable,\n    elementsSelectable,\n    updateNodeDimensions,\n    onError\n  } = useStore(selector$5, shallow);\n  const nodes = useVisibleNodes(props.onlyRenderVisibleElements);\n  const resizeObserverRef = useRef();\n  const resizeObserver = useMemo(() => {\n    if (typeof ResizeObserver === 'undefined') {\n      return null;\n    }\n    const observer = new ResizeObserver(entries => {\n      const updates = entries.map(entry => ({\n        id: entry.target.getAttribute('data-id'),\n        nodeElement: entry.target,\n        forceUpdate: true\n      }));\n      updateNodeDimensions(updates);\n    });\n    resizeObserverRef.current = observer;\n    return observer;\n  }, []);\n  useEffect(() => {\n    return () => {\n      resizeObserverRef?.current?.disconnect();\n    };\n  }, []);\n  return React.createElement(\"div\", {\n    className: \"react-flow__nodes\",\n    style: containerStyle\n  }, nodes.map(node => {\n    let nodeType = node.type || 'default';\n    if (!props.nodeTypes[nodeType]) {\n      onError?.('003', errorMessages['error003'](nodeType));\n      nodeType = 'default';\n    }\n    const NodeComponent = props.nodeTypes[nodeType] || props.nodeTypes.default;\n    const isDraggable = !!(node.draggable || nodesDraggable && typeof node.draggable === 'undefined');\n    const isSelectable = !!(node.selectable || elementsSelectable && typeof node.selectable === 'undefined');\n    const isConnectable = !!(node.connectable || nodesConnectable && typeof node.connectable === 'undefined');\n    const isFocusable = !!(node.focusable || nodesFocusable && typeof node.focusable === 'undefined');\n    const clampedPosition = props.nodeExtent ? clampPosition(node.positionAbsolute, props.nodeExtent) : node.positionAbsolute;\n    const posX = clampedPosition?.x ?? 0;\n    const posY = clampedPosition?.y ?? 0;\n    const posOrigin = getPositionWithOrigin({\n      x: posX,\n      y: posY,\n      width: node.width ?? 0,\n      height: node.height ?? 0,\n      origin: props.nodeOrigin\n    });\n    return React.createElement(NodeComponent, {\n      key: node.id,\n      id: node.id,\n      className: node.className,\n      style: node.style,\n      type: nodeType,\n      data: node.data,\n      sourcePosition: node.sourcePosition || Position.Bottom,\n      targetPosition: node.targetPosition || Position.Top,\n      hidden: node.hidden,\n      xPos: posX,\n      yPos: posY,\n      xPosOrigin: posOrigin.x,\n      yPosOrigin: posOrigin.y,\n      selectNodesOnDrag: props.selectNodesOnDrag,\n      onClick: props.onNodeClick,\n      onMouseEnter: props.onNodeMouseEnter,\n      onMouseMove: props.onNodeMouseMove,\n      onMouseLeave: props.onNodeMouseLeave,\n      onContextMenu: props.onNodeContextMenu,\n      onDoubleClick: props.onNodeDoubleClick,\n      selected: !!node.selected,\n      isDraggable: isDraggable,\n      isSelectable: isSelectable,\n      isConnectable: isConnectable,\n      isFocusable: isFocusable,\n      resizeObserver: resizeObserver,\n      dragHandle: node.dragHandle,\n      zIndex: node[internalsSymbol]?.z ?? 0,\n      isParent: !!node[internalsSymbol]?.isParent,\n      noDragClassName: props.noDragClassName,\n      noPanClassName: props.noPanClassName,\n      initialized: !!node.width && !!node.height,\n      rfId: props.rfId,\n      disableKeyboardA11y: props.disableKeyboardA11y,\n      ariaLabel: node.ariaLabel,\n      hasHandleBounds: !!node[internalsSymbol]?.handleBounds\n    });\n  }));\n};\nNodeRenderer.displayName = 'NodeRenderer';\nvar NodeRenderer$1 = memo(NodeRenderer);\nconst shiftX = (x, shift, position) => {\n  if (position === Position.Left) return x - shift;\n  if (position === Position.Right) return x + shift;\n  return x;\n};\nconst shiftY = (y, shift, position) => {\n  if (position === Position.Top) return y - shift;\n  if (position === Position.Bottom) return y + shift;\n  return y;\n};\nconst EdgeUpdaterClassName = 'react-flow__edgeupdater';\nconst EdgeAnchor = ({\n  position,\n  centerX,\n  centerY,\n  radius = 10,\n  onMouseDown,\n  onMouseEnter,\n  onMouseOut,\n  type\n}) => React.createElement(\"circle\", {\n  onMouseDown: onMouseDown,\n  onMouseEnter: onMouseEnter,\n  onMouseOut: onMouseOut,\n  className: cc([EdgeUpdaterClassName, `${EdgeUpdaterClassName}-${type}`]),\n  cx: shiftX(centerX, radius, position),\n  cy: shiftY(centerY, radius, position),\n  r: radius,\n  stroke: \"transparent\",\n  fill: \"transparent\"\n});\nconst alwaysValidConnection = () => true;\nvar wrapEdge = EdgeComponent => {\n  const EdgeWrapper = ({\n    id,\n    className,\n    type,\n    data,\n    onClick,\n    onEdgeDoubleClick,\n    selected,\n    animated,\n    label,\n    labelStyle,\n    labelShowBg,\n    labelBgStyle,\n    labelBgPadding,\n    labelBgBorderRadius,\n    style,\n    source,\n    target,\n    sourceX,\n    sourceY,\n    targetX,\n    targetY,\n    sourcePosition,\n    targetPosition,\n    elementsSelectable,\n    hidden,\n    sourceHandleId,\n    targetHandleId,\n    onContextMenu,\n    onMouseEnter,\n    onMouseMove,\n    onMouseLeave,\n    edgeUpdaterRadius,\n    onEdgeUpdate,\n    onEdgeUpdateStart,\n    onEdgeUpdateEnd,\n    markerEnd,\n    markerStart,\n    rfId,\n    ariaLabel,\n    isFocusable,\n    isUpdatable,\n    pathOptions,\n    interactionWidth,\n    disableKeyboardA11y\n  }) => {\n    const edgeRef = useRef(null);\n    const [updateHover, setUpdateHover] = useState(false);\n    const [updating, setUpdating] = useState(false);\n    const store = useStoreApi();\n    const markerStartUrl = useMemo(() => `url('#${getMarkerId(markerStart, rfId)}')`, [markerStart, rfId]);\n    const markerEndUrl = useMemo(() => `url('#${getMarkerId(markerEnd, rfId)}')`, [markerEnd, rfId]);\n    if (hidden) {\n      return null;\n    }\n    const onEdgeClick = event => {\n      const {\n        edges,\n        addSelectedEdges,\n        unselectNodesAndEdges,\n        multiSelectionActive\n      } = store.getState();\n      const edge = edges.find(e => e.id === id);\n      if (!edge) {\n        return;\n      }\n      if (elementsSelectable) {\n        store.setState({\n          nodesSelectionActive: false\n        });\n        if (edge.selected && multiSelectionActive) {\n          unselectNodesAndEdges({\n            nodes: [],\n            edges: [edge]\n          });\n          edgeRef.current?.blur();\n        } else {\n          addSelectedEdges([id]);\n        }\n      }\n      if (onClick) {\n        onClick(event, edge);\n      }\n    };\n    const onEdgeDoubleClickHandler = getMouseHandler$1(id, store.getState, onEdgeDoubleClick);\n    const onEdgeContextMenu = getMouseHandler$1(id, store.getState, onContextMenu);\n    const onEdgeMouseEnter = getMouseHandler$1(id, store.getState, onMouseEnter);\n    const onEdgeMouseMove = getMouseHandler$1(id, store.getState, onMouseMove);\n    const onEdgeMouseLeave = getMouseHandler$1(id, store.getState, onMouseLeave);\n    const handleEdgeUpdater = (event, isSourceHandle) => {\n      // avoid triggering edge updater if mouse btn is not left\n      if (event.button !== 0) {\n        return;\n      }\n      const {\n        edges,\n        isValidConnection: isValidConnectionStore\n      } = store.getState();\n      const nodeId = isSourceHandle ? target : source;\n      const handleId = (isSourceHandle ? targetHandleId : sourceHandleId) || null;\n      const handleType = isSourceHandle ? 'target' : 'source';\n      const isValidConnection = isValidConnectionStore || alwaysValidConnection;\n      const isTarget = isSourceHandle;\n      const edge = edges.find(e => e.id === id);\n      setUpdating(true);\n      onEdgeUpdateStart?.(event, edge, handleType);\n      const _onEdgeUpdateEnd = evt => {\n        setUpdating(false);\n        onEdgeUpdateEnd?.(evt, edge, handleType);\n      };\n      const onConnectEdge = connection => onEdgeUpdate?.(edge, connection);\n      handlePointerDown({\n        event,\n        handleId,\n        nodeId,\n        onConnect: onConnectEdge,\n        isTarget,\n        getState: store.getState,\n        setState: store.setState,\n        isValidConnection,\n        edgeUpdaterType: handleType,\n        onEdgeUpdateEnd: _onEdgeUpdateEnd\n      });\n    };\n    const onEdgeUpdaterSourceMouseDown = event => handleEdgeUpdater(event, true);\n    const onEdgeUpdaterTargetMouseDown = event => handleEdgeUpdater(event, false);\n    const onEdgeUpdaterMouseEnter = () => setUpdateHover(true);\n    const onEdgeUpdaterMouseOut = () => setUpdateHover(false);\n    const inactive = !elementsSelectable && !onClick;\n    const onKeyDown = event => {\n      if (!disableKeyboardA11y && elementSelectionKeys.includes(event.key) && elementsSelectable) {\n        const {\n          unselectNodesAndEdges,\n          addSelectedEdges,\n          edges\n        } = store.getState();\n        const unselect = event.key === 'Escape';\n        if (unselect) {\n          edgeRef.current?.blur();\n          unselectNodesAndEdges({\n            edges: [edges.find(e => e.id === id)]\n          });\n        } else {\n          addSelectedEdges([id]);\n        }\n      }\n    };\n    return React.createElement(\"g\", {\n      className: cc(['react-flow__edge', `react-flow__edge-${type}`, className, {\n        selected,\n        animated,\n        inactive,\n        updating: updateHover\n      }]),\n      onClick: onEdgeClick,\n      onDoubleClick: onEdgeDoubleClickHandler,\n      onContextMenu: onEdgeContextMenu,\n      onMouseEnter: onEdgeMouseEnter,\n      onMouseMove: onEdgeMouseMove,\n      onMouseLeave: onEdgeMouseLeave,\n      onKeyDown: isFocusable ? onKeyDown : undefined,\n      tabIndex: isFocusable ? 0 : undefined,\n      role: isFocusable ? 'button' : 'img',\n      \"data-testid\": `rf__edge-${id}`,\n      \"aria-label\": ariaLabel === null ? undefined : ariaLabel ? ariaLabel : `Edge from ${source} to ${target}`,\n      \"aria-describedby\": isFocusable ? `${ARIA_EDGE_DESC_KEY}-${rfId}` : undefined,\n      ref: edgeRef\n    }, !updating && React.createElement(EdgeComponent, {\n      id: id,\n      source: source,\n      target: target,\n      selected: selected,\n      animated: animated,\n      label: label,\n      labelStyle: labelStyle,\n      labelShowBg: labelShowBg,\n      labelBgStyle: labelBgStyle,\n      labelBgPadding: labelBgPadding,\n      labelBgBorderRadius: labelBgBorderRadius,\n      data: data,\n      style: style,\n      sourceX: sourceX,\n      sourceY: sourceY,\n      targetX: targetX,\n      targetY: targetY,\n      sourcePosition: sourcePosition,\n      targetPosition: targetPosition,\n      sourceHandleId: sourceHandleId,\n      targetHandleId: targetHandleId,\n      markerStart: markerStartUrl,\n      markerEnd: markerEndUrl,\n      pathOptions: pathOptions,\n      interactionWidth: interactionWidth\n    }), isUpdatable && React.createElement(React.Fragment, null, (isUpdatable === 'source' || isUpdatable === true) && React.createElement(EdgeAnchor, {\n      position: sourcePosition,\n      centerX: sourceX,\n      centerY: sourceY,\n      radius: edgeUpdaterRadius,\n      onMouseDown: onEdgeUpdaterSourceMouseDown,\n      onMouseEnter: onEdgeUpdaterMouseEnter,\n      onMouseOut: onEdgeUpdaterMouseOut,\n      type: \"source\"\n    }), (isUpdatable === 'target' || isUpdatable === true) && React.createElement(EdgeAnchor, {\n      position: targetPosition,\n      centerX: targetX,\n      centerY: targetY,\n      radius: edgeUpdaterRadius,\n      onMouseDown: onEdgeUpdaterTargetMouseDown,\n      onMouseEnter: onEdgeUpdaterMouseEnter,\n      onMouseOut: onEdgeUpdaterMouseOut,\n      type: \"target\"\n    })));\n  };\n  EdgeWrapper.displayName = 'EdgeWrapper';\n  return memo(EdgeWrapper);\n};\nfunction createEdgeTypes(edgeTypes) {\n  const standardTypes = {\n    default: wrapEdge(edgeTypes.default || BezierEdge),\n    straight: wrapEdge(edgeTypes.bezier || StraightEdge),\n    step: wrapEdge(edgeTypes.step || StepEdge),\n    smoothstep: wrapEdge(edgeTypes.step || SmoothStepEdge),\n    simplebezier: wrapEdge(edgeTypes.simplebezier || SimpleBezierEdge)\n  };\n  const wrappedTypes = {};\n  const specialTypes = Object.keys(edgeTypes).filter(k => !['default', 'bezier'].includes(k)).reduce((res, key) => {\n    res[key] = wrapEdge(edgeTypes[key] || BezierEdge);\n    return res;\n  }, wrappedTypes);\n  return {\n    ...standardTypes,\n    ...specialTypes\n  };\n}\nfunction getHandlePosition(position, nodeRect, handle = null) {\n  const x = (handle?.x || 0) + nodeRect.x;\n  const y = (handle?.y || 0) + nodeRect.y;\n  const width = handle?.width || nodeRect.width;\n  const height = handle?.height || nodeRect.height;\n  switch (position) {\n    case Position.Top:\n      return {\n        x: x + width / 2,\n        y\n      };\n    case Position.Right:\n      return {\n        x: x + width,\n        y: y + height / 2\n      };\n    case Position.Bottom:\n      return {\n        x: x + width / 2,\n        y: y + height\n      };\n    case Position.Left:\n      return {\n        x,\n        y: y + height / 2\n      };\n  }\n}\nfunction getHandle(bounds, handleId) {\n  if (!bounds) {\n    return null;\n  }\n  if (bounds.length === 1 || !handleId) {\n    return bounds[0];\n  } else if (handleId) {\n    return bounds.find(d => d.id === handleId) || null;\n  }\n  return null;\n}\nconst getEdgePositions = (sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition) => {\n  const sourceHandlePos = getHandlePosition(sourcePosition, sourceNodeRect, sourceHandle);\n  const targetHandlePos = getHandlePosition(targetPosition, targetNodeRect, targetHandle);\n  return {\n    sourceX: sourceHandlePos.x,\n    sourceY: sourceHandlePos.y,\n    targetX: targetHandlePos.x,\n    targetY: targetHandlePos.y\n  };\n};\nfunction isEdgeVisible({\n  sourcePos,\n  targetPos,\n  sourceWidth,\n  sourceHeight,\n  targetWidth,\n  targetHeight,\n  width,\n  height,\n  transform\n}) {\n  const edgeBox = {\n    x: Math.min(sourcePos.x, targetPos.x),\n    y: Math.min(sourcePos.y, targetPos.y),\n    x2: Math.max(sourcePos.x + sourceWidth, targetPos.x + targetWidth),\n    y2: Math.max(sourcePos.y + sourceHeight, targetPos.y + targetHeight)\n  };\n  if (edgeBox.x === edgeBox.x2) {\n    edgeBox.x2 += 1;\n  }\n  if (edgeBox.y === edgeBox.y2) {\n    edgeBox.y2 += 1;\n  }\n  const viewBox = rectToBox({\n    x: (0 - transform[0]) / transform[2],\n    y: (0 - transform[1]) / transform[2],\n    width: width / transform[2],\n    height: height / transform[2]\n  });\n  const xOverlap = Math.max(0, Math.min(viewBox.x2, edgeBox.x2) - Math.max(viewBox.x, edgeBox.x));\n  const yOverlap = Math.max(0, Math.min(viewBox.y2, edgeBox.y2) - Math.max(viewBox.y, edgeBox.y));\n  const overlappingArea = Math.ceil(xOverlap * yOverlap);\n  return overlappingArea > 0;\n}\nfunction getNodeData(node) {\n  const handleBounds = node?.[internalsSymbol]?.handleBounds || null;\n  const isValid = handleBounds && node?.width && node?.height && typeof node?.positionAbsolute?.x !== 'undefined' && typeof node?.positionAbsolute?.y !== 'undefined';\n  return [{\n    x: node?.positionAbsolute?.x || 0,\n    y: node?.positionAbsolute?.y || 0,\n    width: node?.width || 0,\n    height: node?.height || 0\n  }, handleBounds, !!isValid];\n}\nconst defaultEdgeTree = [{\n  level: 0,\n  isMaxLevel: true,\n  edges: []\n}];\nfunction groupEdgesByZLevel(edges, nodeInternals, elevateEdgesOnSelect = false) {\n  let maxLevel = -1;\n  const levelLookup = edges.reduce((tree, edge) => {\n    const hasZIndex = isNumeric(edge.zIndex);\n    let z = hasZIndex ? edge.zIndex : 0;\n    if (elevateEdgesOnSelect) {\n      const targetNode = nodeInternals.get(edge.target);\n      const sourceNode = nodeInternals.get(edge.source);\n      const edgeOrConnectedNodeSelected = edge.selected || targetNode?.selected || sourceNode?.selected;\n      const selectedZIndex = Math.max(sourceNode?.[internalsSymbol]?.z || 0, targetNode?.[internalsSymbol]?.z || 0, 1000);\n      z = (hasZIndex ? edge.zIndex : 0) + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n    }\n    if (tree[z]) {\n      tree[z].push(edge);\n    } else {\n      tree[z] = [edge];\n    }\n    maxLevel = z > maxLevel ? z : maxLevel;\n    return tree;\n  }, {});\n  const edgeTree = Object.entries(levelLookup).map(([key, edges]) => {\n    const level = +key;\n    return {\n      edges,\n      level,\n      isMaxLevel: level === maxLevel\n    };\n  });\n  if (edgeTree.length === 0) {\n    return defaultEdgeTree;\n  }\n  return edgeTree;\n}\nfunction useVisibleEdges(onlyRenderVisible, nodeInternals, elevateEdgesOnSelect) {\n  const edges = useStore(useCallback(s => {\n    if (!onlyRenderVisible) {\n      return s.edges;\n    }\n    return s.edges.filter(e => {\n      const sourceNode = nodeInternals.get(e.source);\n      const targetNode = nodeInternals.get(e.target);\n      return sourceNode?.width && sourceNode?.height && targetNode?.width && targetNode?.height && isEdgeVisible({\n        sourcePos: sourceNode.positionAbsolute || {\n          x: 0,\n          y: 0\n        },\n        targetPos: targetNode.positionAbsolute || {\n          x: 0,\n          y: 0\n        },\n        sourceWidth: sourceNode.width,\n        sourceHeight: sourceNode.height,\n        targetWidth: targetNode.width,\n        targetHeight: targetNode.height,\n        width: s.width,\n        height: s.height,\n        transform: s.transform\n      });\n    });\n  }, [onlyRenderVisible, nodeInternals]));\n  return groupEdgesByZLevel(edges, nodeInternals, elevateEdgesOnSelect);\n}\nconst ArrowSymbol = ({\n  color = 'none',\n  strokeWidth = 1\n}) => {\n  return React.createElement(\"polyline\", {\n    style: {\n      stroke: color,\n      strokeWidth\n    },\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    fill: \"none\",\n    points: \"-5,-4 0,0 -5,4\"\n  });\n};\nconst ArrowClosedSymbol = ({\n  color = 'none',\n  strokeWidth = 1\n}) => {\n  return React.createElement(\"polyline\", {\n    style: {\n      stroke: color,\n      fill: color,\n      strokeWidth\n    },\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    points: \"-5,-4 0,0 -5,4 -5,-4\"\n  });\n};\nconst MarkerSymbols = {\n  [MarkerType.Arrow]: ArrowSymbol,\n  [MarkerType.ArrowClosed]: ArrowClosedSymbol\n};\nfunction useMarkerSymbol(type) {\n  const store = useStoreApi();\n  const symbol = useMemo(() => {\n    const symbolExists = Object.prototype.hasOwnProperty.call(MarkerSymbols, type);\n    if (!symbolExists) {\n      store.getState().onError?.('009', errorMessages['error009'](type));\n      return null;\n    }\n    return MarkerSymbols[type];\n  }, [type]);\n  return symbol;\n}\nconst Marker = ({\n  id,\n  type,\n  color,\n  width = 12.5,\n  height = 12.5,\n  markerUnits = 'strokeWidth',\n  strokeWidth,\n  orient = 'auto-start-reverse'\n}) => {\n  const Symbol = useMarkerSymbol(type);\n  if (!Symbol) {\n    return null;\n  }\n  return React.createElement(\"marker\", {\n    className: \"react-flow__arrowhead\",\n    id: id,\n    markerWidth: `${width}`,\n    markerHeight: `${height}`,\n    viewBox: \"-10 -10 20 20\",\n    markerUnits: markerUnits,\n    orient: orient,\n    refX: \"0\",\n    refY: \"0\"\n  }, React.createElement(Symbol, {\n    color: color,\n    strokeWidth: strokeWidth\n  }));\n};\nconst markerSelector = ({\n  defaultColor,\n  rfId\n}) => s => {\n  const ids = [];\n  return s.edges.reduce((markers, edge) => {\n    [edge.markerStart, edge.markerEnd].forEach(marker => {\n      if (marker && typeof marker === 'object') {\n        const markerId = getMarkerId(marker, rfId);\n        if (!ids.includes(markerId)) {\n          markers.push({\n            id: markerId,\n            color: marker.color || defaultColor,\n            ...marker\n          });\n          ids.push(markerId);\n        }\n      }\n    });\n    return markers;\n  }, []).sort((a, b) => a.id.localeCompare(b.id));\n};\n// when you have multiple flows on a page and you hide the first one, the other ones have no markers anymore\n// when they do have markers with the same ids. To prevent this the user can pass a unique id to the react flow wrapper\n// that we can then use for creating our unique marker ids\nconst MarkerDefinitions = ({\n  defaultColor,\n  rfId\n}) => {\n  const markers = useStore(useCallback(markerSelector({\n    defaultColor,\n    rfId\n  }), [defaultColor, rfId]),\n  // the id includes all marker options, so we just need to look at that part of the marker\n  (a, b) => !(a.length !== b.length || a.some((m, i) => m.id !== b[i].id)));\n  return React.createElement(\"defs\", null, markers.map(marker => React.createElement(Marker, {\n    id: marker.id,\n    key: marker.id,\n    type: marker.type,\n    color: marker.color,\n    width: marker.width,\n    height: marker.height,\n    markerUnits: marker.markerUnits,\n    strokeWidth: marker.strokeWidth,\n    orient: marker.orient\n  })));\n};\nMarkerDefinitions.displayName = 'MarkerDefinitions';\nvar MarkerDefinitions$1 = memo(MarkerDefinitions);\nconst selector$4 = s => ({\n  nodesConnectable: s.nodesConnectable,\n  edgesFocusable: s.edgesFocusable,\n  edgesUpdatable: s.edgesUpdatable,\n  elementsSelectable: s.elementsSelectable,\n  width: s.width,\n  height: s.height,\n  connectionMode: s.connectionMode,\n  nodeInternals: s.nodeInternals,\n  onError: s.onError\n});\nconst EdgeRenderer = ({\n  defaultMarkerColor,\n  onlyRenderVisibleElements,\n  elevateEdgesOnSelect,\n  rfId,\n  edgeTypes,\n  noPanClassName,\n  onEdgeUpdate,\n  onEdgeContextMenu,\n  onEdgeMouseEnter,\n  onEdgeMouseMove,\n  onEdgeMouseLeave,\n  onEdgeClick,\n  edgeUpdaterRadius,\n  onEdgeDoubleClick,\n  onEdgeUpdateStart,\n  onEdgeUpdateEnd,\n  children,\n  disableKeyboardA11y\n}) => {\n  const {\n    edgesFocusable,\n    edgesUpdatable,\n    elementsSelectable,\n    width,\n    height,\n    connectionMode,\n    nodeInternals,\n    onError\n  } = useStore(selector$4, shallow);\n  const edgeTree = useVisibleEdges(onlyRenderVisibleElements, nodeInternals, elevateEdgesOnSelect);\n  if (!width) {\n    return null;\n  }\n  return React.createElement(React.Fragment, null, edgeTree.map(({\n    level,\n    edges,\n    isMaxLevel\n  }) => React.createElement(\"svg\", {\n    key: level,\n    style: {\n      zIndex: level\n    },\n    width: width,\n    height: height,\n    className: \"react-flow__edges react-flow__container\"\n  }, isMaxLevel && React.createElement(MarkerDefinitions$1, {\n    defaultColor: defaultMarkerColor,\n    rfId: rfId\n  }), React.createElement(\"g\", null, edges.map(edge => {\n    const [sourceNodeRect, sourceHandleBounds, sourceIsValid] = getNodeData(nodeInternals.get(edge.source));\n    const [targetNodeRect, targetHandleBounds, targetIsValid] = getNodeData(nodeInternals.get(edge.target));\n    if (!sourceIsValid || !targetIsValid) {\n      return null;\n    }\n    let edgeType = edge.type || 'default';\n    if (!edgeTypes[edgeType]) {\n      onError?.('011', errorMessages['error011'](edgeType));\n      edgeType = 'default';\n    }\n    const EdgeComponent = edgeTypes[edgeType] || edgeTypes.default;\n    // when connection type is loose we can define all handles as sources and connect source -> source\n    const targetNodeHandles = connectionMode === ConnectionMode.Strict ? targetHandleBounds.target : (targetHandleBounds.target ?? []).concat(targetHandleBounds.source ?? []);\n    const sourceHandle = getHandle(sourceHandleBounds.source, edge.sourceHandle);\n    const targetHandle = getHandle(targetNodeHandles, edge.targetHandle);\n    const sourcePosition = sourceHandle?.position || Position.Bottom;\n    const targetPosition = targetHandle?.position || Position.Top;\n    const isFocusable = !!(edge.focusable || edgesFocusable && typeof edge.focusable === 'undefined');\n    const isUpdatable = typeof onEdgeUpdate !== 'undefined' && (edge.updatable || edgesUpdatable && typeof edge.updatable === 'undefined');\n    if (!sourceHandle || !targetHandle) {\n      onError?.('008', errorMessages['error008'](sourceHandle, edge));\n      return null;\n    }\n    const {\n      sourceX,\n      sourceY,\n      targetX,\n      targetY\n    } = getEdgePositions(sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition);\n    return React.createElement(EdgeComponent, {\n      key: edge.id,\n      id: edge.id,\n      className: cc([edge.className, noPanClassName]),\n      type: edgeType,\n      data: edge.data,\n      selected: !!edge.selected,\n      animated: !!edge.animated,\n      hidden: !!edge.hidden,\n      label: edge.label,\n      labelStyle: edge.labelStyle,\n      labelShowBg: edge.labelShowBg,\n      labelBgStyle: edge.labelBgStyle,\n      labelBgPadding: edge.labelBgPadding,\n      labelBgBorderRadius: edge.labelBgBorderRadius,\n      style: edge.style,\n      source: edge.source,\n      target: edge.target,\n      sourceHandleId: edge.sourceHandle,\n      targetHandleId: edge.targetHandle,\n      markerEnd: edge.markerEnd,\n      markerStart: edge.markerStart,\n      sourceX: sourceX,\n      sourceY: sourceY,\n      targetX: targetX,\n      targetY: targetY,\n      sourcePosition: sourcePosition,\n      targetPosition: targetPosition,\n      elementsSelectable: elementsSelectable,\n      onEdgeUpdate: onEdgeUpdate,\n      onContextMenu: onEdgeContextMenu,\n      onMouseEnter: onEdgeMouseEnter,\n      onMouseMove: onEdgeMouseMove,\n      onMouseLeave: onEdgeMouseLeave,\n      onClick: onEdgeClick,\n      edgeUpdaterRadius: edgeUpdaterRadius,\n      onEdgeDoubleClick: onEdgeDoubleClick,\n      onEdgeUpdateStart: onEdgeUpdateStart,\n      onEdgeUpdateEnd: onEdgeUpdateEnd,\n      rfId: rfId,\n      ariaLabel: edge.ariaLabel,\n      isFocusable: isFocusable,\n      isUpdatable: isUpdatable,\n      pathOptions: 'pathOptions' in edge ? edge.pathOptions : undefined,\n      interactionWidth: edge.interactionWidth,\n      disableKeyboardA11y: disableKeyboardA11y\n    });\n  })))), children);\n};\nEdgeRenderer.displayName = 'EdgeRenderer';\nvar EdgeRenderer$1 = memo(EdgeRenderer);\nconst selector$3 = s => `translate(${s.transform[0]}px,${s.transform[1]}px) scale(${s.transform[2]})`;\nfunction Viewport({\n  children\n}) {\n  const transform = useStore(selector$3);\n  return React.createElement(\"div\", {\n    className: \"react-flow__viewport react-flow__container\",\n    style: {\n      transform\n    }\n  }, children);\n}\nfunction useOnInitHandler(onInit) {\n  const rfInstance = useReactFlow();\n  const isInitialized = useRef(false);\n  useEffect(() => {\n    if (!isInitialized.current && rfInstance.viewportInitialized && onInit) {\n      setTimeout(() => onInit(rfInstance), 1);\n      isInitialized.current = true;\n    }\n  }, [onInit, rfInstance.viewportInitialized]);\n}\nconst oppositePosition = {\n  [Position.Left]: Position.Right,\n  [Position.Right]: Position.Left,\n  [Position.Top]: Position.Bottom,\n  [Position.Bottom]: Position.Top\n};\nconst ConnectionLine = ({\n  nodeId,\n  handleType,\n  style,\n  type = ConnectionLineType.Bezier,\n  CustomComponent,\n  connectionStatus\n}) => {\n  const {\n    fromNode,\n    handleId,\n    toX,\n    toY,\n    connectionMode\n  } = useStore(useCallback(s => ({\n    fromNode: s.nodeInternals.get(nodeId),\n    handleId: s.connectionHandleId,\n    toX: (s.connectionPosition.x - s.transform[0]) / s.transform[2],\n    toY: (s.connectionPosition.y - s.transform[1]) / s.transform[2],\n    connectionMode: s.connectionMode\n  }), [nodeId]), shallow);\n  const fromHandleBounds = fromNode?.[internalsSymbol]?.handleBounds;\n  let handleBounds = fromHandleBounds?.[handleType];\n  if (connectionMode === ConnectionMode.Loose) {\n    handleBounds = handleBounds ? handleBounds : fromHandleBounds?.[handleType === 'source' ? 'target' : 'source'];\n  }\n  if (!fromNode || !handleBounds) {\n    return null;\n  }\n  const fromHandle = handleId ? handleBounds.find(d => d.id === handleId) : handleBounds[0];\n  const fromHandleX = fromHandle ? fromHandle.x + fromHandle.width / 2 : (fromNode.width ?? 0) / 2;\n  const fromHandleY = fromHandle ? fromHandle.y + fromHandle.height / 2 : fromNode.height ?? 0;\n  const fromX = (fromNode.positionAbsolute?.x ?? 0) + fromHandleX;\n  const fromY = (fromNode.positionAbsolute?.y ?? 0) + fromHandleY;\n  const fromPosition = fromHandle?.position;\n  const toPosition = fromPosition ? oppositePosition[fromPosition] : null;\n  if (!fromPosition || !toPosition) {\n    return null;\n  }\n  if (CustomComponent) {\n    return React.createElement(CustomComponent, {\n      connectionLineType: type,\n      connectionLineStyle: style,\n      fromNode: fromNode,\n      fromHandle: fromHandle,\n      fromX: fromX,\n      fromY: fromY,\n      toX: toX,\n      toY: toY,\n      fromPosition: fromPosition,\n      toPosition: toPosition,\n      connectionStatus: connectionStatus\n    });\n  }\n  let dAttr = '';\n  const pathParams = {\n    sourceX: fromX,\n    sourceY: fromY,\n    sourcePosition: fromPosition,\n    targetX: toX,\n    targetY: toY,\n    targetPosition: toPosition\n  };\n  if (type === ConnectionLineType.Bezier) {\n    // we assume the destination position is opposite to the source position\n    [dAttr] = getBezierPath(pathParams);\n  } else if (type === ConnectionLineType.Step) {\n    [dAttr] = getSmoothStepPath({\n      ...pathParams,\n      borderRadius: 0\n    });\n  } else if (type === ConnectionLineType.SmoothStep) {\n    [dAttr] = getSmoothStepPath(pathParams);\n  } else if (type === ConnectionLineType.SimpleBezier) {\n    [dAttr] = getSimpleBezierPath(pathParams);\n  } else {\n    dAttr = `M${fromX},${fromY} ${toX},${toY}`;\n  }\n  return React.createElement(\"path\", {\n    d: dAttr,\n    fill: \"none\",\n    className: \"react-flow__connection-path\",\n    style: style\n  });\n};\nConnectionLine.displayName = 'ConnectionLine';\nconst selector$2 = s => ({\n  nodeId: s.connectionNodeId,\n  handleType: s.connectionHandleType,\n  nodesConnectable: s.nodesConnectable,\n  connectionStatus: s.connectionStatus,\n  width: s.width,\n  height: s.height\n});\nfunction ConnectionLineWrapper({\n  containerStyle,\n  style,\n  type,\n  component\n}) {\n  const {\n    nodeId,\n    handleType,\n    nodesConnectable,\n    width,\n    height,\n    connectionStatus\n  } = useStore(selector$2, shallow);\n  const isValid = !!(nodeId && handleType && width && nodesConnectable);\n  if (!isValid) {\n    return null;\n  }\n  return React.createElement(\"svg\", {\n    style: containerStyle,\n    width: width,\n    height: height,\n    className: \"react-flow__edges react-flow__connectionline react-flow__container\"\n  }, React.createElement(\"g\", {\n    className: cc(['react-flow__connection', connectionStatus])\n  }, React.createElement(ConnectionLine, {\n    nodeId: nodeId,\n    handleType: handleType,\n    style: style,\n    type: type,\n    CustomComponent: component,\n    connectionStatus: connectionStatus\n  })));\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction useNodeOrEdgeTypes(nodeOrEdgeTypes, createTypes) {\n  const typesKeysRef = useRef(null);\n  const store = useStoreApi();\n  const typesParsed = useMemo(() => {\n    if (process.env.NODE_ENV === 'development') {\n      const typeKeys = Object.keys(nodeOrEdgeTypes);\n      if (shallow(typesKeysRef.current, typeKeys)) {\n        store.getState().onError?.('002', errorMessages['error002']());\n      }\n      typesKeysRef.current = typeKeys;\n    }\n    return createTypes(nodeOrEdgeTypes);\n  }, [nodeOrEdgeTypes]);\n  return typesParsed;\n}\nconst GraphView = ({\n  nodeTypes,\n  edgeTypes,\n  onMove,\n  onMoveStart,\n  onMoveEnd,\n  onInit,\n  onNodeClick,\n  onEdgeClick,\n  onNodeDoubleClick,\n  onEdgeDoubleClick,\n  onNodeMouseEnter,\n  onNodeMouseMove,\n  onNodeMouseLeave,\n  onNodeContextMenu,\n  onSelectionContextMenu,\n  onSelectionStart,\n  onSelectionEnd,\n  connectionLineType,\n  connectionLineStyle,\n  connectionLineComponent,\n  connectionLineContainerStyle,\n  selectionKeyCode,\n  selectionOnDrag,\n  selectionMode,\n  multiSelectionKeyCode,\n  panActivationKeyCode,\n  zoomActivationKeyCode,\n  deleteKeyCode,\n  onlyRenderVisibleElements,\n  elementsSelectable,\n  selectNodesOnDrag,\n  defaultViewport,\n  translateExtent,\n  minZoom,\n  maxZoom,\n  preventScrolling,\n  defaultMarkerColor,\n  zoomOnScroll,\n  zoomOnPinch,\n  panOnScroll,\n  panOnScrollSpeed,\n  panOnScrollMode,\n  zoomOnDoubleClick,\n  panOnDrag,\n  onPaneClick,\n  onPaneMouseEnter,\n  onPaneMouseMove,\n  onPaneMouseLeave,\n  onPaneScroll,\n  onPaneContextMenu,\n  onEdgeUpdate,\n  onEdgeContextMenu,\n  onEdgeMouseEnter,\n  onEdgeMouseMove,\n  onEdgeMouseLeave,\n  edgeUpdaterRadius,\n  onEdgeUpdateStart,\n  onEdgeUpdateEnd,\n  noDragClassName,\n  noWheelClassName,\n  noPanClassName,\n  elevateEdgesOnSelect,\n  disableKeyboardA11y,\n  nodeOrigin,\n  nodeExtent,\n  rfId\n}) => {\n  const nodeTypesWrapped = useNodeOrEdgeTypes(nodeTypes, createNodeTypes);\n  const edgeTypesWrapped = useNodeOrEdgeTypes(edgeTypes, createEdgeTypes);\n  useOnInitHandler(onInit);\n  return React.createElement(FlowRenderer$1, {\n    onPaneClick: onPaneClick,\n    onPaneMouseEnter: onPaneMouseEnter,\n    onPaneMouseMove: onPaneMouseMove,\n    onPaneMouseLeave: onPaneMouseLeave,\n    onPaneContextMenu: onPaneContextMenu,\n    onPaneScroll: onPaneScroll,\n    deleteKeyCode: deleteKeyCode,\n    selectionKeyCode: selectionKeyCode,\n    selectionOnDrag: selectionOnDrag,\n    selectionMode: selectionMode,\n    onSelectionStart: onSelectionStart,\n    onSelectionEnd: onSelectionEnd,\n    multiSelectionKeyCode: multiSelectionKeyCode,\n    panActivationKeyCode: panActivationKeyCode,\n    zoomActivationKeyCode: zoomActivationKeyCode,\n    elementsSelectable: elementsSelectable,\n    onMove: onMove,\n    onMoveStart: onMoveStart,\n    onMoveEnd: onMoveEnd,\n    zoomOnScroll: zoomOnScroll,\n    zoomOnPinch: zoomOnPinch,\n    zoomOnDoubleClick: zoomOnDoubleClick,\n    panOnScroll: panOnScroll,\n    panOnScrollSpeed: panOnScrollSpeed,\n    panOnScrollMode: panOnScrollMode,\n    panOnDrag: panOnDrag,\n    defaultViewport: defaultViewport,\n    translateExtent: translateExtent,\n    minZoom: minZoom,\n    maxZoom: maxZoom,\n    onSelectionContextMenu: onSelectionContextMenu,\n    preventScrolling: preventScrolling,\n    noDragClassName: noDragClassName,\n    noWheelClassName: noWheelClassName,\n    noPanClassName: noPanClassName,\n    disableKeyboardA11y: disableKeyboardA11y\n  }, React.createElement(Viewport, null, React.createElement(EdgeRenderer$1, {\n    edgeTypes: edgeTypesWrapped,\n    onEdgeClick: onEdgeClick,\n    onEdgeDoubleClick: onEdgeDoubleClick,\n    onEdgeUpdate: onEdgeUpdate,\n    onlyRenderVisibleElements: onlyRenderVisibleElements,\n    onEdgeContextMenu: onEdgeContextMenu,\n    onEdgeMouseEnter: onEdgeMouseEnter,\n    onEdgeMouseMove: onEdgeMouseMove,\n    onEdgeMouseLeave: onEdgeMouseLeave,\n    onEdgeUpdateStart: onEdgeUpdateStart,\n    onEdgeUpdateEnd: onEdgeUpdateEnd,\n    edgeUpdaterRadius: edgeUpdaterRadius,\n    defaultMarkerColor: defaultMarkerColor,\n    noPanClassName: noPanClassName,\n    elevateEdgesOnSelect: !!elevateEdgesOnSelect,\n    disableKeyboardA11y: disableKeyboardA11y,\n    rfId: rfId\n  }, React.createElement(ConnectionLineWrapper, {\n    style: connectionLineStyle,\n    type: connectionLineType,\n    component: connectionLineComponent,\n    containerStyle: connectionLineContainerStyle\n  })), React.createElement(\"div\", {\n    className: \"react-flow__edgelabel-renderer\"\n  }), React.createElement(NodeRenderer$1, {\n    nodeTypes: nodeTypesWrapped,\n    onNodeClick: onNodeClick,\n    onNodeDoubleClick: onNodeDoubleClick,\n    onNodeMouseEnter: onNodeMouseEnter,\n    onNodeMouseMove: onNodeMouseMove,\n    onNodeMouseLeave: onNodeMouseLeave,\n    onNodeContextMenu: onNodeContextMenu,\n    selectNodesOnDrag: selectNodesOnDrag,\n    onlyRenderVisibleElements: onlyRenderVisibleElements,\n    noPanClassName: noPanClassName,\n    noDragClassName: noDragClassName,\n    disableKeyboardA11y: disableKeyboardA11y,\n    nodeOrigin: nodeOrigin,\n    nodeExtent: nodeExtent,\n    rfId: rfId\n  })));\n};\nGraphView.displayName = 'GraphView';\nvar GraphView$1 = memo(GraphView);\nconst infiniteExtent = [[Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY], [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY]];\nconst initialState = {\n  rfId: '1',\n  width: 0,\n  height: 0,\n  transform: [0, 0, 1],\n  nodeInternals: new Map(),\n  edges: [],\n  onNodesChange: null,\n  onEdgesChange: null,\n  hasDefaultNodes: false,\n  hasDefaultEdges: false,\n  d3Zoom: null,\n  d3Selection: null,\n  d3ZoomHandler: undefined,\n  minZoom: 0.5,\n  maxZoom: 2,\n  translateExtent: infiniteExtent,\n  nodeExtent: infiniteExtent,\n  nodesSelectionActive: false,\n  userSelectionActive: false,\n  userSelectionRect: null,\n  connectionNodeId: null,\n  connectionHandleId: null,\n  connectionHandleType: 'source',\n  connectionPosition: {\n    x: 0,\n    y: 0\n  },\n  connectionStatus: null,\n  connectionMode: ConnectionMode.Strict,\n  domNode: null,\n  paneDragging: false,\n  noPanClassName: 'nopan',\n  nodeOrigin: [0, 0],\n  nodeDragThreshold: 0,\n  snapGrid: [15, 15],\n  snapToGrid: false,\n  nodesDraggable: true,\n  nodesConnectable: true,\n  nodesFocusable: true,\n  edgesFocusable: true,\n  edgesUpdatable: true,\n  elementsSelectable: true,\n  elevateNodesOnSelect: true,\n  fitViewOnInit: false,\n  fitViewOnInitDone: false,\n  fitViewOnInitOptions: undefined,\n  onSelectionChange: [],\n  multiSelectionActive: false,\n  connectionStartHandle: null,\n  connectionEndHandle: null,\n  connectionClickStartHandle: null,\n  connectOnClick: true,\n  ariaLiveMessage: '',\n  autoPanOnConnect: true,\n  autoPanOnNodeDrag: true,\n  connectionRadius: 20,\n  onError: devWarn,\n  isValidConnection: undefined\n};\nconst createRFStore = () => createWithEqualityFn((set, get) => ({\n  ...initialState,\n  setNodes: nodes => {\n    const {\n      nodeInternals,\n      nodeOrigin,\n      elevateNodesOnSelect\n    } = get();\n    set({\n      nodeInternals: createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect)\n    });\n  },\n  getNodes: () => {\n    return Array.from(get().nodeInternals.values());\n  },\n  setEdges: edges => {\n    const {\n      defaultEdgeOptions = {}\n    } = get();\n    set({\n      edges: edges.map(e => ({\n        ...defaultEdgeOptions,\n        ...e\n      }))\n    });\n  },\n  setDefaultNodesAndEdges: (nodes, edges) => {\n    const hasDefaultNodes = typeof nodes !== 'undefined';\n    const hasDefaultEdges = typeof edges !== 'undefined';\n    const nodeInternals = hasDefaultNodes ? createNodeInternals(nodes, new Map(), get().nodeOrigin, get().elevateNodesOnSelect) : new Map();\n    const nextEdges = hasDefaultEdges ? edges : [];\n    set({\n      nodeInternals,\n      edges: nextEdges,\n      hasDefaultNodes,\n      hasDefaultEdges\n    });\n  },\n  updateNodeDimensions: updates => {\n    const {\n      onNodesChange,\n      nodeInternals,\n      fitViewOnInit,\n      fitViewOnInitDone,\n      fitViewOnInitOptions,\n      domNode,\n      nodeOrigin\n    } = get();\n    const viewportNode = domNode?.querySelector('.react-flow__viewport');\n    if (!viewportNode) {\n      return;\n    }\n    const style = window.getComputedStyle(viewportNode);\n    const {\n      m22: zoom\n    } = new window.DOMMatrixReadOnly(style.transform);\n    const changes = updates.reduce((res, update) => {\n      const node = nodeInternals.get(update.id);\n      if (node?.hidden) {\n        nodeInternals.set(node.id, {\n          ...node,\n          [internalsSymbol]: {\n            ...node[internalsSymbol],\n            // we need to reset the handle bounds when the node is hidden\n            // in order to force a new observation when the node is shown again\n            handleBounds: undefined\n          }\n        });\n      } else if (node) {\n        const dimensions = getDimensions(update.nodeElement);\n        const doUpdate = !!(dimensions.width && dimensions.height && (node.width !== dimensions.width || node.height !== dimensions.height || update.forceUpdate));\n        if (doUpdate) {\n          nodeInternals.set(node.id, {\n            ...node,\n            [internalsSymbol]: {\n              ...node[internalsSymbol],\n              handleBounds: {\n                source: getHandleBounds('.source', update.nodeElement, zoom, nodeOrigin),\n                target: getHandleBounds('.target', update.nodeElement, zoom, nodeOrigin)\n              }\n            },\n            ...dimensions\n          });\n          res.push({\n            id: node.id,\n            type: 'dimensions',\n            dimensions\n          });\n        }\n      }\n      return res;\n    }, []);\n    updateAbsoluteNodePositions(nodeInternals, nodeOrigin);\n    const nextFitViewOnInitDone = fitViewOnInitDone || fitViewOnInit && !fitViewOnInitDone && fitView(get, {\n      initial: true,\n      ...fitViewOnInitOptions\n    });\n    set({\n      nodeInternals: new Map(nodeInternals),\n      fitViewOnInitDone: nextFitViewOnInitDone\n    });\n    if (changes?.length > 0) {\n      onNodesChange?.(changes);\n    }\n  },\n  updateNodePositions: (nodeDragItems, positionChanged = true, dragging = false) => {\n    const {\n      triggerNodeChanges\n    } = get();\n    const changes = nodeDragItems.map(node => {\n      const change = {\n        id: node.id,\n        type: 'position',\n        dragging\n      };\n      if (positionChanged) {\n        change.positionAbsolute = node.positionAbsolute;\n        change.position = node.position;\n      }\n      return change;\n    });\n    triggerNodeChanges(changes);\n  },\n  triggerNodeChanges: changes => {\n    const {\n      onNodesChange,\n      nodeInternals,\n      hasDefaultNodes,\n      nodeOrigin,\n      getNodes,\n      elevateNodesOnSelect\n    } = get();\n    if (changes?.length) {\n      if (hasDefaultNodes) {\n        const nodes = applyNodeChanges(changes, getNodes());\n        const nextNodeInternals = createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect);\n        set({\n          nodeInternals: nextNodeInternals\n        });\n      }\n      onNodesChange?.(changes);\n    }\n  },\n  addSelectedNodes: selectedNodeIds => {\n    const {\n      multiSelectionActive,\n      edges,\n      getNodes\n    } = get();\n    let changedNodes;\n    let changedEdges = null;\n    if (multiSelectionActive) {\n      changedNodes = selectedNodeIds.map(nodeId => createSelectionChange(nodeId, true));\n    } else {\n      changedNodes = getSelectionChanges(getNodes(), selectedNodeIds);\n      changedEdges = getSelectionChanges(edges, []);\n    }\n    updateNodesAndEdgesSelections({\n      changedNodes,\n      changedEdges,\n      get,\n      set\n    });\n  },\n  addSelectedEdges: selectedEdgeIds => {\n    const {\n      multiSelectionActive,\n      edges,\n      getNodes\n    } = get();\n    let changedEdges;\n    let changedNodes = null;\n    if (multiSelectionActive) {\n      changedEdges = selectedEdgeIds.map(edgeId => createSelectionChange(edgeId, true));\n    } else {\n      changedEdges = getSelectionChanges(edges, selectedEdgeIds);\n      changedNodes = getSelectionChanges(getNodes(), []);\n    }\n    updateNodesAndEdgesSelections({\n      changedNodes,\n      changedEdges,\n      get,\n      set\n    });\n  },\n  unselectNodesAndEdges: ({\n    nodes,\n    edges\n  } = {}) => {\n    const {\n      edges: storeEdges,\n      getNodes\n    } = get();\n    const nodesToUnselect = nodes ? nodes : getNodes();\n    const edgesToUnselect = edges ? edges : storeEdges;\n    const changedNodes = nodesToUnselect.map(n => {\n      n.selected = false;\n      return createSelectionChange(n.id, false);\n    });\n    const changedEdges = edgesToUnselect.map(edge => createSelectionChange(edge.id, false));\n    updateNodesAndEdgesSelections({\n      changedNodes,\n      changedEdges,\n      get,\n      set\n    });\n  },\n  setMinZoom: minZoom => {\n    const {\n      d3Zoom,\n      maxZoom\n    } = get();\n    d3Zoom?.scaleExtent([minZoom, maxZoom]);\n    set({\n      minZoom\n    });\n  },\n  setMaxZoom: maxZoom => {\n    const {\n      d3Zoom,\n      minZoom\n    } = get();\n    d3Zoom?.scaleExtent([minZoom, maxZoom]);\n    set({\n      maxZoom\n    });\n  },\n  setTranslateExtent: translateExtent => {\n    get().d3Zoom?.translateExtent(translateExtent);\n    set({\n      translateExtent\n    });\n  },\n  resetSelectedElements: () => {\n    const {\n      edges,\n      getNodes\n    } = get();\n    const nodes = getNodes();\n    const nodesToUnselect = nodes.filter(e => e.selected).map(n => createSelectionChange(n.id, false));\n    const edgesToUnselect = edges.filter(e => e.selected).map(e => createSelectionChange(e.id, false));\n    updateNodesAndEdgesSelections({\n      changedNodes: nodesToUnselect,\n      changedEdges: edgesToUnselect,\n      get,\n      set\n    });\n  },\n  setNodeExtent: nodeExtent => {\n    const {\n      nodeInternals\n    } = get();\n    nodeInternals.forEach(node => {\n      node.positionAbsolute = clampPosition(node.position, nodeExtent);\n    });\n    set({\n      nodeExtent,\n      nodeInternals: new Map(nodeInternals)\n    });\n  },\n  panBy: delta => {\n    const {\n      transform,\n      width,\n      height,\n      d3Zoom,\n      d3Selection,\n      translateExtent\n    } = get();\n    if (!d3Zoom || !d3Selection || !delta.x && !delta.y) {\n      return false;\n    }\n    const nextTransform = zoomIdentity.translate(transform[0] + delta.x, transform[1] + delta.y).scale(transform[2]);\n    const extent = [[0, 0], [width, height]];\n    const constrainedTransform = d3Zoom?.constrain()(nextTransform, extent, translateExtent);\n    d3Zoom.transform(d3Selection, constrainedTransform);\n    const transformChanged = transform[0] !== constrainedTransform.x || transform[1] !== constrainedTransform.y || transform[2] !== constrainedTransform.k;\n    return transformChanged;\n  },\n  cancelConnection: () => set({\n    connectionNodeId: initialState.connectionNodeId,\n    connectionHandleId: initialState.connectionHandleId,\n    connectionHandleType: initialState.connectionHandleType,\n    connectionStatus: initialState.connectionStatus,\n    connectionStartHandle: initialState.connectionStartHandle,\n    connectionEndHandle: initialState.connectionEndHandle\n  }),\n  reset: () => set({\n    ...initialState\n  })\n}), Object.is);\nconst ReactFlowProvider = ({\n  children\n}) => {\n  const storeRef = useRef(null);\n  if (!storeRef.current) {\n    storeRef.current = createRFStore();\n  }\n  return React.createElement(Provider$1, {\n    value: storeRef.current\n  }, children);\n};\nReactFlowProvider.displayName = 'ReactFlowProvider';\nconst Wrapper = ({\n  children\n}) => {\n  const isWrapped = useContext(StoreContext);\n  if (isWrapped) {\n    // we need to wrap it with a fragment because it's not allowed for children to be a ReactNode\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18051\n    return React.createElement(React.Fragment, null, children);\n  }\n  return React.createElement(ReactFlowProvider, null, children);\n};\nWrapper.displayName = 'ReactFlowWrapper';\nconst defaultNodeTypes = {\n  input: InputNode$1,\n  default: DefaultNode$1,\n  output: OutputNode$1,\n  group: GroupNode\n};\nconst defaultEdgeTypes = {\n  default: BezierEdge,\n  straight: StraightEdge,\n  step: StepEdge,\n  smoothstep: SmoothStepEdge,\n  simplebezier: SimpleBezierEdge\n};\nconst initNodeOrigin = [0, 0];\nconst initSnapGrid = [15, 15];\nconst initDefaultViewport = {\n  x: 0,\n  y: 0,\n  zoom: 1\n};\nconst wrapperStyle = {\n  width: '100%',\n  height: '100%',\n  overflow: 'hidden',\n  position: 'relative',\n  zIndex: 0\n};\nconst ReactFlow = forwardRef(({\n  nodes,\n  edges,\n  defaultNodes,\n  defaultEdges,\n  className,\n  nodeTypes = defaultNodeTypes,\n  edgeTypes = defaultEdgeTypes,\n  onNodeClick,\n  onEdgeClick,\n  onInit,\n  onMove,\n  onMoveStart,\n  onMoveEnd,\n  onConnect,\n  onConnectStart,\n  onConnectEnd,\n  onClickConnectStart,\n  onClickConnectEnd,\n  onNodeMouseEnter,\n  onNodeMouseMove,\n  onNodeMouseLeave,\n  onNodeContextMenu,\n  onNodeDoubleClick,\n  onNodeDragStart,\n  onNodeDrag,\n  onNodeDragStop,\n  onNodesDelete,\n  onEdgesDelete,\n  onSelectionChange,\n  onSelectionDragStart,\n  onSelectionDrag,\n  onSelectionDragStop,\n  onSelectionContextMenu,\n  onSelectionStart,\n  onSelectionEnd,\n  connectionMode = ConnectionMode.Strict,\n  connectionLineType = ConnectionLineType.Bezier,\n  connectionLineStyle,\n  connectionLineComponent,\n  connectionLineContainerStyle,\n  deleteKeyCode = 'Backspace',\n  selectionKeyCode = 'Shift',\n  selectionOnDrag = false,\n  selectionMode = SelectionMode.Full,\n  panActivationKeyCode = 'Space',\n  multiSelectionKeyCode = isMacOs() ? 'Meta' : 'Control',\n  zoomActivationKeyCode = isMacOs() ? 'Meta' : 'Control',\n  snapToGrid = false,\n  snapGrid = initSnapGrid,\n  onlyRenderVisibleElements = false,\n  selectNodesOnDrag = true,\n  nodesDraggable,\n  nodesConnectable,\n  nodesFocusable,\n  nodeOrigin = initNodeOrigin,\n  edgesFocusable,\n  edgesUpdatable,\n  elementsSelectable,\n  defaultViewport = initDefaultViewport,\n  minZoom = 0.5,\n  maxZoom = 2,\n  translateExtent = infiniteExtent,\n  preventScrolling = true,\n  nodeExtent,\n  defaultMarkerColor = '#b1b1b7',\n  zoomOnScroll = true,\n  zoomOnPinch = true,\n  panOnScroll = false,\n  panOnScrollSpeed = 0.5,\n  panOnScrollMode = PanOnScrollMode.Free,\n  zoomOnDoubleClick = true,\n  panOnDrag = true,\n  onPaneClick,\n  onPaneMouseEnter,\n  onPaneMouseMove,\n  onPaneMouseLeave,\n  onPaneScroll,\n  onPaneContextMenu,\n  children,\n  onEdgeUpdate,\n  onEdgeContextMenu,\n  onEdgeDoubleClick,\n  onEdgeMouseEnter,\n  onEdgeMouseMove,\n  onEdgeMouseLeave,\n  onEdgeUpdateStart,\n  onEdgeUpdateEnd,\n  edgeUpdaterRadius = 10,\n  onNodesChange,\n  onEdgesChange,\n  noDragClassName = 'nodrag',\n  noWheelClassName = 'nowheel',\n  noPanClassName = 'nopan',\n  fitView = false,\n  fitViewOptions,\n  connectOnClick = true,\n  attributionPosition,\n  proOptions,\n  defaultEdgeOptions,\n  elevateNodesOnSelect = true,\n  elevateEdgesOnSelect = false,\n  disableKeyboardA11y = false,\n  autoPanOnConnect = true,\n  autoPanOnNodeDrag = true,\n  connectionRadius = 20,\n  isValidConnection,\n  onError,\n  style,\n  id,\n  nodeDragThreshold,\n  ...rest\n}, ref) => {\n  const rfId = id || '1';\n  return React.createElement(\"div\", {\n    ...rest,\n    style: {\n      ...style,\n      ...wrapperStyle\n    },\n    ref: ref,\n    className: cc(['react-flow', className]),\n    \"data-testid\": \"rf__wrapper\",\n    id: id\n  }, React.createElement(Wrapper, null, React.createElement(GraphView$1, {\n    onInit: onInit,\n    onMove: onMove,\n    onMoveStart: onMoveStart,\n    onMoveEnd: onMoveEnd,\n    onNodeClick: onNodeClick,\n    onEdgeClick: onEdgeClick,\n    onNodeMouseEnter: onNodeMouseEnter,\n    onNodeMouseMove: onNodeMouseMove,\n    onNodeMouseLeave: onNodeMouseLeave,\n    onNodeContextMenu: onNodeContextMenu,\n    onNodeDoubleClick: onNodeDoubleClick,\n    nodeTypes: nodeTypes,\n    edgeTypes: edgeTypes,\n    connectionLineType: connectionLineType,\n    connectionLineStyle: connectionLineStyle,\n    connectionLineComponent: connectionLineComponent,\n    connectionLineContainerStyle: connectionLineContainerStyle,\n    selectionKeyCode: selectionKeyCode,\n    selectionOnDrag: selectionOnDrag,\n    selectionMode: selectionMode,\n    deleteKeyCode: deleteKeyCode,\n    multiSelectionKeyCode: multiSelectionKeyCode,\n    panActivationKeyCode: panActivationKeyCode,\n    zoomActivationKeyCode: zoomActivationKeyCode,\n    onlyRenderVisibleElements: onlyRenderVisibleElements,\n    selectNodesOnDrag: selectNodesOnDrag,\n    defaultViewport: defaultViewport,\n    translateExtent: translateExtent,\n    minZoom: minZoom,\n    maxZoom: maxZoom,\n    preventScrolling: preventScrolling,\n    zoomOnScroll: zoomOnScroll,\n    zoomOnPinch: zoomOnPinch,\n    zoomOnDoubleClick: zoomOnDoubleClick,\n    panOnScroll: panOnScroll,\n    panOnScrollSpeed: panOnScrollSpeed,\n    panOnScrollMode: panOnScrollMode,\n    panOnDrag: panOnDrag,\n    onPaneClick: onPaneClick,\n    onPaneMouseEnter: onPaneMouseEnter,\n    onPaneMouseMove: onPaneMouseMove,\n    onPaneMouseLeave: onPaneMouseLeave,\n    onPaneScroll: onPaneScroll,\n    onPaneContextMenu: onPaneContextMenu,\n    onSelectionContextMenu: onSelectionContextMenu,\n    onSelectionStart: onSelectionStart,\n    onSelectionEnd: onSelectionEnd,\n    onEdgeUpdate: onEdgeUpdate,\n    onEdgeContextMenu: onEdgeContextMenu,\n    onEdgeDoubleClick: onEdgeDoubleClick,\n    onEdgeMouseEnter: onEdgeMouseEnter,\n    onEdgeMouseMove: onEdgeMouseMove,\n    onEdgeMouseLeave: onEdgeMouseLeave,\n    onEdgeUpdateStart: onEdgeUpdateStart,\n    onEdgeUpdateEnd: onEdgeUpdateEnd,\n    edgeUpdaterRadius: edgeUpdaterRadius,\n    defaultMarkerColor: defaultMarkerColor,\n    noDragClassName: noDragClassName,\n    noWheelClassName: noWheelClassName,\n    noPanClassName: noPanClassName,\n    elevateEdgesOnSelect: elevateEdgesOnSelect,\n    rfId: rfId,\n    disableKeyboardA11y: disableKeyboardA11y,\n    nodeOrigin: nodeOrigin,\n    nodeExtent: nodeExtent\n  }), React.createElement(StoreUpdater, {\n    nodes: nodes,\n    edges: edges,\n    defaultNodes: defaultNodes,\n    defaultEdges: defaultEdges,\n    onConnect: onConnect,\n    onConnectStart: onConnectStart,\n    onConnectEnd: onConnectEnd,\n    onClickConnectStart: onClickConnectStart,\n    onClickConnectEnd: onClickConnectEnd,\n    nodesDraggable: nodesDraggable,\n    nodesConnectable: nodesConnectable,\n    nodesFocusable: nodesFocusable,\n    edgesFocusable: edgesFocusable,\n    edgesUpdatable: edgesUpdatable,\n    elementsSelectable: elementsSelectable,\n    elevateNodesOnSelect: elevateNodesOnSelect,\n    minZoom: minZoom,\n    maxZoom: maxZoom,\n    nodeExtent: nodeExtent,\n    onNodesChange: onNodesChange,\n    onEdgesChange: onEdgesChange,\n    snapToGrid: snapToGrid,\n    snapGrid: snapGrid,\n    connectionMode: connectionMode,\n    translateExtent: translateExtent,\n    connectOnClick: connectOnClick,\n    defaultEdgeOptions: defaultEdgeOptions,\n    fitView: fitView,\n    fitViewOptions: fitViewOptions,\n    onNodesDelete: onNodesDelete,\n    onEdgesDelete: onEdgesDelete,\n    onNodeDragStart: onNodeDragStart,\n    onNodeDrag: onNodeDrag,\n    onNodeDragStop: onNodeDragStop,\n    onSelectionDrag: onSelectionDrag,\n    onSelectionDragStart: onSelectionDragStart,\n    onSelectionDragStop: onSelectionDragStop,\n    noPanClassName: noPanClassName,\n    nodeOrigin: nodeOrigin,\n    rfId: rfId,\n    autoPanOnConnect: autoPanOnConnect,\n    autoPanOnNodeDrag: autoPanOnNodeDrag,\n    onError: onError,\n    connectionRadius: connectionRadius,\n    isValidConnection: isValidConnection,\n    nodeDragThreshold: nodeDragThreshold\n  }), React.createElement(Wrapper$1, {\n    onSelectionChange: onSelectionChange\n  }), children, React.createElement(Attribution, {\n    proOptions: proOptions,\n    position: attributionPosition\n  }), React.createElement(A11yDescriptions, {\n    rfId: rfId,\n    disableKeyboardA11y: disableKeyboardA11y\n  })));\n});\nReactFlow.displayName = 'ReactFlow';\nconst selector$1 = s => s.domNode?.querySelector('.react-flow__edgelabel-renderer');\nfunction EdgeLabelRenderer({\n  children\n}) {\n  const edgeLabelRenderer = useStore(selector$1);\n  if (!edgeLabelRenderer) {\n    return null;\n  }\n  return createPortal(children, edgeLabelRenderer);\n}\nfunction useUpdateNodeInternals() {\n  const store = useStoreApi();\n  return useCallback(id => {\n    const {\n      domNode,\n      updateNodeDimensions\n    } = store.getState();\n    const updateIds = Array.isArray(id) ? id : [id];\n    const updates = updateIds.reduce((res, updateId) => {\n      const nodeElement = domNode?.querySelector(`.react-flow__node[data-id=\"${updateId}\"]`);\n      if (nodeElement) {\n        res.push({\n          id: updateId,\n          nodeElement,\n          forceUpdate: true\n        });\n      }\n      return res;\n    }, []);\n    requestAnimationFrame(() => updateNodeDimensions(updates));\n  }, []);\n}\nconst nodesSelector = state => state.getNodes();\nfunction useNodes() {\n  const nodes = useStore(nodesSelector, shallow);\n  return nodes;\n}\nconst edgesSelector = state => state.edges;\nfunction useEdges() {\n  const edges = useStore(edgesSelector, shallow);\n  return edges;\n}\nconst viewportSelector = state => ({\n  x: state.transform[0],\n  y: state.transform[1],\n  zoom: state.transform[2]\n});\nfunction useViewport() {\n  const viewport = useStore(viewportSelector, shallow);\n  return viewport;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction createUseItemsState(applyChanges) {\n  return initialItems => {\n    const [items, setItems] = useState(initialItems);\n    const onItemsChange = useCallback(changes => setItems(items => applyChanges(changes, items)), []);\n    return [items, setItems, onItemsChange];\n  };\n}\nconst useNodesState = createUseItemsState(applyNodeChanges);\nconst useEdgesState = createUseItemsState(applyEdgeChanges);\nfunction useOnViewportChange({\n  onStart,\n  onChange,\n  onEnd\n}) {\n  const store = useStoreApi();\n  useEffect(() => {\n    store.setState({\n      onViewportChangeStart: onStart\n    });\n  }, [onStart]);\n  useEffect(() => {\n    store.setState({\n      onViewportChange: onChange\n    });\n  }, [onChange]);\n  useEffect(() => {\n    store.setState({\n      onViewportChangeEnd: onEnd\n    });\n  }, [onEnd]);\n}\nfunction useOnSelectionChange({\n  onChange\n}) {\n  const store = useStoreApi();\n  useEffect(() => {\n    const nextSelectionChangeHandlers = [...store.getState().onSelectionChange, onChange];\n    store.setState({\n      onSelectionChange: nextSelectionChangeHandlers\n    });\n    return () => {\n      const nextHandlers = store.getState().onSelectionChange.filter(fn => fn !== onChange);\n      store.setState({\n        onSelectionChange: nextHandlers\n      });\n    };\n  }, [onChange]);\n}\nconst selector = options => s => {\n  if (s.nodeInternals.size === 0) {\n    return false;\n  }\n  return s.getNodes().filter(n => options.includeHiddenNodes ? true : !n.hidden).every(n => n[internalsSymbol]?.handleBounds !== undefined);\n};\nconst defaultOptions = {\n  includeHiddenNodes: false\n};\nfunction useNodesInitialized(options = defaultOptions) {\n  const initialized = useStore(selector(options));\n  return initialized;\n}\nexport { BaseEdge, BezierEdge, ConnectionLineType, ConnectionMode, EdgeLabelRenderer, EdgeText$1 as EdgeText, Handle$1 as Handle, MarkerType, PanOnScrollMode, Panel, Position, ReactFlow, ReactFlowProvider, SelectionMode, SimpleBezierEdge, SmoothStepEdge, StepEdge, StraightEdge, addEdge, applyEdgeChanges, applyNodeChanges, boxToRect, clamp, getBezierPath, getBoundsOfRects, getConnectedEdges, getIncomers, getMarkerEnd, getNodePositionWithOrigin, getNodesBounds, getOutgoers, getRectOfNodes, getSimpleBezierPath, getSmoothStepPath, getStraightPath, getTransformForBounds, getViewportForBounds, handleParentExpand, internalsSymbol, isEdge, isNode, rectToBox, updateEdge, useEdges, useEdgesState, useGetPointerPosition, useKeyPress, useNodeId, useNodes, useNodesInitialized, useNodesState, useOnSelectionChange, useOnViewportChange, useReactFlow, useStore, useStoreApi, useUpdateNodeInternals, useViewport };","map":{"version":3,"names":["React","createContext","useContext","useMemo","memo","useRef","useState","useEffect","forwardRef","useCallback","cc","useStoreWithEqualityFn","createWithEqualityFn","shallow","zoomIdentity","zoom","select","pointer","drag","createPortal","StoreContext","Provider$1","Provider","errorMessages","error001","error002","error003","nodeType","error004","error005","error006","error007","id","error009","type","error008","sourceHandle","edge","targetHandle","error010","error011","edgeType","error012","zustandErrorMessage","useStore","selector","equalityFn","store","Error","useStoreApi","getState","setState","subscribe","destroy","selector$g","s","userSelectionActive","Panel","position","children","className","style","rest","pointerEvents","positionClasses","split","createElement","Attribution","proOptions","hideAttribution","href","target","rel","EdgeText","x","y","label","labelStyle","labelShowBg","labelBgStyle","labelBgPadding","labelBgBorderRadius","edgeRef","edgeTextBbox","setEdgeTextBbox","width","height","edgeTextClasses","current","textBbox","getBBox","transform","visibility","rx","ry","dy","ref","EdgeText$1","getDimensions","node","offsetWidth","offsetHeight","clamp","val","min","max","Math","clampPosition","extent","calcAutoPanVelocity","value","abs","calcAutoPan","pos","bounds","xMovement","yMovement","getHostForElement","element","getRootNode","window","document","getBoundsOfBoxes","box1","box2","x2","y2","rectToBox","boxToRect","nodeToRect","positionAbsolute","getBoundsOfRects","rect1","rect2","getOverlappingArea","rectA","rectB","xOverlap","yOverlap","ceil","isRectObject","obj","isNumeric","n","isNaN","isFinite","internalsSymbol","Symbol","for","elementSelectionKeys","devWarn","message","process","env","NODE_ENV","console","warn","isReactKeyboardEvent","event","isInputDOMNode","kbEvent","nativeEvent","composedPath","isInput","includes","nodeName","hasAttribute","closest","isMouseEvent","getEventPosition","isMouseTriggered","evtX","clientX","touches","evtY","clientY","left","top","isMacOs","navigator","userAgent","indexOf","BaseEdge","path","labelX","labelY","markerEnd","markerStart","interactionWidth","Fragment","d","fill","strokeOpacity","strokeWidth","displayName","getMarkerEnd","markerType","markerEndId","getMouseHandler$1","handler","undefined","edges","find","e","getEdgeCenter","sourceX","sourceY","targetX","targetY","xOffset","centerX","yOffset","centerY","getBezierEdgeCenter","sourceControlX","sourceControlY","targetControlX","targetControlY","offsetX","offsetY","ConnectionMode","PanOnScrollMode","SelectionMode","ConnectionLineType","MarkerType","Position","getControl","x1","y1","Left","Right","getSimpleBezierPath","sourcePosition","Bottom","targetPosition","Top","SimpleBezierEdge","handleDirections","getDirection","source","distance","a","b","sqrt","pow","getPoints","center","offset","sourceDir","targetDir","sourceGapped","targetGapped","dir","dirAccessor","currDir","points","sourceGapOffset","targetGapOffset","defaultCenterX","defaultCenterY","defaultOffsetX","defaultOffsetY","verticalSplit","horizontalSplit","sourceTarget","targetSource","diff","gapOffset","dirAccessorOpposite","isSameDir","sourceGtTargetOppo","sourceLtTargetOppo","flipSourceTarget","sourceGapPoint","targetGapPoint","maxXDistance","maxYDistance","pathPoints","getBend","c","size","bendSize","xDir","yDir","getSmoothStepPath","borderRadius","reduce","res","p","i","segment","length","SmoothStepEdge","pathOptions","StepEdge","props","getStraightPath","StraightEdge","calculateControlOffset","curvature","getControlWithCurvature","getBezierPath","BezierEdge","NodeIdContext","Consumer","useNodeId","nodeId","isEdge","isNode","getOutgoers","nodes","outgoerIds","filter","map","getIncomers","incomersIds","getEdgeId","getMarkerId","marker","rfId","idPrefix","Object","keys","sort","key","join","connectionExists","some","el","addEdge","edgeParams","concat","updateEdge","oldEdge","newConnection","options","shouldReplaceId","oldEdgeId","foundEdge","pointToRendererPoint","tx","ty","tScale","snapToGrid","snapX","snapY","round","rendererPointToPoint","getNodePositionWithOrigin","nodeOrigin","getNodesBounds","box","currBox","Infinity","getRectOfNodes","getNodesInside","nodeInternals","rect","partially","excludeNonSelectableNodes","paneRect","visibleNodes","forEach","selectable","hidden","nodeRect","overlappingArea","notInitialized","partiallyVisible","area","isVisible","dragging","push","getConnectedEdges","nodeIds","getTransformForBounds","minZoom","maxZoom","padding","getViewportForBounds","xZoom","yZoom","clampedZoom","boundsCenterX","boundsCenterY","getD3Transition","selection","duration","transition","getHandles","handleBounds","currentHandle","h","getClosestHandle","doc","connectionRadius","handles","validator","domNodes","elementsFromPoint","handleBelow","classList","contains","handleNodeId","getAttribute","handleType","getHandleType","handleId","validHandleResult","handle","closestHandles","minDistance","defaultResult","hasValidHandle","isValid","hasTargetHandle","nullConnection","handleDomNode","connection","endHandle","isValidHandle","connectionMode","fromNodeId","fromHandleId","fromType","isValidConnection","isTarget","handleToCheck","querySelector","result","connectable","connectableEnd","isConnectable","Strict","getHandleLookup","sourceHandles","targetHandles","edgeUpdaterType","resetRecentHandle","remove","getConnectionStatus","isInsideConnectionRadius","isHandleValid","connectionStatus","handlePointerDown","onConnect","onEdgeUpdateEnd","domNode","autoPanOnConnect","onConnectStart","panBy","getNodes","cancelConnection","autoPanId","closestHandle","clickedHandle","elementFromPoint","containerBounds","getBoundingClientRect","prevActiveHandle","connectionPosition","autoPanStarted","handleLookup","autoPan","requestAnimationFrame","connectionNodeId","connectionHandleId","connectionHandleType","connectionStartHandle","connectionEndHandle","onPointerMove","add","toggle","onPointerUp","onConnectEnd","cancelAnimationFrame","removeEventListener","addEventListener","alwaysValid","selector$f","connectOnClick","noPanClassName","connectingSelector","state","startHandle","connectionClickStartHandle","clickHandle","connecting","clickConnecting","Handle","isConnectableStart","isConnectableEnd","onMouseDown","onTouchStart","onError","onConnectExtended","params","defaultEdgeOptions","onConnectAction","hasDefaultEdges","setEdges","onPointerDown","button","onClick","onClickConnectStart","onClickConnectEnd","isValidConnectionStore","isValidConnectionHandler","connectablestart","connectableend","connectionindicator","Handle$1","DefaultNode","data","DefaultNode$1","InputNode","InputNode$1","OutputNode","OutputNode$1","GroupNode","selector$e","selectedNodes","selected","selectedEdges","selectId","areEqual","SelectionListener","onSelectionChange","fn","changeSelector","Wrapper$1","storeHasSelectionChange","selector$d","setNodes","setDefaultNodesAndEdges","setMinZoom","setMaxZoom","setTranslateExtent","setNodeExtent","reset","useStoreUpdater","setStoreState","useDirectStoreUpdater","StoreUpdater","defaultNodes","defaultEdges","nodesDraggable","nodesConnectable","nodesFocusable","edgesFocusable","edgesUpdatable","elevateNodesOnSelect","nodeExtent","onNodesChange","onEdgesChange","elementsSelectable","snapGrid","translateExtent","fitView","fitViewOptions","onNodesDelete","onEdgesDelete","onNodeDrag","onNodeDragStart","onNodeDragStop","onSelectionDrag","onSelectionDragStart","onSelectionDragStop","autoPanOnNodeDrag","nodeDragThreshold","edgesWithDefaults","display","ariaLiveStyle","margin","border","overflow","clip","clipPath","ARIA_NODE_DESC_KEY","ARIA_EDGE_DESC_KEY","ARIA_LIVE_MESSAGE","selector$c","ariaLiveMessage","AriaLiveMessage","A11yDescriptions","disableKeyboardA11y","useKeyPress","keyCode","actInsideInputWithModifier","keyPressed","setKeyPressed","modifierPressed","pressedKeys","Set","keyCodes","keysToWatch","keyCodeArr","Array","isArray","kc","keysFlat","item","downHandler","ctrlKey","metaKey","shiftKey","preventAction","keyOrCode","useKeyOrCode","code","isMatchingKey","preventDefault","upHandler","clear","delete","resetHandler","isUp","every","k","has","eventCode","calculateXYZPosition","parentId","parentNode","get","parentNodePosition","z","updateAbsoluteNodePositions","parentNodes","isParent","createNodeInternals","nextNodeInternals","Map","selectedNodeZ","zIndex","currInternals","internals","resetHandleBounds","defineProperty","enumerable","set","d3Zoom","d3Selection","fitViewOnInitDone","fitViewOnInit","isInitialFitView","initial","d3initialized","includeHiddenNodes","optionNode","nodesInitialized","nextTransform","translate","scale","handleControlledNodeSelectionChange","nodeChanges","change","handleControlledEdgeSelectionChange","edgeChanges","updateNodesAndEdgesSelections","changedNodes","changedEdges","hasDefaultNodes","noop","initialViewportHelper","zoomIn","zoomOut","zoomTo","getZoom","setViewport","getViewport","setCenter","fitBounds","project","screenToFlowPosition","flowToScreenPosition","viewportInitialized","selector$b","useViewportHelper","viewportHelperFunctions","scaleBy","zoomLevel","scaleTo","nextZoom","domX","domY","relativePosition","rendererPosition","useReactFlow","viewportHelper","getNode","getEdges","getEdge","payload","nextNodes","changes","nextEdges","addNodes","currentNodes","addEdges","toObject","viewport","deleteElements","nodesDeleted","edgesDeleted","edgeIds","nodesToRemove","parentHit","deletable","deletableEdges","initialHitEdges","connectedEdges","edgesToRemove","edgeIdsToRemove","getNodeRect","nodeOrRect","isRect","getIntersectingNodes","currNodeRect","isNodeIntersecting","deleteKeyOptions","useGlobalKeyHandler","deleteKeyCode","multiSelectionKeyCode","deleteKeyPressed","multiSelectionKeyPressed","nodesSelectionActive","multiSelectionActive","useResizeHandler","rendererNode","resizeObserver","updateDimensions","ResizeObserver","observe","unobserve","containerStyle","viewChanged","prevViewport","eventTransform","eventToFlowTransform","isWrappedWithClass","isRightClickPan","panOnDrag","usedButton","wheelDelta","factor","deltaY","deltaMode","selector$a","d3ZoomHandler","ZoomPane","onMove","onMoveStart","onMoveEnd","onPaneContextMenu","zoomOnScroll","zoomOnPinch","panOnScroll","panOnScrollSpeed","panOnScrollMode","Free","zoomOnDoubleClick","defaultViewport","zoomActivationKeyCode","preventScrolling","noWheelClassName","timerId","isZoomingOrPanning","zoomedWithRightMouseButton","zoomPane","prevTransform","zoomActivationKeyPressed","mouseButton","isPanScrolling","panScrollTimeout","bbox","d3ZoomInstance","scaleExtent","call","updatedTransform","constrainedTransform","constrain","on","stopImmediatePropagation","currentZoom","property","point","pinchDelta","deltaNormalize","deltaX","Vertical","Horizontal","translateBy","internal","nextViewport","onViewportChangeStart","onViewportChange","onViewportChangeEnd","clearTimeout","setTimeout","passive","invalidEvent","sourceEvent","flowTransform","paneDragging","zoomScroll","pinchZoom","buttonAllowed","selector$9","userSelectionRect","UserSelection","isActive","handleParentExpand","updateItem","parent","extendWidth","extendHeight","xDiff","yDiff","applyChanges","elements","initElements","currentChanges","currentChange","expandParent","dimensions","updateStyle","resizing","applyNodeChanges","applyEdgeChanges","createSelectionChange","getSelectionChanges","items","selectedIds","willBeSelected","wrapHandler","containerRef","selector$8","Pane","isSelecting","selectionMode","Full","onSelectionStart","onSelectionEnd","onPaneClick","onPaneScroll","onPaneMouseEnter","onPaneMouseMove","onPaneMouseLeave","container","prevSelectedNodesCount","prevSelectedEdgesCount","resetUserSelection","resetSelectedElements","onContextMenu","onWheel","startX","startY","onMouseMove","mousePos","nextUserSelectRect","Partial","selectedEdgeIds","selectedNodeIds","onMouseUp","onMouseLeave","hasActiveSelection","onMouseEnter","isParentSelected","hasSelector","nodeRef","matches","parentElement","getDragItems","from","values","draggable","delta","clampNodeExtent","calcNextPosition","nextPosition","clampedNodeExtent","currentExtent","parentX","parentY","parentPosition","getEventHandlerParams","dragItems","extentedDragItems","getHandleBounds","nodeElement","querySelectorAll","handlesArray","nodeBounds","nodeOffset","getMouseHandler","handleNodeClick","unselect","addSelectedNodes","unselectNodesAndEdges","blur","useGetPointerPosition","getPointerPosition","pointerPos","xSnapped","ySnapped","wrapSelectionDragFunc","selectionFunc","_","useDrag","disabled","noDragClassName","handleSelector","isSelectable","selectNodesOnDrag","setDragging","lastPos","mousePosition","dragEvent","dragStarted","updateNodes","updateNodePositions","hasChange","nodesBox","adjustedNodeExtent","updatedPos","onDrag","currentNode","startDrag","onStart","dragHandler","onStop","isDraggable","useUpdateNodePositions","updatePositions","xVelo","yVelo","isShiftPressed","positionDiffX","positionDiffY","nodeUpdates","arrowKeyDiffs","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","wrapNode","NodeComponent","NodeWrapper","xPos","yPos","xPosOrigin","yPosOrigin","onDoubleClick","isFocusable","dragHandle","initialized","ariaLabel","hasHandleBounds","prevNodeRef","prevSourcePosition","prevTargetPosition","prevType","hasPointerEvents","onMouseEnterHandler","onMouseMoveHandler","onMouseLeaveHandler","onContextMenuHandler","onDoubleClickHandler","onSelectNodeHandler","onKeyDown","prototype","hasOwnProperty","replace","toLowerCase","currNode","typeChanged","sourcePosChanged","targetPosChanged","updateNodeDimensions","forceUpdate","tabIndex","role","selector$7","transformString","NodesSelection","onSelectionContextMenu","focus","preventScroll","NodesSelection$1","selector$6","FlowRenderer","selectionKeyCode","selectionOnDrag","panActivationKeyCode","_panOnScroll","_panOnDrag","selectionKeyPressed","panActivationKeyPressed","FlowRenderer$1","useVisibleNodes","onlyRenderVisible","createNodeTypes","nodeTypes","standardTypes","input","default","output","group","wrappedTypes","specialTypes","getPositionWithOrigin","origin","selector$5","NodeRenderer","onlyRenderVisibleElements","resizeObserverRef","observer","entries","updates","entry","disconnect","focusable","clampedPosition","posX","posY","posOrigin","onNodeClick","onNodeMouseEnter","onNodeMouseMove","onNodeMouseLeave","onNodeContextMenu","onNodeDoubleClick","NodeRenderer$1","shiftX","shift","shiftY","EdgeUpdaterClassName","EdgeAnchor","radius","onMouseOut","cx","cy","r","stroke","alwaysValidConnection","wrapEdge","EdgeComponent","EdgeWrapper","onEdgeDoubleClick","animated","sourceHandleId","targetHandleId","edgeUpdaterRadius","onEdgeUpdate","onEdgeUpdateStart","isUpdatable","updateHover","setUpdateHover","updating","setUpdating","markerStartUrl","markerEndUrl","onEdgeClick","addSelectedEdges","onEdgeDoubleClickHandler","onEdgeContextMenu","onEdgeMouseEnter","onEdgeMouseMove","onEdgeMouseLeave","handleEdgeUpdater","isSourceHandle","_onEdgeUpdateEnd","evt","onConnectEdge","onEdgeUpdaterSourceMouseDown","onEdgeUpdaterTargetMouseDown","onEdgeUpdaterMouseEnter","onEdgeUpdaterMouseOut","inactive","createEdgeTypes","edgeTypes","straight","bezier","step","smoothstep","simplebezier","getHandlePosition","getHandle","getEdgePositions","sourceNodeRect","targetNodeRect","sourceHandlePos","targetHandlePos","isEdgeVisible","sourcePos","targetPos","sourceWidth","sourceHeight","targetWidth","targetHeight","edgeBox","viewBox","getNodeData","defaultEdgeTree","level","isMaxLevel","groupEdgesByZLevel","elevateEdgesOnSelect","maxLevel","levelLookup","tree","hasZIndex","targetNode","sourceNode","edgeOrConnectedNodeSelected","selectedZIndex","edgeTree","useVisibleEdges","ArrowSymbol","color","strokeLinecap","strokeLinejoin","ArrowClosedSymbol","MarkerSymbols","Arrow","ArrowClosed","useMarkerSymbol","symbol","symbolExists","Marker","markerUnits","orient","markerWidth","markerHeight","refX","refY","markerSelector","defaultColor","ids","markers","markerId","localeCompare","MarkerDefinitions","m","MarkerDefinitions$1","selector$4","EdgeRenderer","defaultMarkerColor","sourceHandleBounds","sourceIsValid","targetHandleBounds","targetIsValid","targetNodeHandles","updatable","EdgeRenderer$1","selector$3","Viewport","useOnInitHandler","onInit","rfInstance","isInitialized","oppositePosition","ConnectionLine","Bezier","CustomComponent","fromNode","toX","toY","fromHandleBounds","Loose","fromHandle","fromHandleX","fromHandleY","fromX","fromY","fromPosition","toPosition","connectionLineType","connectionLineStyle","dAttr","pathParams","Step","SmoothStep","SimpleBezier","selector$2","ConnectionLineWrapper","component","useNodeOrEdgeTypes","nodeOrEdgeTypes","createTypes","typesKeysRef","typesParsed","typeKeys","GraphView","connectionLineComponent","connectionLineContainerStyle","nodeTypesWrapped","edgeTypesWrapped","GraphView$1","infiniteExtent","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","initialState","fitViewOnInitOptions","createRFStore","viewportNode","getComputedStyle","m22","DOMMatrixReadOnly","update","doUpdate","nextFitViewOnInitDone","nodeDragItems","positionChanged","triggerNodeChanges","edgeId","storeEdges","nodesToUnselect","edgesToUnselect","transformChanged","is","ReactFlowProvider","storeRef","Wrapper","isWrapped","defaultNodeTypes","defaultEdgeTypes","initNodeOrigin","initSnapGrid","initDefaultViewport","wrapperStyle","ReactFlow","attributionPosition","selector$1","EdgeLabelRenderer","edgeLabelRenderer","useUpdateNodeInternals","updateIds","updateId","nodesSelector","useNodes","edgesSelector","useEdges","viewportSelector","useViewport","createUseItemsState","initialItems","setItems","onItemsChange","useNodesState","useEdgesState","useOnViewportChange","onChange","onEnd","useOnSelectionChange","nextSelectionChangeHandlers","nextHandlers","defaultOptions","useNodesInitialized"],"sources":["C:/Em1/ReactFlow/node_modules/@reactflow/core/dist/esm/index.mjs"],"sourcesContent":["import React, { createContext, useContext, useMemo, memo, useRef, useState, useEffect, forwardRef, useCallback } from 'react';\nimport cc from 'classcat';\nimport { useStoreWithEqualityFn, createWithEqualityFn } from 'zustand/traditional';\nimport { shallow } from 'zustand/shallow';\nimport { zoomIdentity, zoom } from 'd3-zoom';\nimport { select, pointer } from 'd3-selection';\nimport { drag } from 'd3-drag';\nimport { createPortal } from 'react-dom';\n\nconst StoreContext = createContext(null);\nconst Provider$1 = StoreContext.Provider;\n\nconst errorMessages = {\n    error001: () => '[React Flow]: Seems like you have not used zustand provider as an ancestor. Help: https://reactflow.dev/error#001',\n    error002: () => \"It looks like you've created a new nodeTypes or edgeTypes object. If this wasn't on purpose please define the nodeTypes/edgeTypes outside of the component or memoize them.\",\n    error003: (nodeType) => `Node type \"${nodeType}\" not found. Using fallback type \"default\".`,\n    error004: () => 'The React Flow parent container needs a width and a height to render the graph.',\n    error005: () => 'Only child nodes can use a parent extent.',\n    error006: () => \"Can't create edge. An edge needs a source and a target.\",\n    error007: (id) => `The old edge with id=${id} does not exist.`,\n    error009: (type) => `Marker type \"${type}\" doesn't exist.`,\n    error008: (sourceHandle, edge) => `Couldn't create edge for ${!sourceHandle ? 'source' : 'target'} handle id: \"${!sourceHandle ? edge.sourceHandle : edge.targetHandle}\", edge id: ${edge.id}.`,\n    error010: () => 'Handle: No node id found. Make sure to only use a Handle inside a custom Node.',\n    error011: (edgeType) => `Edge type \"${edgeType}\" not found. Using fallback type \"default\".`,\n    error012: (id) => `Node with id \"${id}\" does not exist, it may have been removed. This can happen when a node is deleted before the \"onNodeClick\" handler is called.`,\n};\n\nconst zustandErrorMessage = errorMessages['error001']();\nfunction useStore(selector, equalityFn) {\n    const store = useContext(StoreContext);\n    if (store === null) {\n        throw new Error(zustandErrorMessage);\n    }\n    return useStoreWithEqualityFn(store, selector, equalityFn);\n}\nconst useStoreApi = () => {\n    const store = useContext(StoreContext);\n    if (store === null) {\n        throw new Error(zustandErrorMessage);\n    }\n    return useMemo(() => ({\n        getState: store.getState,\n        setState: store.setState,\n        subscribe: store.subscribe,\n        destroy: store.destroy,\n    }), [store]);\n};\n\nconst selector$g = (s) => (s.userSelectionActive ? 'none' : 'all');\nfunction Panel({ position, children, className, style, ...rest }) {\n    const pointerEvents = useStore(selector$g);\n    const positionClasses = `${position}`.split('-');\n    return (React.createElement(\"div\", { className: cc(['react-flow__panel', className, ...positionClasses]), style: { ...style, pointerEvents }, ...rest }, children));\n}\n\nfunction Attribution({ proOptions, position = 'bottom-right' }) {\n    if (proOptions?.hideAttribution) {\n        return null;\n    }\n    return (React.createElement(Panel, { position: position, className: \"react-flow__attribution\", \"data-message\": \"Please only hide this attribution when you are subscribed to React Flow Pro: https://reactflow.dev/pro\" },\n        React.createElement(\"a\", { href: \"https://reactflow.dev\", target: \"_blank\", rel: \"noopener noreferrer\", \"aria-label\": \"React Flow attribution\" }, \"React Flow\")));\n}\n\nconst EdgeText = ({ x, y, label, labelStyle = {}, labelShowBg = true, labelBgStyle = {}, labelBgPadding = [2, 4], labelBgBorderRadius = 2, children, className, ...rest }) => {\n    const edgeRef = useRef(null);\n    const [edgeTextBbox, setEdgeTextBbox] = useState({ x: 0, y: 0, width: 0, height: 0 });\n    const edgeTextClasses = cc(['react-flow__edge-textwrapper', className]);\n    useEffect(() => {\n        if (edgeRef.current) {\n            const textBbox = edgeRef.current.getBBox();\n            setEdgeTextBbox({\n                x: textBbox.x,\n                y: textBbox.y,\n                width: textBbox.width,\n                height: textBbox.height,\n            });\n        }\n    }, [label]);\n    if (typeof label === 'undefined' || !label) {\n        return null;\n    }\n    return (React.createElement(\"g\", { transform: `translate(${x - edgeTextBbox.width / 2} ${y - edgeTextBbox.height / 2})`, className: edgeTextClasses, visibility: edgeTextBbox.width ? 'visible' : 'hidden', ...rest },\n        labelShowBg && (React.createElement(\"rect\", { width: edgeTextBbox.width + 2 * labelBgPadding[0], x: -labelBgPadding[0], y: -labelBgPadding[1], height: edgeTextBbox.height + 2 * labelBgPadding[1], className: \"react-flow__edge-textbg\", style: labelBgStyle, rx: labelBgBorderRadius, ry: labelBgBorderRadius })),\n        React.createElement(\"text\", { className: \"react-flow__edge-text\", y: edgeTextBbox.height / 2, dy: \"0.3em\", ref: edgeRef, style: labelStyle }, label),\n        children));\n};\nvar EdgeText$1 = memo(EdgeText);\n\nconst getDimensions = (node) => ({\n    width: node.offsetWidth,\n    height: node.offsetHeight,\n});\nconst clamp = (val, min = 0, max = 1) => Math.min(Math.max(val, min), max);\nconst clampPosition = (position = { x: 0, y: 0 }, extent) => ({\n    x: clamp(position.x, extent[0][0], extent[1][0]),\n    y: clamp(position.y, extent[0][1], extent[1][1]),\n});\n// returns a number between 0 and 1 that represents the velocity of the movement\n// when the mouse is close to the edge of the canvas\nconst calcAutoPanVelocity = (value, min, max) => {\n    if (value < min) {\n        return clamp(Math.abs(value - min), 1, 50) / 50;\n    }\n    else if (value > max) {\n        return -clamp(Math.abs(value - max), 1, 50) / 50;\n    }\n    return 0;\n};\nconst calcAutoPan = (pos, bounds) => {\n    const xMovement = calcAutoPanVelocity(pos.x, 35, bounds.width - 35) * 20;\n    const yMovement = calcAutoPanVelocity(pos.y, 35, bounds.height - 35) * 20;\n    return [xMovement, yMovement];\n};\nconst getHostForElement = (element) => element.getRootNode?.() || window?.document;\nconst getBoundsOfBoxes = (box1, box2) => ({\n    x: Math.min(box1.x, box2.x),\n    y: Math.min(box1.y, box2.y),\n    x2: Math.max(box1.x2, box2.x2),\n    y2: Math.max(box1.y2, box2.y2),\n});\nconst rectToBox = ({ x, y, width, height }) => ({\n    x,\n    y,\n    x2: x + width,\n    y2: y + height,\n});\nconst boxToRect = ({ x, y, x2, y2 }) => ({\n    x,\n    y,\n    width: x2 - x,\n    height: y2 - y,\n});\nconst nodeToRect = (node) => ({\n    ...(node.positionAbsolute || { x: 0, y: 0 }),\n    width: node.width || 0,\n    height: node.height || 0,\n});\nconst getBoundsOfRects = (rect1, rect2) => boxToRect(getBoundsOfBoxes(rectToBox(rect1), rectToBox(rect2)));\nconst getOverlappingArea = (rectA, rectB) => {\n    const xOverlap = Math.max(0, Math.min(rectA.x + rectA.width, rectB.x + rectB.width) - Math.max(rectA.x, rectB.x));\n    const yOverlap = Math.max(0, Math.min(rectA.y + rectA.height, rectB.y + rectB.height) - Math.max(rectA.y, rectB.y));\n    return Math.ceil(xOverlap * yOverlap);\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isRectObject = (obj) => isNumeric(obj.width) && isNumeric(obj.height) && isNumeric(obj.x) && isNumeric(obj.y);\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nconst isNumeric = (n) => !isNaN(n) && isFinite(n);\nconst internalsSymbol = Symbol.for('internals');\n// used for a11y key board controls for nodes and edges\nconst elementSelectionKeys = ['Enter', ' ', 'Escape'];\nconst devWarn = (id, message) => {\n    if (process.env.NODE_ENV === 'development') {\n        console.warn(`[React Flow]: ${message} Help: https://reactflow.dev/error#${id}`);\n    }\n};\nconst isReactKeyboardEvent = (event) => 'nativeEvent' in event;\nfunction isInputDOMNode(event) {\n    const kbEvent = isReactKeyboardEvent(event) ? event.nativeEvent : event;\n    // using composed path for handling shadow dom\n    const target = (kbEvent.composedPath?.()?.[0] || event.target);\n    const isInput = ['INPUT', 'SELECT', 'TEXTAREA'].includes(target?.nodeName) || target?.hasAttribute('contenteditable');\n    // when an input field is focused we don't want to trigger deletion or movement of nodes\n    return isInput || !!target?.closest('.nokey');\n}\nconst isMouseEvent = (event) => 'clientX' in event;\nconst getEventPosition = (event, bounds) => {\n    const isMouseTriggered = isMouseEvent(event);\n    const evtX = isMouseTriggered ? event.clientX : event.touches?.[0].clientX;\n    const evtY = isMouseTriggered ? event.clientY : event.touches?.[0].clientY;\n    return {\n        x: evtX - (bounds?.left ?? 0),\n        y: evtY - (bounds?.top ?? 0),\n    };\n};\nconst isMacOs = () => typeof navigator !== 'undefined' && navigator?.userAgent?.indexOf('Mac') >= 0;\n\nconst BaseEdge = ({ id, path, labelX, labelY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, markerEnd, markerStart, interactionWidth = 20, }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"path\", { id: id, style: style, d: path, fill: \"none\", className: \"react-flow__edge-path\", markerEnd: markerEnd, markerStart: markerStart }),\n        interactionWidth && (React.createElement(\"path\", { d: path, fill: \"none\", strokeOpacity: 0, strokeWidth: interactionWidth, className: \"react-flow__edge-interaction\" })),\n        label && isNumeric(labelX) && isNumeric(labelY) ? (React.createElement(EdgeText$1, { x: labelX, y: labelY, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius })) : null));\n};\nBaseEdge.displayName = 'BaseEdge';\n\nconst getMarkerEnd = (markerType, markerEndId) => {\n    if (typeof markerEndId !== 'undefined' && markerEndId) {\n        return `url(#${markerEndId})`;\n    }\n    return typeof markerType !== 'undefined' ? `url(#react-flow__${markerType})` : 'none';\n};\nfunction getMouseHandler$1(id, getState, handler) {\n    return handler === undefined\n        ? handler\n        : (event) => {\n            const edge = getState().edges.find((e) => e.id === id);\n            if (edge) {\n                handler(event, { ...edge });\n            }\n        };\n}\n// this is used for straight edges and simple smoothstep edges (LTR, RTL, BTT, TTB)\nfunction getEdgeCenter({ sourceX, sourceY, targetX, targetY, }) {\n    const xOffset = Math.abs(targetX - sourceX) / 2;\n    const centerX = targetX < sourceX ? targetX + xOffset : targetX - xOffset;\n    const yOffset = Math.abs(targetY - sourceY) / 2;\n    const centerY = targetY < sourceY ? targetY + yOffset : targetY - yOffset;\n    return [centerX, centerY, xOffset, yOffset];\n}\nfunction getBezierEdgeCenter({ sourceX, sourceY, targetX, targetY, sourceControlX, sourceControlY, targetControlX, targetControlY, }) {\n    // cubic bezier t=0.5 mid point, not the actual mid point, but easy to calculate\n    // https://stackoverflow.com/questions/67516101/how-to-find-distance-mid-point-of-bezier-curve\n    const centerX = sourceX * 0.125 + sourceControlX * 0.375 + targetControlX * 0.375 + targetX * 0.125;\n    const centerY = sourceY * 0.125 + sourceControlY * 0.375 + targetControlY * 0.375 + targetY * 0.125;\n    const offsetX = Math.abs(centerX - sourceX);\n    const offsetY = Math.abs(centerY - sourceY);\n    return [centerX, centerY, offsetX, offsetY];\n}\n\nvar ConnectionMode;\n(function (ConnectionMode) {\n    ConnectionMode[\"Strict\"] = \"strict\";\n    ConnectionMode[\"Loose\"] = \"loose\";\n})(ConnectionMode || (ConnectionMode = {}));\nvar PanOnScrollMode;\n(function (PanOnScrollMode) {\n    PanOnScrollMode[\"Free\"] = \"free\";\n    PanOnScrollMode[\"Vertical\"] = \"vertical\";\n    PanOnScrollMode[\"Horizontal\"] = \"horizontal\";\n})(PanOnScrollMode || (PanOnScrollMode = {}));\nvar SelectionMode;\n(function (SelectionMode) {\n    SelectionMode[\"Partial\"] = \"partial\";\n    SelectionMode[\"Full\"] = \"full\";\n})(SelectionMode || (SelectionMode = {}));\n\nvar ConnectionLineType;\n(function (ConnectionLineType) {\n    ConnectionLineType[\"Bezier\"] = \"default\";\n    ConnectionLineType[\"Straight\"] = \"straight\";\n    ConnectionLineType[\"Step\"] = \"step\";\n    ConnectionLineType[\"SmoothStep\"] = \"smoothstep\";\n    ConnectionLineType[\"SimpleBezier\"] = \"simplebezier\";\n})(ConnectionLineType || (ConnectionLineType = {}));\nvar MarkerType;\n(function (MarkerType) {\n    MarkerType[\"Arrow\"] = \"arrow\";\n    MarkerType[\"ArrowClosed\"] = \"arrowclosed\";\n})(MarkerType || (MarkerType = {}));\n\nvar Position;\n(function (Position) {\n    Position[\"Left\"] = \"left\";\n    Position[\"Top\"] = \"top\";\n    Position[\"Right\"] = \"right\";\n    Position[\"Bottom\"] = \"bottom\";\n})(Position || (Position = {}));\n\nfunction getControl({ pos, x1, y1, x2, y2 }) {\n    if (pos === Position.Left || pos === Position.Right) {\n        return [0.5 * (x1 + x2), y1];\n    }\n    return [x1, 0.5 * (y1 + y2)];\n}\nfunction getSimpleBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, }) {\n    const [sourceControlX, sourceControlY] = getControl({\n        pos: sourcePosition,\n        x1: sourceX,\n        y1: sourceY,\n        x2: targetX,\n        y2: targetY,\n    });\n    const [targetControlX, targetControlY] = getControl({\n        pos: targetPosition,\n        x1: targetX,\n        y1: targetY,\n        x2: sourceX,\n        y2: sourceY,\n    });\n    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n        sourceControlX,\n        sourceControlY,\n        targetControlX,\n        targetControlY,\n    });\n    return [\n        `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,\n        labelX,\n        labelY,\n        offsetX,\n        offsetY,\n    ];\n}\nconst SimpleBezierEdge = memo(({ sourceX, sourceY, targetX, targetY, sourcePosition = Position.Bottom, targetPosition = Position.Top, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, markerEnd, markerStart, interactionWidth, }) => {\n    const [path, labelX, labelY] = getSimpleBezierPath({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition,\n    });\n    return (React.createElement(BaseEdge, { path: path, labelX: labelX, labelY: labelY, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, style: style, markerEnd: markerEnd, markerStart: markerStart, interactionWidth: interactionWidth }));\n});\nSimpleBezierEdge.displayName = 'SimpleBezierEdge';\n\nconst handleDirections = {\n    [Position.Left]: { x: -1, y: 0 },\n    [Position.Right]: { x: 1, y: 0 },\n    [Position.Top]: { x: 0, y: -1 },\n    [Position.Bottom]: { x: 0, y: 1 },\n};\nconst getDirection = ({ source, sourcePosition = Position.Bottom, target, }) => {\n    if (sourcePosition === Position.Left || sourcePosition === Position.Right) {\n        return source.x < target.x ? { x: 1, y: 0 } : { x: -1, y: 0 };\n    }\n    return source.y < target.y ? { x: 0, y: 1 } : { x: 0, y: -1 };\n};\nconst distance = (a, b) => Math.sqrt(Math.pow(b.x - a.x, 2) + Math.pow(b.y - a.y, 2));\n// ith this function we try to mimic a orthogonal edge routing behaviour\n// It's not as good as a real orthogonal edge routing but it's faster and good enough as a default for step and smooth step edges\nfunction getPoints({ source, sourcePosition = Position.Bottom, target, targetPosition = Position.Top, center, offset, }) {\n    const sourceDir = handleDirections[sourcePosition];\n    const targetDir = handleDirections[targetPosition];\n    const sourceGapped = { x: source.x + sourceDir.x * offset, y: source.y + sourceDir.y * offset };\n    const targetGapped = { x: target.x + targetDir.x * offset, y: target.y + targetDir.y * offset };\n    const dir = getDirection({\n        source: sourceGapped,\n        sourcePosition,\n        target: targetGapped,\n    });\n    const dirAccessor = dir.x !== 0 ? 'x' : 'y';\n    const currDir = dir[dirAccessor];\n    let points = [];\n    let centerX, centerY;\n    const sourceGapOffset = { x: 0, y: 0 };\n    const targetGapOffset = { x: 0, y: 0 };\n    const [defaultCenterX, defaultCenterY, defaultOffsetX, defaultOffsetY] = getEdgeCenter({\n        sourceX: source.x,\n        sourceY: source.y,\n        targetX: target.x,\n        targetY: target.y,\n    });\n    // opposite handle positions, default case\n    if (sourceDir[dirAccessor] * targetDir[dirAccessor] === -1) {\n        centerX = center.x ?? defaultCenterX;\n        centerY = center.y ?? defaultCenterY;\n        //    --->\n        //    |\n        // >---\n        const verticalSplit = [\n            { x: centerX, y: sourceGapped.y },\n            { x: centerX, y: targetGapped.y },\n        ];\n        //    |\n        //  ---\n        //  |\n        const horizontalSplit = [\n            { x: sourceGapped.x, y: centerY },\n            { x: targetGapped.x, y: centerY },\n        ];\n        if (sourceDir[dirAccessor] === currDir) {\n            points = dirAccessor === 'x' ? verticalSplit : horizontalSplit;\n        }\n        else {\n            points = dirAccessor === 'x' ? horizontalSplit : verticalSplit;\n        }\n    }\n    else {\n        // sourceTarget means we take x from source and y from target, targetSource is the opposite\n        const sourceTarget = [{ x: sourceGapped.x, y: targetGapped.y }];\n        const targetSource = [{ x: targetGapped.x, y: sourceGapped.y }];\n        // this handles edges with same handle positions\n        if (dirAccessor === 'x') {\n            points = sourceDir.x === currDir ? targetSource : sourceTarget;\n        }\n        else {\n            points = sourceDir.y === currDir ? sourceTarget : targetSource;\n        }\n        if (sourcePosition === targetPosition) {\n            const diff = Math.abs(source[dirAccessor] - target[dirAccessor]);\n            // if an edge goes from right to right for example (sourcePosition === targetPosition) and the distance between source.x and target.x is less than the offset, the added point and the gapped source/target will overlap. This leads to a weird edge path. To avoid this we add a gapOffset to the source/target\n            if (diff <= offset) {\n                const gapOffset = Math.min(offset - 1, offset - diff);\n                if (sourceDir[dirAccessor] === currDir) {\n                    sourceGapOffset[dirAccessor] = (sourceGapped[dirAccessor] > source[dirAccessor] ? -1 : 1) * gapOffset;\n                }\n                else {\n                    targetGapOffset[dirAccessor] = (targetGapped[dirAccessor] > target[dirAccessor] ? -1 : 1) * gapOffset;\n                }\n            }\n        }\n        // these are conditions for handling mixed handle positions like Right -> Bottom for example\n        if (sourcePosition !== targetPosition) {\n            const dirAccessorOpposite = dirAccessor === 'x' ? 'y' : 'x';\n            const isSameDir = sourceDir[dirAccessor] === targetDir[dirAccessorOpposite];\n            const sourceGtTargetOppo = sourceGapped[dirAccessorOpposite] > targetGapped[dirAccessorOpposite];\n            const sourceLtTargetOppo = sourceGapped[dirAccessorOpposite] < targetGapped[dirAccessorOpposite];\n            const flipSourceTarget = (sourceDir[dirAccessor] === 1 && ((!isSameDir && sourceGtTargetOppo) || (isSameDir && sourceLtTargetOppo))) ||\n                (sourceDir[dirAccessor] !== 1 && ((!isSameDir && sourceLtTargetOppo) || (isSameDir && sourceGtTargetOppo)));\n            if (flipSourceTarget) {\n                points = dirAccessor === 'x' ? sourceTarget : targetSource;\n            }\n        }\n        const sourceGapPoint = { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y };\n        const targetGapPoint = { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y };\n        const maxXDistance = Math.max(Math.abs(sourceGapPoint.x - points[0].x), Math.abs(targetGapPoint.x - points[0].x));\n        const maxYDistance = Math.max(Math.abs(sourceGapPoint.y - points[0].y), Math.abs(targetGapPoint.y - points[0].y));\n        // we want to place the label on the longest segment of the edge\n        if (maxXDistance >= maxYDistance) {\n            centerX = (sourceGapPoint.x + targetGapPoint.x) / 2;\n            centerY = points[0].y;\n        }\n        else {\n            centerX = points[0].x;\n            centerY = (sourceGapPoint.y + targetGapPoint.y) / 2;\n        }\n    }\n    const pathPoints = [\n        source,\n        { x: sourceGapped.x + sourceGapOffset.x, y: sourceGapped.y + sourceGapOffset.y },\n        ...points,\n        { x: targetGapped.x + targetGapOffset.x, y: targetGapped.y + targetGapOffset.y },\n        target,\n    ];\n    return [pathPoints, centerX, centerY, defaultOffsetX, defaultOffsetY];\n}\nfunction getBend(a, b, c, size) {\n    const bendSize = Math.min(distance(a, b) / 2, distance(b, c) / 2, size);\n    const { x, y } = b;\n    // no bend\n    if ((a.x === x && x === c.x) || (a.y === y && y === c.y)) {\n        return `L${x} ${y}`;\n    }\n    // first segment is horizontal\n    if (a.y === y) {\n        const xDir = a.x < c.x ? -1 : 1;\n        const yDir = a.y < c.y ? 1 : -1;\n        return `L ${x + bendSize * xDir},${y}Q ${x},${y} ${x},${y + bendSize * yDir}`;\n    }\n    const xDir = a.x < c.x ? 1 : -1;\n    const yDir = a.y < c.y ? -1 : 1;\n    return `L ${x},${y + bendSize * yDir}Q ${x},${y} ${x + bendSize * xDir},${y}`;\n}\nfunction getSmoothStepPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, borderRadius = 5, centerX, centerY, offset = 20, }) {\n    const [points, labelX, labelY, offsetX, offsetY] = getPoints({\n        source: { x: sourceX, y: sourceY },\n        sourcePosition,\n        target: { x: targetX, y: targetY },\n        targetPosition,\n        center: { x: centerX, y: centerY },\n        offset,\n    });\n    const path = points.reduce((res, p, i) => {\n        let segment = '';\n        if (i > 0 && i < points.length - 1) {\n            segment = getBend(points[i - 1], p, points[i + 1], borderRadius);\n        }\n        else {\n            segment = `${i === 0 ? 'M' : 'L'}${p.x} ${p.y}`;\n        }\n        res += segment;\n        return res;\n    }, '');\n    return [path, labelX, labelY, offsetX, offsetY];\n}\nconst SmoothStepEdge = memo(({ sourceX, sourceY, targetX, targetY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, sourcePosition = Position.Bottom, targetPosition = Position.Top, markerEnd, markerStart, pathOptions, interactionWidth, }) => {\n    const [path, labelX, labelY] = getSmoothStepPath({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition,\n        borderRadius: pathOptions?.borderRadius,\n        offset: pathOptions?.offset,\n    });\n    return (React.createElement(BaseEdge, { path: path, labelX: labelX, labelY: labelY, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, style: style, markerEnd: markerEnd, markerStart: markerStart, interactionWidth: interactionWidth }));\n});\nSmoothStepEdge.displayName = 'SmoothStepEdge';\n\nconst StepEdge = memo((props) => (React.createElement(SmoothStepEdge, { ...props, pathOptions: useMemo(() => ({ borderRadius: 0, offset: props.pathOptions?.offset }), [props.pathOptions?.offset]) })));\nStepEdge.displayName = 'StepEdge';\n\nfunction getStraightPath({ sourceX, sourceY, targetX, targetY, }) {\n    const [labelX, labelY, offsetX, offsetY] = getEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n    });\n    return [`M ${sourceX},${sourceY}L ${targetX},${targetY}`, labelX, labelY, offsetX, offsetY];\n}\nconst StraightEdge = memo(({ sourceX, sourceY, targetX, targetY, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, markerEnd, markerStart, interactionWidth, }) => {\n    const [path, labelX, labelY] = getStraightPath({ sourceX, sourceY, targetX, targetY });\n    return (React.createElement(BaseEdge, { path: path, labelX: labelX, labelY: labelY, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, style: style, markerEnd: markerEnd, markerStart: markerStart, interactionWidth: interactionWidth }));\n});\nStraightEdge.displayName = 'StraightEdge';\n\nfunction calculateControlOffset(distance, curvature) {\n    if (distance >= 0) {\n        return 0.5 * distance;\n    }\n    return curvature * 25 * Math.sqrt(-distance);\n}\nfunction getControlWithCurvature({ pos, x1, y1, x2, y2, c }) {\n    switch (pos) {\n        case Position.Left:\n            return [x1 - calculateControlOffset(x1 - x2, c), y1];\n        case Position.Right:\n            return [x1 + calculateControlOffset(x2 - x1, c), y1];\n        case Position.Top:\n            return [x1, y1 - calculateControlOffset(y1 - y2, c)];\n        case Position.Bottom:\n            return [x1, y1 + calculateControlOffset(y2 - y1, c)];\n    }\n}\nfunction getBezierPath({ sourceX, sourceY, sourcePosition = Position.Bottom, targetX, targetY, targetPosition = Position.Top, curvature = 0.25, }) {\n    const [sourceControlX, sourceControlY] = getControlWithCurvature({\n        pos: sourcePosition,\n        x1: sourceX,\n        y1: sourceY,\n        x2: targetX,\n        y2: targetY,\n        c: curvature,\n    });\n    const [targetControlX, targetControlY] = getControlWithCurvature({\n        pos: targetPosition,\n        x1: targetX,\n        y1: targetY,\n        x2: sourceX,\n        y2: sourceY,\n        c: curvature,\n    });\n    const [labelX, labelY, offsetX, offsetY] = getBezierEdgeCenter({\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n        sourceControlX,\n        sourceControlY,\n        targetControlX,\n        targetControlY,\n    });\n    return [\n        `M${sourceX},${sourceY} C${sourceControlX},${sourceControlY} ${targetControlX},${targetControlY} ${targetX},${targetY}`,\n        labelX,\n        labelY,\n        offsetX,\n        offsetY,\n    ];\n}\nconst BezierEdge = memo(({ sourceX, sourceY, targetX, targetY, sourcePosition = Position.Bottom, targetPosition = Position.Top, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, markerEnd, markerStart, pathOptions, interactionWidth, }) => {\n    const [path, labelX, labelY] = getBezierPath({\n        sourceX,\n        sourceY,\n        sourcePosition,\n        targetX,\n        targetY,\n        targetPosition,\n        curvature: pathOptions?.curvature,\n    });\n    return (React.createElement(BaseEdge, { path: path, labelX: labelX, labelY: labelY, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, style: style, markerEnd: markerEnd, markerStart: markerStart, interactionWidth: interactionWidth }));\n});\nBezierEdge.displayName = 'BezierEdge';\n\nconst NodeIdContext = createContext(null);\nconst Provider = NodeIdContext.Provider;\nNodeIdContext.Consumer;\nconst useNodeId = () => {\n    const nodeId = useContext(NodeIdContext);\n    return nodeId;\n};\n\nconst isEdge = (element) => 'id' in element && 'source' in element && 'target' in element;\nconst isNode = (element) => 'id' in element && !('source' in element) && !('target' in element);\nconst getOutgoers = (node, nodes, edges) => {\n    if (!isNode(node)) {\n        return [];\n    }\n    const outgoerIds = edges.filter((e) => e.source === node.id).map((e) => e.target);\n    return nodes.filter((n) => outgoerIds.includes(n.id));\n};\nconst getIncomers = (node, nodes, edges) => {\n    if (!isNode(node)) {\n        return [];\n    }\n    const incomersIds = edges.filter((e) => e.target === node.id).map((e) => e.source);\n    return nodes.filter((n) => incomersIds.includes(n.id));\n};\nconst getEdgeId = ({ source, sourceHandle, target, targetHandle }) => `reactflow__edge-${source}${sourceHandle || ''}-${target}${targetHandle || ''}`;\nconst getMarkerId = (marker, rfId) => {\n    if (typeof marker === 'undefined') {\n        return '';\n    }\n    if (typeof marker === 'string') {\n        return marker;\n    }\n    const idPrefix = rfId ? `${rfId}__` : '';\n    return `${idPrefix}${Object.keys(marker)\n        .sort()\n        .map((key) => `${key}=${marker[key]}`)\n        .join('&')}`;\n};\nconst connectionExists = (edge, edges) => {\n    return edges.some((el) => el.source === edge.source &&\n        el.target === edge.target &&\n        (el.sourceHandle === edge.sourceHandle || (!el.sourceHandle && !edge.sourceHandle)) &&\n        (el.targetHandle === edge.targetHandle || (!el.targetHandle && !edge.targetHandle)));\n};\nconst addEdge = (edgeParams, edges) => {\n    if (!edgeParams.source || !edgeParams.target) {\n        devWarn('006', errorMessages['error006']());\n        return edges;\n    }\n    let edge;\n    if (isEdge(edgeParams)) {\n        edge = { ...edgeParams };\n    }\n    else {\n        edge = {\n            ...edgeParams,\n            id: getEdgeId(edgeParams),\n        };\n    }\n    if (connectionExists(edge, edges)) {\n        return edges;\n    }\n    return edges.concat(edge);\n};\nconst updateEdge = (oldEdge, newConnection, edges, options = { shouldReplaceId: true }) => {\n    const { id: oldEdgeId, ...rest } = oldEdge;\n    if (!newConnection.source || !newConnection.target) {\n        devWarn('006', errorMessages['error006']());\n        return edges;\n    }\n    const foundEdge = edges.find((e) => e.id === oldEdgeId);\n    if (!foundEdge) {\n        devWarn('007', errorMessages['error007'](oldEdgeId));\n        return edges;\n    }\n    // Remove old edge and create the new edge with parameters of old edge.\n    const edge = {\n        ...rest,\n        id: options.shouldReplaceId ? getEdgeId(newConnection) : oldEdgeId,\n        source: newConnection.source,\n        target: newConnection.target,\n        sourceHandle: newConnection.sourceHandle,\n        targetHandle: newConnection.targetHandle,\n    };\n    return edges.filter((e) => e.id !== oldEdgeId).concat(edge);\n};\nconst pointToRendererPoint = ({ x, y }, [tx, ty, tScale], snapToGrid, [snapX, snapY]) => {\n    const position = {\n        x: (x - tx) / tScale,\n        y: (y - ty) / tScale,\n    };\n    if (snapToGrid) {\n        return {\n            x: snapX * Math.round(position.x / snapX),\n            y: snapY * Math.round(position.y / snapY),\n        };\n    }\n    return position;\n};\nconst rendererPointToPoint = ({ x, y }, [tx, ty, tScale]) => {\n    return {\n        x: x * tScale + tx,\n        y: y * tScale + ty,\n    };\n};\nconst getNodePositionWithOrigin = (node, nodeOrigin = [0, 0]) => {\n    if (!node) {\n        return {\n            x: 0,\n            y: 0,\n            positionAbsolute: {\n                x: 0,\n                y: 0,\n            },\n        };\n    }\n    const offsetX = (node.width ?? 0) * nodeOrigin[0];\n    const offsetY = (node.height ?? 0) * nodeOrigin[1];\n    const position = {\n        x: node.position.x - offsetX,\n        y: node.position.y - offsetY,\n    };\n    return {\n        ...position,\n        positionAbsolute: node.positionAbsolute\n            ? {\n                x: node.positionAbsolute.x - offsetX,\n                y: node.positionAbsolute.y - offsetY,\n            }\n            : position,\n    };\n};\nconst getNodesBounds = (nodes, nodeOrigin = [0, 0]) => {\n    if (nodes.length === 0) {\n        return { x: 0, y: 0, width: 0, height: 0 };\n    }\n    const box = nodes.reduce((currBox, node) => {\n        const { x, y } = getNodePositionWithOrigin(node, nodeOrigin).positionAbsolute;\n        return getBoundsOfBoxes(currBox, rectToBox({\n            x,\n            y,\n            width: node.width || 0,\n            height: node.height || 0,\n        }));\n    }, { x: Infinity, y: Infinity, x2: -Infinity, y2: -Infinity });\n    return boxToRect(box);\n};\n// @deprecated Use `getNodesBounds`.\nconst getRectOfNodes = (nodes, nodeOrigin = [0, 0]) => {\n    console.warn('[DEPRECATED] `getRectOfNodes` is deprecated. Instead use `getNodesBounds` https://reactflow.dev/api-reference/utils/get-nodes-bounds.');\n    return getNodesBounds(nodes, nodeOrigin);\n};\nconst getNodesInside = (nodeInternals, rect, [tx, ty, tScale] = [0, 0, 1], partially = false, \n// set excludeNonSelectableNodes if you want to pay attention to the nodes \"selectable\" attribute\nexcludeNonSelectableNodes = false, nodeOrigin = [0, 0]) => {\n    const paneRect = {\n        x: (rect.x - tx) / tScale,\n        y: (rect.y - ty) / tScale,\n        width: rect.width / tScale,\n        height: rect.height / tScale,\n    };\n    const visibleNodes = [];\n    nodeInternals.forEach((node) => {\n        const { width, height, selectable = true, hidden = false } = node;\n        if ((excludeNonSelectableNodes && !selectable) || hidden) {\n            return false;\n        }\n        const { positionAbsolute } = getNodePositionWithOrigin(node, nodeOrigin);\n        const nodeRect = {\n            x: positionAbsolute.x,\n            y: positionAbsolute.y,\n            width: width || 0,\n            height: height || 0,\n        };\n        const overlappingArea = getOverlappingArea(paneRect, nodeRect);\n        const notInitialized = typeof width === 'undefined' || typeof height === 'undefined' || width === null || height === null;\n        const partiallyVisible = partially && overlappingArea > 0;\n        const area = (width || 0) * (height || 0);\n        const isVisible = notInitialized || partiallyVisible || overlappingArea >= area;\n        if (isVisible || node.dragging) {\n            visibleNodes.push(node);\n        }\n    });\n    return visibleNodes;\n};\nconst getConnectedEdges = (nodes, edges) => {\n    const nodeIds = nodes.map((node) => node.id);\n    return edges.filter((edge) => nodeIds.includes(edge.source) || nodeIds.includes(edge.target));\n};\n// @deprecated Use `getViewportForBounds`.\nconst getTransformForBounds = (bounds, width, height, minZoom, maxZoom, padding = 0.1) => {\n    const { x, y, zoom } = getViewportForBounds(bounds, width, height, minZoom, maxZoom, padding);\n    console.warn('[DEPRECATED] `getTransformForBounds` is deprecated. Instead use `getViewportForBounds`. Beware that the return value is type Viewport (`{ x: number, y: number, zoom: number }`) instead of Transform (`[number, number, number]`). https://reactflow.dev/api-reference/utils/get-viewport-for-bounds');\n    return [x, y, zoom];\n};\nconst getViewportForBounds = (bounds, width, height, minZoom, maxZoom, padding = 0.1) => {\n    const xZoom = width / (bounds.width * (1 + padding));\n    const yZoom = height / (bounds.height * (1 + padding));\n    const zoom = Math.min(xZoom, yZoom);\n    const clampedZoom = clamp(zoom, minZoom, maxZoom);\n    const boundsCenterX = bounds.x + bounds.width / 2;\n    const boundsCenterY = bounds.y + bounds.height / 2;\n    const x = width / 2 - boundsCenterX * clampedZoom;\n    const y = height / 2 - boundsCenterY * clampedZoom;\n    return { x, y, zoom: clampedZoom };\n};\nconst getD3Transition = (selection, duration = 0) => {\n    return selection.transition().duration(duration);\n};\n\n// this functions collects all handles and adds an absolute position\n// so that we can later find the closest handle to the mouse position\nfunction getHandles(node, handleBounds, type, currentHandle) {\n    return (handleBounds[type] || []).reduce((res, h) => {\n        if (`${node.id}-${h.id}-${type}` !== currentHandle) {\n            res.push({\n                id: h.id || null,\n                type,\n                nodeId: node.id,\n                x: (node.positionAbsolute?.x ?? 0) + h.x + h.width / 2,\n                y: (node.positionAbsolute?.y ?? 0) + h.y + h.height / 2,\n            });\n        }\n        return res;\n    }, []);\n}\nfunction getClosestHandle(event, doc, pos, connectionRadius, handles, validator) {\n    // we always want to prioritize the handle below the mouse cursor over the closest distance handle,\n    // because it could be that the center of another handle is closer to the mouse pointer than the handle below the cursor\n    const { x, y } = getEventPosition(event);\n    const domNodes = doc.elementsFromPoint(x, y);\n    const handleBelow = domNodes.find((el) => el.classList.contains('react-flow__handle'));\n    if (handleBelow) {\n        const handleNodeId = handleBelow.getAttribute('data-nodeid');\n        if (handleNodeId) {\n            const handleType = getHandleType(undefined, handleBelow);\n            const handleId = handleBelow.getAttribute('data-handleid');\n            const validHandleResult = validator({ nodeId: handleNodeId, id: handleId, type: handleType });\n            if (validHandleResult) {\n                const handle = handles.find((h) => h.nodeId === handleNodeId && h.type === handleType && h.id === handleId);\n                return {\n                    handle: {\n                        id: handleId,\n                        type: handleType,\n                        nodeId: handleNodeId,\n                        x: handle?.x || pos.x,\n                        y: handle?.y || pos.y,\n                    },\n                    validHandleResult,\n                };\n            }\n        }\n    }\n    // if we couldn't find a handle below the mouse cursor we look for the closest distance based on the connectionRadius\n    let closestHandles = [];\n    let minDistance = Infinity;\n    handles.forEach((handle) => {\n        const distance = Math.sqrt((handle.x - pos.x) ** 2 + (handle.y - pos.y) ** 2);\n        if (distance <= connectionRadius) {\n            const validHandleResult = validator(handle);\n            if (distance <= minDistance) {\n                if (distance < minDistance) {\n                    closestHandles = [{ handle, validHandleResult }];\n                }\n                else if (distance === minDistance) {\n                    // when multiple handles are on the same distance we collect all of them\n                    closestHandles.push({\n                        handle,\n                        validHandleResult,\n                    });\n                }\n                minDistance = distance;\n            }\n        }\n    });\n    if (!closestHandles.length) {\n        return { handle: null, validHandleResult: defaultResult() };\n    }\n    if (closestHandles.length === 1) {\n        return closestHandles[0];\n    }\n    const hasValidHandle = closestHandles.some(({ validHandleResult }) => validHandleResult.isValid);\n    const hasTargetHandle = closestHandles.some(({ handle }) => handle.type === 'target');\n    // if multiple handles are layouted on top of each other we prefer the one with type = target and the one that is valid\n    return (closestHandles.find(({ handle, validHandleResult }) => hasTargetHandle ? handle.type === 'target' : (hasValidHandle ? validHandleResult.isValid : true)) || closestHandles[0]);\n}\nconst nullConnection = { source: null, target: null, sourceHandle: null, targetHandle: null };\nconst defaultResult = () => ({\n    handleDomNode: null,\n    isValid: false,\n    connection: nullConnection,\n    endHandle: null,\n});\n// checks if  and returns connection in fom of an object { source: 123, target: 312 }\nfunction isValidHandle(handle, connectionMode, fromNodeId, fromHandleId, fromType, isValidConnection, doc) {\n    const isTarget = fromType === 'target';\n    const handleToCheck = doc.querySelector(`.react-flow__handle[data-id=\"${handle?.nodeId}-${handle?.id}-${handle?.type}\"]`);\n    const result = {\n        ...defaultResult(),\n        handleDomNode: handleToCheck,\n    };\n    if (handleToCheck) {\n        const handleType = getHandleType(undefined, handleToCheck);\n        const handleNodeId = handleToCheck.getAttribute('data-nodeid');\n        const handleId = handleToCheck.getAttribute('data-handleid');\n        const connectable = handleToCheck.classList.contains('connectable');\n        const connectableEnd = handleToCheck.classList.contains('connectableend');\n        const connection = {\n            source: isTarget ? handleNodeId : fromNodeId,\n            sourceHandle: isTarget ? handleId : fromHandleId,\n            target: isTarget ? fromNodeId : handleNodeId,\n            targetHandle: isTarget ? fromHandleId : handleId,\n        };\n        result.connection = connection;\n        const isConnectable = connectable && connectableEnd;\n        // in strict mode we don't allow target to target or source to source connections\n        const isValid = isConnectable &&\n            (connectionMode === ConnectionMode.Strict\n                ? (isTarget && handleType === 'source') || (!isTarget && handleType === 'target')\n                : handleNodeId !== fromNodeId || handleId !== fromHandleId);\n        if (isValid) {\n            result.endHandle = {\n                nodeId: handleNodeId,\n                handleId,\n                type: handleType,\n            };\n            result.isValid = isValidConnection(connection);\n        }\n    }\n    return result;\n}\nfunction getHandleLookup({ nodes, nodeId, handleId, handleType }) {\n    return nodes.reduce((res, node) => {\n        if (node[internalsSymbol]) {\n            const { handleBounds } = node[internalsSymbol];\n            let sourceHandles = [];\n            let targetHandles = [];\n            if (handleBounds) {\n                sourceHandles = getHandles(node, handleBounds, 'source', `${nodeId}-${handleId}-${handleType}`);\n                targetHandles = getHandles(node, handleBounds, 'target', `${nodeId}-${handleId}-${handleType}`);\n            }\n            res.push(...sourceHandles, ...targetHandles);\n        }\n        return res;\n    }, []);\n}\nfunction getHandleType(edgeUpdaterType, handleDomNode) {\n    if (edgeUpdaterType) {\n        return edgeUpdaterType;\n    }\n    else if (handleDomNode?.classList.contains('target')) {\n        return 'target';\n    }\n    else if (handleDomNode?.classList.contains('source')) {\n        return 'source';\n    }\n    return null;\n}\nfunction resetRecentHandle(handleDomNode) {\n    handleDomNode?.classList.remove('valid', 'connecting', 'react-flow__handle-valid', 'react-flow__handle-connecting');\n}\nfunction getConnectionStatus(isInsideConnectionRadius, isHandleValid) {\n    let connectionStatus = null;\n    if (isHandleValid) {\n        connectionStatus = 'valid';\n    }\n    else if (isInsideConnectionRadius && !isHandleValid) {\n        connectionStatus = 'invalid';\n    }\n    return connectionStatus;\n}\n\nfunction handlePointerDown({ event, handleId, nodeId, onConnect, isTarget, getState, setState, isValidConnection, edgeUpdaterType, onEdgeUpdateEnd, }) {\n    // when react-flow is used inside a shadow root we can't use document\n    const doc = getHostForElement(event.target);\n    const { connectionMode, domNode, autoPanOnConnect, connectionRadius, onConnectStart, panBy, getNodes, cancelConnection, } = getState();\n    let autoPanId = 0;\n    let closestHandle;\n    const { x, y } = getEventPosition(event);\n    const clickedHandle = doc?.elementFromPoint(x, y);\n    const handleType = getHandleType(edgeUpdaterType, clickedHandle);\n    const containerBounds = domNode?.getBoundingClientRect();\n    if (!containerBounds || !handleType) {\n        return;\n    }\n    let prevActiveHandle;\n    let connectionPosition = getEventPosition(event, containerBounds);\n    let autoPanStarted = false;\n    let connection = null;\n    let isValid = false;\n    let handleDomNode = null;\n    const handleLookup = getHandleLookup({\n        nodes: getNodes(),\n        nodeId,\n        handleId,\n        handleType,\n    });\n    // when the user is moving the mouse close to the edge of the canvas while connecting we move the canvas\n    const autoPan = () => {\n        if (!autoPanOnConnect) {\n            return;\n        }\n        const [xMovement, yMovement] = calcAutoPan(connectionPosition, containerBounds);\n        panBy({ x: xMovement, y: yMovement });\n        autoPanId = requestAnimationFrame(autoPan);\n    };\n    setState({\n        connectionPosition,\n        connectionStatus: null,\n        // connectionNodeId etc will be removed in the next major in favor of connectionStartHandle\n        connectionNodeId: nodeId,\n        connectionHandleId: handleId,\n        connectionHandleType: handleType,\n        connectionStartHandle: {\n            nodeId,\n            handleId,\n            type: handleType,\n        },\n        connectionEndHandle: null,\n    });\n    onConnectStart?.(event, { nodeId, handleId, handleType });\n    function onPointerMove(event) {\n        const { transform } = getState();\n        connectionPosition = getEventPosition(event, containerBounds);\n        const { handle, validHandleResult } = getClosestHandle(event, doc, pointToRendererPoint(connectionPosition, transform, false, [1, 1]), connectionRadius, handleLookup, (handle) => isValidHandle(handle, connectionMode, nodeId, handleId, isTarget ? 'target' : 'source', isValidConnection, doc));\n        closestHandle = handle;\n        if (!autoPanStarted) {\n            autoPan();\n            autoPanStarted = true;\n        }\n        handleDomNode = validHandleResult.handleDomNode;\n        connection = validHandleResult.connection;\n        isValid = validHandleResult.isValid;\n        setState({\n            connectionPosition: closestHandle && isValid\n                ? rendererPointToPoint({\n                    x: closestHandle.x,\n                    y: closestHandle.y,\n                }, transform)\n                : connectionPosition,\n            connectionStatus: getConnectionStatus(!!closestHandle, isValid),\n            connectionEndHandle: validHandleResult.endHandle,\n        });\n        if (!closestHandle && !isValid && !handleDomNode) {\n            return resetRecentHandle(prevActiveHandle);\n        }\n        if (connection.source !== connection.target && handleDomNode) {\n            resetRecentHandle(prevActiveHandle);\n            prevActiveHandle = handleDomNode;\n            // @todo: remove the old class names \"react-flow__handle-\" in the next major version\n            handleDomNode.classList.add('connecting', 'react-flow__handle-connecting');\n            handleDomNode.classList.toggle('valid', isValid);\n            handleDomNode.classList.toggle('react-flow__handle-valid', isValid);\n        }\n    }\n    function onPointerUp(event) {\n        if ((closestHandle || handleDomNode) && connection && isValid) {\n            onConnect?.(connection);\n        }\n        // it's important to get a fresh reference from the store here\n        // in order to get the latest state of onConnectEnd\n        getState().onConnectEnd?.(event);\n        if (edgeUpdaterType) {\n            onEdgeUpdateEnd?.(event);\n        }\n        resetRecentHandle(prevActiveHandle);\n        cancelConnection();\n        cancelAnimationFrame(autoPanId);\n        autoPanStarted = false;\n        isValid = false;\n        connection = null;\n        handleDomNode = null;\n        doc.removeEventListener('mousemove', onPointerMove);\n        doc.removeEventListener('mouseup', onPointerUp);\n        doc.removeEventListener('touchmove', onPointerMove);\n        doc.removeEventListener('touchend', onPointerUp);\n    }\n    doc.addEventListener('mousemove', onPointerMove);\n    doc.addEventListener('mouseup', onPointerUp);\n    doc.addEventListener('touchmove', onPointerMove);\n    doc.addEventListener('touchend', onPointerUp);\n}\n\nconst alwaysValid = () => true;\nconst selector$f = (s) => ({\n    connectionStartHandle: s.connectionStartHandle,\n    connectOnClick: s.connectOnClick,\n    noPanClassName: s.noPanClassName,\n});\nconst connectingSelector = (nodeId, handleId, type) => (state) => {\n    const { connectionStartHandle: startHandle, connectionEndHandle: endHandle, connectionClickStartHandle: clickHandle, } = state;\n    return {\n        connecting: (startHandle?.nodeId === nodeId && startHandle?.handleId === handleId && startHandle?.type === type) ||\n            (endHandle?.nodeId === nodeId && endHandle?.handleId === handleId && endHandle?.type === type),\n        clickConnecting: clickHandle?.nodeId === nodeId && clickHandle?.handleId === handleId && clickHandle?.type === type,\n    };\n};\nconst Handle = forwardRef(({ type = 'source', position = Position.Top, isValidConnection, isConnectable = true, isConnectableStart = true, isConnectableEnd = true, id, onConnect, children, className, onMouseDown, onTouchStart, ...rest }, ref) => {\n    const handleId = id || null;\n    const isTarget = type === 'target';\n    const store = useStoreApi();\n    const nodeId = useNodeId();\n    const { connectOnClick, noPanClassName } = useStore(selector$f, shallow);\n    const { connecting, clickConnecting } = useStore(connectingSelector(nodeId, handleId, type), shallow);\n    if (!nodeId) {\n        store.getState().onError?.('010', errorMessages['error010']());\n    }\n    const onConnectExtended = (params) => {\n        const { defaultEdgeOptions, onConnect: onConnectAction, hasDefaultEdges } = store.getState();\n        const edgeParams = {\n            ...defaultEdgeOptions,\n            ...params,\n        };\n        if (hasDefaultEdges) {\n            const { edges, setEdges } = store.getState();\n            setEdges(addEdge(edgeParams, edges));\n        }\n        onConnectAction?.(edgeParams);\n        onConnect?.(edgeParams);\n    };\n    const onPointerDown = (event) => {\n        if (!nodeId) {\n            return;\n        }\n        const isMouseTriggered = isMouseEvent(event);\n        if (isConnectableStart && ((isMouseTriggered && event.button === 0) || !isMouseTriggered)) {\n            handlePointerDown({\n                event,\n                handleId,\n                nodeId,\n                onConnect: onConnectExtended,\n                isTarget,\n                getState: store.getState,\n                setState: store.setState,\n                isValidConnection: isValidConnection || store.getState().isValidConnection || alwaysValid,\n            });\n        }\n        if (isMouseTriggered) {\n            onMouseDown?.(event);\n        }\n        else {\n            onTouchStart?.(event);\n        }\n    };\n    const onClick = (event) => {\n        const { onClickConnectStart, onClickConnectEnd, connectionClickStartHandle, connectionMode, isValidConnection: isValidConnectionStore, } = store.getState();\n        if (!nodeId || (!connectionClickStartHandle && !isConnectableStart)) {\n            return;\n        }\n        if (!connectionClickStartHandle) {\n            onClickConnectStart?.(event, { nodeId, handleId, handleType: type });\n            store.setState({ connectionClickStartHandle: { nodeId, type, handleId } });\n            return;\n        }\n        const doc = getHostForElement(event.target);\n        const isValidConnectionHandler = isValidConnection || isValidConnectionStore || alwaysValid;\n        const { connection, isValid } = isValidHandle({\n            nodeId,\n            id: handleId,\n            type,\n        }, connectionMode, connectionClickStartHandle.nodeId, connectionClickStartHandle.handleId || null, connectionClickStartHandle.type, isValidConnectionHandler, doc);\n        if (isValid) {\n            onConnectExtended(connection);\n        }\n        onClickConnectEnd?.(event);\n        store.setState({ connectionClickStartHandle: null });\n    };\n    return (React.createElement(\"div\", { \"data-handleid\": handleId, \"data-nodeid\": nodeId, \"data-handlepos\": position, \"data-id\": `${nodeId}-${handleId}-${type}`, className: cc([\n            'react-flow__handle',\n            `react-flow__handle-${position}`,\n            'nodrag',\n            noPanClassName,\n            className,\n            {\n                source: !isTarget,\n                target: isTarget,\n                connectable: isConnectable,\n                connectablestart: isConnectableStart,\n                connectableend: isConnectableEnd,\n                connecting: clickConnecting,\n                // this class is used to style the handle when the user is connecting\n                connectionindicator: isConnectable && ((isConnectableStart && !connecting) || (isConnectableEnd && connecting)),\n            },\n        ]), onMouseDown: onPointerDown, onTouchStart: onPointerDown, onClick: connectOnClick ? onClick : undefined, ref: ref, ...rest }, children));\n});\nHandle.displayName = 'Handle';\nvar Handle$1 = memo(Handle);\n\nconst DefaultNode = ({ data, isConnectable, targetPosition = Position.Top, sourcePosition = Position.Bottom, }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Handle$1, { type: \"target\", position: targetPosition, isConnectable: isConnectable }),\n        data?.label,\n        React.createElement(Handle$1, { type: \"source\", position: sourcePosition, isConnectable: isConnectable })));\n};\nDefaultNode.displayName = 'DefaultNode';\nvar DefaultNode$1 = memo(DefaultNode);\n\nconst InputNode = ({ data, isConnectable, sourcePosition = Position.Bottom }) => (React.createElement(React.Fragment, null,\n    data?.label,\n    React.createElement(Handle$1, { type: \"source\", position: sourcePosition, isConnectable: isConnectable })));\nInputNode.displayName = 'InputNode';\nvar InputNode$1 = memo(InputNode);\n\nconst OutputNode = ({ data, isConnectable, targetPosition = Position.Top }) => (React.createElement(React.Fragment, null,\n    React.createElement(Handle$1, { type: \"target\", position: targetPosition, isConnectable: isConnectable }),\n    data?.label));\nOutputNode.displayName = 'OutputNode';\nvar OutputNode$1 = memo(OutputNode);\n\nconst GroupNode = () => null;\nGroupNode.displayName = 'GroupNode';\n\nconst selector$e = (s) => ({\n    selectedNodes: s.getNodes().filter((n) => n.selected),\n    selectedEdges: s.edges.filter((e) => e.selected).map((e) => ({ ...e })),\n});\nconst selectId = (obj) => obj.id;\nfunction areEqual(a, b) {\n    return (shallow(a.selectedNodes.map(selectId), b.selectedNodes.map(selectId)) &&\n        shallow(a.selectedEdges.map(selectId), b.selectedEdges.map(selectId)));\n}\n// This is just a helper component for calling the onSelectionChange listener.\n// @TODO: Now that we have the onNodesChange and on EdgesChange listeners, do we still need this component?\nconst SelectionListener = memo(({ onSelectionChange }) => {\n    const store = useStoreApi();\n    const { selectedNodes, selectedEdges } = useStore(selector$e, areEqual);\n    useEffect(() => {\n        const params = { nodes: selectedNodes, edges: selectedEdges };\n        onSelectionChange?.(params);\n        store.getState().onSelectionChange.forEach((fn) => fn(params));\n    }, [selectedNodes, selectedEdges, onSelectionChange]);\n    return null;\n});\nSelectionListener.displayName = 'SelectionListener';\nconst changeSelector = (s) => !!s.onSelectionChange;\nfunction Wrapper$1({ onSelectionChange }) {\n    const storeHasSelectionChange = useStore(changeSelector);\n    if (onSelectionChange || storeHasSelectionChange) {\n        return React.createElement(SelectionListener, { onSelectionChange: onSelectionChange });\n    }\n    return null;\n}\n\nconst selector$d = (s) => ({\n    setNodes: s.setNodes,\n    setEdges: s.setEdges,\n    setDefaultNodesAndEdges: s.setDefaultNodesAndEdges,\n    setMinZoom: s.setMinZoom,\n    setMaxZoom: s.setMaxZoom,\n    setTranslateExtent: s.setTranslateExtent,\n    setNodeExtent: s.setNodeExtent,\n    reset: s.reset,\n});\nfunction useStoreUpdater(value, setStoreState) {\n    useEffect(() => {\n        if (typeof value !== 'undefined') {\n            setStoreState(value);\n        }\n    }, [value]);\n}\n// updates with values in store that don't have a dedicated setter function\nfunction useDirectStoreUpdater(key, value, setState) {\n    useEffect(() => {\n        if (typeof value !== 'undefined') {\n            setState({ [key]: value });\n        }\n    }, [value]);\n}\nconst StoreUpdater = ({ nodes, edges, defaultNodes, defaultEdges, onConnect, onConnectStart, onConnectEnd, onClickConnectStart, onClickConnectEnd, nodesDraggable, nodesConnectable, nodesFocusable, edgesFocusable, edgesUpdatable, elevateNodesOnSelect, minZoom, maxZoom, nodeExtent, onNodesChange, onEdgesChange, elementsSelectable, connectionMode, snapGrid, snapToGrid, translateExtent, connectOnClick, defaultEdgeOptions, fitView, fitViewOptions, onNodesDelete, onEdgesDelete, onNodeDrag, onNodeDragStart, onNodeDragStop, onSelectionDrag, onSelectionDragStart, onSelectionDragStop, noPanClassName, nodeOrigin, rfId, autoPanOnConnect, autoPanOnNodeDrag, onError, connectionRadius, isValidConnection, nodeDragThreshold, }) => {\n    const { setNodes, setEdges, setDefaultNodesAndEdges, setMinZoom, setMaxZoom, setTranslateExtent, setNodeExtent, reset, } = useStore(selector$d, shallow);\n    const store = useStoreApi();\n    useEffect(() => {\n        const edgesWithDefaults = defaultEdges?.map((e) => ({ ...e, ...defaultEdgeOptions }));\n        setDefaultNodesAndEdges(defaultNodes, edgesWithDefaults);\n        return () => {\n            reset();\n        };\n    }, []);\n    useDirectStoreUpdater('defaultEdgeOptions', defaultEdgeOptions, store.setState);\n    useDirectStoreUpdater('connectionMode', connectionMode, store.setState);\n    useDirectStoreUpdater('onConnect', onConnect, store.setState);\n    useDirectStoreUpdater('onConnectStart', onConnectStart, store.setState);\n    useDirectStoreUpdater('onConnectEnd', onConnectEnd, store.setState);\n    useDirectStoreUpdater('onClickConnectStart', onClickConnectStart, store.setState);\n    useDirectStoreUpdater('onClickConnectEnd', onClickConnectEnd, store.setState);\n    useDirectStoreUpdater('nodesDraggable', nodesDraggable, store.setState);\n    useDirectStoreUpdater('nodesConnectable', nodesConnectable, store.setState);\n    useDirectStoreUpdater('nodesFocusable', nodesFocusable, store.setState);\n    useDirectStoreUpdater('edgesFocusable', edgesFocusable, store.setState);\n    useDirectStoreUpdater('edgesUpdatable', edgesUpdatable, store.setState);\n    useDirectStoreUpdater('elementsSelectable', elementsSelectable, store.setState);\n    useDirectStoreUpdater('elevateNodesOnSelect', elevateNodesOnSelect, store.setState);\n    useDirectStoreUpdater('snapToGrid', snapToGrid, store.setState);\n    useDirectStoreUpdater('snapGrid', snapGrid, store.setState);\n    useDirectStoreUpdater('onNodesChange', onNodesChange, store.setState);\n    useDirectStoreUpdater('onEdgesChange', onEdgesChange, store.setState);\n    useDirectStoreUpdater('connectOnClick', connectOnClick, store.setState);\n    useDirectStoreUpdater('fitViewOnInit', fitView, store.setState);\n    useDirectStoreUpdater('fitViewOnInitOptions', fitViewOptions, store.setState);\n    useDirectStoreUpdater('onNodesDelete', onNodesDelete, store.setState);\n    useDirectStoreUpdater('onEdgesDelete', onEdgesDelete, store.setState);\n    useDirectStoreUpdater('onNodeDrag', onNodeDrag, store.setState);\n    useDirectStoreUpdater('onNodeDragStart', onNodeDragStart, store.setState);\n    useDirectStoreUpdater('onNodeDragStop', onNodeDragStop, store.setState);\n    useDirectStoreUpdater('onSelectionDrag', onSelectionDrag, store.setState);\n    useDirectStoreUpdater('onSelectionDragStart', onSelectionDragStart, store.setState);\n    useDirectStoreUpdater('onSelectionDragStop', onSelectionDragStop, store.setState);\n    useDirectStoreUpdater('noPanClassName', noPanClassName, store.setState);\n    useDirectStoreUpdater('nodeOrigin', nodeOrigin, store.setState);\n    useDirectStoreUpdater('rfId', rfId, store.setState);\n    useDirectStoreUpdater('autoPanOnConnect', autoPanOnConnect, store.setState);\n    useDirectStoreUpdater('autoPanOnNodeDrag', autoPanOnNodeDrag, store.setState);\n    useDirectStoreUpdater('onError', onError, store.setState);\n    useDirectStoreUpdater('connectionRadius', connectionRadius, store.setState);\n    useDirectStoreUpdater('isValidConnection', isValidConnection, store.setState);\n    useDirectStoreUpdater('nodeDragThreshold', nodeDragThreshold, store.setState);\n    useStoreUpdater(nodes, setNodes);\n    useStoreUpdater(edges, setEdges);\n    useStoreUpdater(minZoom, setMinZoom);\n    useStoreUpdater(maxZoom, setMaxZoom);\n    useStoreUpdater(translateExtent, setTranslateExtent);\n    useStoreUpdater(nodeExtent, setNodeExtent);\n    return null;\n};\n\nconst style = { display: 'none' };\nconst ariaLiveStyle = {\n    position: 'absolute',\n    width: 1,\n    height: 1,\n    margin: -1,\n    border: 0,\n    padding: 0,\n    overflow: 'hidden',\n    clip: 'rect(0px, 0px, 0px, 0px)',\n    clipPath: 'inset(100%)',\n};\nconst ARIA_NODE_DESC_KEY = 'react-flow__node-desc';\nconst ARIA_EDGE_DESC_KEY = 'react-flow__edge-desc';\nconst ARIA_LIVE_MESSAGE = 'react-flow__aria-live';\nconst selector$c = (s) => s.ariaLiveMessage;\nfunction AriaLiveMessage({ rfId }) {\n    const ariaLiveMessage = useStore(selector$c);\n    return (React.createElement(\"div\", { id: `${ARIA_LIVE_MESSAGE}-${rfId}`, \"aria-live\": \"assertive\", \"aria-atomic\": \"true\", style: ariaLiveStyle }, ariaLiveMessage));\n}\nfunction A11yDescriptions({ rfId, disableKeyboardA11y }) {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { id: `${ARIA_NODE_DESC_KEY}-${rfId}`, style: style },\n            \"Press enter or space to select a node.\",\n            !disableKeyboardA11y && 'You can then use the arrow keys to move the node around.',\n            \" Press delete to remove it and escape to cancel.\",\n            ' '),\n        React.createElement(\"div\", { id: `${ARIA_EDGE_DESC_KEY}-${rfId}`, style: style }, \"Press enter or space to select an edge. You can then press delete to remove it or escape to cancel.\"),\n        !disableKeyboardA11y && React.createElement(AriaLiveMessage, { rfId: rfId })));\n}\n\n// the keycode can be a string 'a' or an array of strings ['a', 'a+d']\n// a string means a single key 'a' or a combination when '+' is used 'a+d'\n// an array means different possibilities. Explainer: ['a', 'd+s'] here the\n// user can use the single key 'a' or the combination 'd' + 's'\nvar useKeyPress = (keyCode = null, options = { actInsideInputWithModifier: true }) => {\n    const [keyPressed, setKeyPressed] = useState(false);\n    // we need to remember if a modifier key is pressed in order to track it\n    const modifierPressed = useRef(false);\n    // we need to remember the pressed keys in order to support combinations\n    const pressedKeys = useRef(new Set([]));\n    // keyCodes = array with single keys [['a']] or key combinations [['a', 's']]\n    // keysToWatch = array with all keys flattened ['a', 'd', 'ShiftLeft']\n    // used to check if we store event.code or event.key. When the code is in the list of keysToWatch\n    // we use the code otherwise the key. Explainer: When you press the left \"command\" key, the code is \"MetaLeft\"\n    // and the key is \"Meta\". We want users to be able to pass keys and codes so we assume that the key is meant when\n    // we can't find it in the list of keysToWatch.\n    const [keyCodes, keysToWatch] = useMemo(() => {\n        if (keyCode !== null) {\n            const keyCodeArr = Array.isArray(keyCode) ? keyCode : [keyCode];\n            const keys = keyCodeArr.filter((kc) => typeof kc === 'string').map((kc) => kc.split('+'));\n            const keysFlat = keys.reduce((res, item) => res.concat(...item), []);\n            return [keys, keysFlat];\n        }\n        return [[], []];\n    }, [keyCode]);\n    useEffect(() => {\n        const doc = typeof document !== 'undefined' ? document : null;\n        const target = options?.target || doc;\n        if (keyCode !== null) {\n            const downHandler = (event) => {\n                modifierPressed.current = event.ctrlKey || event.metaKey || event.shiftKey;\n                const preventAction = (!modifierPressed.current || (modifierPressed.current && !options.actInsideInputWithModifier)) &&\n                    isInputDOMNode(event);\n                if (preventAction) {\n                    return false;\n                }\n                const keyOrCode = useKeyOrCode(event.code, keysToWatch);\n                pressedKeys.current.add(event[keyOrCode]);\n                if (isMatchingKey(keyCodes, pressedKeys.current, false)) {\n                    event.preventDefault();\n                    setKeyPressed(true);\n                }\n            };\n            const upHandler = (event) => {\n                const preventAction = (!modifierPressed.current || (modifierPressed.current && !options.actInsideInputWithModifier)) &&\n                    isInputDOMNode(event);\n                if (preventAction) {\n                    return false;\n                }\n                const keyOrCode = useKeyOrCode(event.code, keysToWatch);\n                if (isMatchingKey(keyCodes, pressedKeys.current, true)) {\n                    setKeyPressed(false);\n                    pressedKeys.current.clear();\n                }\n                else {\n                    pressedKeys.current.delete(event[keyOrCode]);\n                }\n                // fix for Mac: when cmd key is pressed, keyup is not triggered for any other key, see: https://stackoverflow.com/questions/27380018/when-cmd-key-is-kept-pressed-keyup-is-not-triggered-for-any-other-key\n                if (event.key === 'Meta') {\n                    pressedKeys.current.clear();\n                }\n                modifierPressed.current = false;\n            };\n            const resetHandler = () => {\n                pressedKeys.current.clear();\n                setKeyPressed(false);\n            };\n            target?.addEventListener('keydown', downHandler);\n            target?.addEventListener('keyup', upHandler);\n            window.addEventListener('blur', resetHandler);\n            return () => {\n                target?.removeEventListener('keydown', downHandler);\n                target?.removeEventListener('keyup', upHandler);\n                window.removeEventListener('blur', resetHandler);\n            };\n        }\n    }, [keyCode, setKeyPressed]);\n    return keyPressed;\n};\n// utils\nfunction isMatchingKey(keyCodes, pressedKeys, isUp) {\n    return (keyCodes\n        // we only want to compare same sizes of keyCode definitions\n        // and pressed keys. When the user specified 'Meta' as a key somewhere\n        // this would also be truthy without this filter when user presses 'Meta' + 'r'\n        .filter((keys) => isUp || keys.length === pressedKeys.size)\n        // since we want to support multiple possibilities only one of the\n        // combinations need to be part of the pressed keys\n        .some((keys) => keys.every((k) => pressedKeys.has(k))));\n}\nfunction useKeyOrCode(eventCode, keysToWatch) {\n    return keysToWatch.includes(eventCode) ? 'code' : 'key';\n}\n\nfunction calculateXYZPosition(node, nodeInternals, result, nodeOrigin) {\n    const parentId = node.parentNode || node.parentId;\n    if (!parentId) {\n        return result;\n    }\n    const parentNode = nodeInternals.get(parentId);\n    const parentNodePosition = getNodePositionWithOrigin(parentNode, nodeOrigin);\n    return calculateXYZPosition(parentNode, nodeInternals, {\n        x: (result.x ?? 0) + parentNodePosition.x,\n        y: (result.y ?? 0) + parentNodePosition.y,\n        z: (parentNode[internalsSymbol]?.z ?? 0) > (result.z ?? 0) ? parentNode[internalsSymbol]?.z ?? 0 : result.z ?? 0,\n    }, nodeOrigin);\n}\nfunction updateAbsoluteNodePositions(nodeInternals, nodeOrigin, parentNodes) {\n    nodeInternals.forEach((node) => {\n        const parentId = node.parentNode || node.parentId;\n        if (parentId && !nodeInternals.has(parentId)) {\n            throw new Error(`Parent node ${parentId} not found`);\n        }\n        if (parentId || parentNodes?.[node.id]) {\n            const { x, y, z } = calculateXYZPosition(node, nodeInternals, {\n                ...node.position,\n                z: node[internalsSymbol]?.z ?? 0,\n            }, nodeOrigin);\n            node.positionAbsolute = {\n                x,\n                y,\n            };\n            node[internalsSymbol].z = z;\n            if (parentNodes?.[node.id]) {\n                node[internalsSymbol].isParent = true;\n            }\n        }\n    });\n}\nfunction createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect) {\n    const nextNodeInternals = new Map();\n    const parentNodes = {};\n    const selectedNodeZ = elevateNodesOnSelect ? 1000 : 0;\n    nodes.forEach((node) => {\n        const z = (isNumeric(node.zIndex) ? node.zIndex : 0) + (node.selected ? selectedNodeZ : 0);\n        const currInternals = nodeInternals.get(node.id);\n        const internals = {\n            ...node,\n            positionAbsolute: {\n                x: node.position.x,\n                y: node.position.y,\n            },\n        };\n        const parentId = node.parentNode || node.parentId;\n        if (parentId) {\n            parentNodes[parentId] = true;\n        }\n        const resetHandleBounds = currInternals?.type && currInternals?.type !== node.type;\n        Object.defineProperty(internals, internalsSymbol, {\n            enumerable: false,\n            value: {\n                handleBounds: resetHandleBounds ? undefined : currInternals?.[internalsSymbol]?.handleBounds,\n                z,\n            },\n        });\n        nextNodeInternals.set(node.id, internals);\n    });\n    updateAbsoluteNodePositions(nextNodeInternals, nodeOrigin, parentNodes);\n    return nextNodeInternals;\n}\nfunction fitView(get, options = {}) {\n    const { getNodes, width, height, minZoom, maxZoom, d3Zoom, d3Selection, fitViewOnInitDone, fitViewOnInit, nodeOrigin, } = get();\n    const isInitialFitView = options.initial && !fitViewOnInitDone && fitViewOnInit;\n    const d3initialized = d3Zoom && d3Selection;\n    if (d3initialized && (isInitialFitView || !options.initial)) {\n        const nodes = getNodes().filter((n) => {\n            const isVisible = options.includeHiddenNodes ? n.width && n.height : !n.hidden;\n            if (options.nodes?.length) {\n                return isVisible && options.nodes.some((optionNode) => optionNode.id === n.id);\n            }\n            return isVisible;\n        });\n        const nodesInitialized = nodes.every((n) => n.width && n.height);\n        if (nodes.length > 0 && nodesInitialized) {\n            const bounds = getNodesBounds(nodes, nodeOrigin);\n            const { x, y, zoom } = getViewportForBounds(bounds, width, height, options.minZoom ?? minZoom, options.maxZoom ?? maxZoom, options.padding ?? 0.1);\n            const nextTransform = zoomIdentity.translate(x, y).scale(zoom);\n            if (typeof options.duration === 'number' && options.duration > 0) {\n                d3Zoom.transform(getD3Transition(d3Selection, options.duration), nextTransform);\n            }\n            else {\n                d3Zoom.transform(d3Selection, nextTransform);\n            }\n            return true;\n        }\n    }\n    return false;\n}\nfunction handleControlledNodeSelectionChange(nodeChanges, nodeInternals) {\n    nodeChanges.forEach((change) => {\n        const node = nodeInternals.get(change.id);\n        if (node) {\n            nodeInternals.set(node.id, {\n                ...node,\n                [internalsSymbol]: node[internalsSymbol],\n                selected: change.selected,\n            });\n        }\n    });\n    return new Map(nodeInternals);\n}\nfunction handleControlledEdgeSelectionChange(edgeChanges, edges) {\n    return edges.map((e) => {\n        const change = edgeChanges.find((change) => change.id === e.id);\n        if (change) {\n            e.selected = change.selected;\n        }\n        return e;\n    });\n}\nfunction updateNodesAndEdgesSelections({ changedNodes, changedEdges, get, set }) {\n    const { nodeInternals, edges, onNodesChange, onEdgesChange, hasDefaultNodes, hasDefaultEdges } = get();\n    if (changedNodes?.length) {\n        if (hasDefaultNodes) {\n            set({ nodeInternals: handleControlledNodeSelectionChange(changedNodes, nodeInternals) });\n        }\n        onNodesChange?.(changedNodes);\n    }\n    if (changedEdges?.length) {\n        if (hasDefaultEdges) {\n            set({ edges: handleControlledEdgeSelectionChange(changedEdges, edges) });\n        }\n        onEdgesChange?.(changedEdges);\n    }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst noop = () => { };\nconst initialViewportHelper = {\n    zoomIn: noop,\n    zoomOut: noop,\n    zoomTo: noop,\n    getZoom: () => 1,\n    setViewport: noop,\n    getViewport: () => ({ x: 0, y: 0, zoom: 1 }),\n    fitView: () => false,\n    setCenter: noop,\n    fitBounds: noop,\n    project: (position) => position,\n    screenToFlowPosition: (position) => position,\n    flowToScreenPosition: (position) => position,\n    viewportInitialized: false,\n};\nconst selector$b = (s) => ({\n    d3Zoom: s.d3Zoom,\n    d3Selection: s.d3Selection,\n});\nconst useViewportHelper = () => {\n    const store = useStoreApi();\n    const { d3Zoom, d3Selection } = useStore(selector$b, shallow);\n    const viewportHelperFunctions = useMemo(() => {\n        if (d3Selection && d3Zoom) {\n            return {\n                zoomIn: (options) => d3Zoom.scaleBy(getD3Transition(d3Selection, options?.duration), 1.2),\n                zoomOut: (options) => d3Zoom.scaleBy(getD3Transition(d3Selection, options?.duration), 1 / 1.2),\n                zoomTo: (zoomLevel, options) => d3Zoom.scaleTo(getD3Transition(d3Selection, options?.duration), zoomLevel),\n                getZoom: () => store.getState().transform[2],\n                setViewport: (transform, options) => {\n                    const [x, y, zoom] = store.getState().transform;\n                    const nextTransform = zoomIdentity\n                        .translate(transform.x ?? x, transform.y ?? y)\n                        .scale(transform.zoom ?? zoom);\n                    d3Zoom.transform(getD3Transition(d3Selection, options?.duration), nextTransform);\n                },\n                getViewport: () => {\n                    const [x, y, zoom] = store.getState().transform;\n                    return { x, y, zoom };\n                },\n                fitView: (options) => fitView(store.getState, options),\n                setCenter: (x, y, options) => {\n                    const { width, height, maxZoom } = store.getState();\n                    const nextZoom = typeof options?.zoom !== 'undefined' ? options.zoom : maxZoom;\n                    const centerX = width / 2 - x * nextZoom;\n                    const centerY = height / 2 - y * nextZoom;\n                    const transform = zoomIdentity.translate(centerX, centerY).scale(nextZoom);\n                    d3Zoom.transform(getD3Transition(d3Selection, options?.duration), transform);\n                },\n                fitBounds: (bounds, options) => {\n                    const { width, height, minZoom, maxZoom } = store.getState();\n                    const { x, y, zoom } = getViewportForBounds(bounds, width, height, minZoom, maxZoom, options?.padding ?? 0.1);\n                    const transform = zoomIdentity.translate(x, y).scale(zoom);\n                    d3Zoom.transform(getD3Transition(d3Selection, options?.duration), transform);\n                },\n                // @deprecated Use `screenToFlowPosition`.\n                project: (position) => {\n                    const { transform, snapToGrid, snapGrid } = store.getState();\n                    console.warn('[DEPRECATED] `project` is deprecated. Instead use `screenToFlowPosition`. There is no need to subtract the react flow bounds anymore! https://reactflow.dev/api-reference/types/react-flow-instance#screen-to-flow-position');\n                    return pointToRendererPoint(position, transform, snapToGrid, snapGrid);\n                },\n                screenToFlowPosition: (position) => {\n                    const { transform, snapToGrid, snapGrid, domNode } = store.getState();\n                    if (!domNode) {\n                        return position;\n                    }\n                    const { x: domX, y: domY } = domNode.getBoundingClientRect();\n                    const relativePosition = {\n                        x: position.x - domX,\n                        y: position.y - domY,\n                    };\n                    return pointToRendererPoint(relativePosition, transform, snapToGrid, snapGrid);\n                },\n                flowToScreenPosition: (position) => {\n                    const { transform, domNode } = store.getState();\n                    if (!domNode) {\n                        return position;\n                    }\n                    const { x: domX, y: domY } = domNode.getBoundingClientRect();\n                    const rendererPosition = rendererPointToPoint(position, transform);\n                    return {\n                        x: rendererPosition.x + domX,\n                        y: rendererPosition.y + domY,\n                    };\n                },\n                viewportInitialized: true,\n            };\n        }\n        return initialViewportHelper;\n    }, [d3Zoom, d3Selection]);\n    return viewportHelperFunctions;\n};\n\n/* eslint-disable-next-line @typescript-eslint/no-explicit-any */\nfunction useReactFlow() {\n    const viewportHelper = useViewportHelper();\n    const store = useStoreApi();\n    const getNodes = useCallback(() => {\n        return store\n            .getState()\n            .getNodes()\n            .map((n) => ({ ...n }));\n    }, []);\n    const getNode = useCallback((id) => {\n        return store.getState().nodeInternals.get(id);\n    }, []);\n    const getEdges = useCallback(() => {\n        const { edges = [] } = store.getState();\n        return edges.map((e) => ({ ...e }));\n    }, []);\n    const getEdge = useCallback((id) => {\n        const { edges = [] } = store.getState();\n        return edges.find((e) => e.id === id);\n    }, []);\n    const setNodes = useCallback((payload) => {\n        const { getNodes, setNodes, hasDefaultNodes, onNodesChange } = store.getState();\n        const nodes = getNodes();\n        const nextNodes = typeof payload === 'function' ? payload(nodes) : payload;\n        if (hasDefaultNodes) {\n            setNodes(nextNodes);\n        }\n        else if (onNodesChange) {\n            const changes = nextNodes.length === 0\n                ? nodes.map((node) => ({ type: 'remove', id: node.id }))\n                : nextNodes.map((node) => ({ item: node, type: 'reset' }));\n            onNodesChange(changes);\n        }\n    }, []);\n    const setEdges = useCallback((payload) => {\n        const { edges = [], setEdges, hasDefaultEdges, onEdgesChange } = store.getState();\n        const nextEdges = typeof payload === 'function' ? payload(edges) : payload;\n        if (hasDefaultEdges) {\n            setEdges(nextEdges);\n        }\n        else if (onEdgesChange) {\n            const changes = nextEdges.length === 0\n                ? edges.map((edge) => ({ type: 'remove', id: edge.id }))\n                : nextEdges.map((edge) => ({ item: edge, type: 'reset' }));\n            onEdgesChange(changes);\n        }\n    }, []);\n    const addNodes = useCallback((payload) => {\n        const nodes = Array.isArray(payload) ? payload : [payload];\n        const { getNodes, setNodes, hasDefaultNodes, onNodesChange } = store.getState();\n        if (hasDefaultNodes) {\n            const currentNodes = getNodes();\n            const nextNodes = [...currentNodes, ...nodes];\n            setNodes(nextNodes);\n        }\n        else if (onNodesChange) {\n            const changes = nodes.map((node) => ({ item: node, type: 'add' }));\n            onNodesChange(changes);\n        }\n    }, []);\n    const addEdges = useCallback((payload) => {\n        const nextEdges = Array.isArray(payload) ? payload : [payload];\n        const { edges = [], setEdges, hasDefaultEdges, onEdgesChange } = store.getState();\n        if (hasDefaultEdges) {\n            setEdges([...edges, ...nextEdges]);\n        }\n        else if (onEdgesChange) {\n            const changes = nextEdges.map((edge) => ({ item: edge, type: 'add' }));\n            onEdgesChange(changes);\n        }\n    }, []);\n    const toObject = useCallback(() => {\n        const { getNodes, edges = [], transform } = store.getState();\n        const [x, y, zoom] = transform;\n        return {\n            nodes: getNodes().map((n) => ({ ...n })),\n            edges: edges.map((e) => ({ ...e })),\n            viewport: {\n                x,\n                y,\n                zoom,\n            },\n        };\n    }, []);\n    const deleteElements = useCallback(({ nodes: nodesDeleted, edges: edgesDeleted }) => {\n        const { nodeInternals, getNodes, edges, hasDefaultNodes, hasDefaultEdges, onNodesDelete, onEdgesDelete, onNodesChange, onEdgesChange, } = store.getState();\n        const nodeIds = (nodesDeleted || []).map((node) => node.id);\n        const edgeIds = (edgesDeleted || []).map((edge) => edge.id);\n        const nodesToRemove = getNodes().reduce((res, node) => {\n            const parentId = node.parentNode || node.parentId;\n            const parentHit = !nodeIds.includes(node.id) && parentId && res.find((n) => n.id === parentId);\n            const deletable = typeof node.deletable === 'boolean' ? node.deletable : true;\n            if (deletable && (nodeIds.includes(node.id) || parentHit)) {\n                res.push(node);\n            }\n            return res;\n        }, []);\n        const deletableEdges = edges.filter((e) => (typeof e.deletable === 'boolean' ? e.deletable : true));\n        const initialHitEdges = deletableEdges.filter((e) => edgeIds.includes(e.id));\n        if (nodesToRemove || initialHitEdges) {\n            const connectedEdges = getConnectedEdges(nodesToRemove, deletableEdges);\n            const edgesToRemove = [...initialHitEdges, ...connectedEdges];\n            const edgeIdsToRemove = edgesToRemove.reduce((res, edge) => {\n                if (!res.includes(edge.id)) {\n                    res.push(edge.id);\n                }\n                return res;\n            }, []);\n            if (hasDefaultEdges || hasDefaultNodes) {\n                if (hasDefaultEdges) {\n                    store.setState({\n                        edges: edges.filter((e) => !edgeIdsToRemove.includes(e.id)),\n                    });\n                }\n                if (hasDefaultNodes) {\n                    nodesToRemove.forEach((node) => {\n                        nodeInternals.delete(node.id);\n                    });\n                    store.setState({\n                        nodeInternals: new Map(nodeInternals),\n                    });\n                }\n            }\n            if (edgeIdsToRemove.length > 0) {\n                onEdgesDelete?.(edgesToRemove);\n                if (onEdgesChange) {\n                    onEdgesChange(edgeIdsToRemove.map((id) => ({\n                        id,\n                        type: 'remove',\n                    })));\n                }\n            }\n            if (nodesToRemove.length > 0) {\n                onNodesDelete?.(nodesToRemove);\n                if (onNodesChange) {\n                    const nodeChanges = nodesToRemove.map((n) => ({ id: n.id, type: 'remove' }));\n                    onNodesChange(nodeChanges);\n                }\n            }\n        }\n    }, []);\n    const getNodeRect = useCallback((nodeOrRect) => {\n        const isRect = isRectObject(nodeOrRect);\n        const node = isRect ? null : store.getState().nodeInternals.get(nodeOrRect.id);\n        if (!isRect && !node) {\n            return [null, null, isRect];\n        }\n        const nodeRect = isRect ? nodeOrRect : nodeToRect(node);\n        return [nodeRect, node, isRect];\n    }, []);\n    const getIntersectingNodes = useCallback((nodeOrRect, partially = true, nodes) => {\n        const [nodeRect, node, isRect] = getNodeRect(nodeOrRect);\n        if (!nodeRect) {\n            return [];\n        }\n        return (nodes || store.getState().getNodes()).filter((n) => {\n            if (!isRect && (n.id === node.id || !n.positionAbsolute)) {\n                return false;\n            }\n            const currNodeRect = nodeToRect(n);\n            const overlappingArea = getOverlappingArea(currNodeRect, nodeRect);\n            const partiallyVisible = partially && overlappingArea > 0;\n            return partiallyVisible || overlappingArea >= nodeRect.width * nodeRect.height;\n        });\n    }, []);\n    const isNodeIntersecting = useCallback((nodeOrRect, area, partially = true) => {\n        const [nodeRect] = getNodeRect(nodeOrRect);\n        if (!nodeRect) {\n            return false;\n        }\n        const overlappingArea = getOverlappingArea(nodeRect, area);\n        const partiallyVisible = partially && overlappingArea > 0;\n        return partiallyVisible || overlappingArea >= nodeRect.width * nodeRect.height;\n    }, []);\n    return useMemo(() => {\n        return {\n            ...viewportHelper,\n            getNodes,\n            getNode,\n            getEdges,\n            getEdge,\n            setNodes,\n            setEdges,\n            addNodes,\n            addEdges,\n            toObject,\n            deleteElements,\n            getIntersectingNodes,\n            isNodeIntersecting,\n        };\n    }, [\n        viewportHelper,\n        getNodes,\n        getNode,\n        getEdges,\n        getEdge,\n        setNodes,\n        setEdges,\n        addNodes,\n        addEdges,\n        toObject,\n        deleteElements,\n        getIntersectingNodes,\n        isNodeIntersecting,\n    ]);\n}\n\nconst deleteKeyOptions = { actInsideInputWithModifier: false };\nvar useGlobalKeyHandler = ({ deleteKeyCode, multiSelectionKeyCode }) => {\n    const store = useStoreApi();\n    const { deleteElements } = useReactFlow();\n    const deleteKeyPressed = useKeyPress(deleteKeyCode, deleteKeyOptions);\n    const multiSelectionKeyPressed = useKeyPress(multiSelectionKeyCode);\n    useEffect(() => {\n        if (deleteKeyPressed) {\n            const { edges, getNodes } = store.getState();\n            const selectedNodes = getNodes().filter((node) => node.selected);\n            const selectedEdges = edges.filter((edge) => edge.selected);\n            deleteElements({ nodes: selectedNodes, edges: selectedEdges });\n            store.setState({ nodesSelectionActive: false });\n        }\n    }, [deleteKeyPressed]);\n    useEffect(() => {\n        store.setState({ multiSelectionActive: multiSelectionKeyPressed });\n    }, [multiSelectionKeyPressed]);\n};\n\nfunction useResizeHandler(rendererNode) {\n    const store = useStoreApi();\n    useEffect(() => {\n        let resizeObserver;\n        const updateDimensions = () => {\n            if (!rendererNode.current) {\n                return;\n            }\n            const size = getDimensions(rendererNode.current);\n            if (size.height === 0 || size.width === 0) {\n                store.getState().onError?.('004', errorMessages['error004']());\n            }\n            store.setState({ width: size.width || 500, height: size.height || 500 });\n        };\n        updateDimensions();\n        window.addEventListener('resize', updateDimensions);\n        if (rendererNode.current) {\n            resizeObserver = new ResizeObserver(() => updateDimensions());\n            resizeObserver.observe(rendererNode.current);\n        }\n        return () => {\n            window.removeEventListener('resize', updateDimensions);\n            if (resizeObserver && rendererNode.current) {\n                resizeObserver.unobserve(rendererNode.current);\n            }\n        };\n    }, []);\n}\n\nconst containerStyle = {\n    position: 'absolute',\n    width: '100%',\n    height: '100%',\n    top: 0,\n    left: 0,\n};\n\n/* eslint-disable @typescript-eslint/ban-ts-comment */\nconst viewChanged = (prevViewport, eventTransform) => prevViewport.x !== eventTransform.x || prevViewport.y !== eventTransform.y || prevViewport.zoom !== eventTransform.k;\nconst eventToFlowTransform = (eventTransform) => ({\n    x: eventTransform.x,\n    y: eventTransform.y,\n    zoom: eventTransform.k,\n});\nconst isWrappedWithClass = (event, className) => event.target.closest(`.${className}`);\nconst isRightClickPan = (panOnDrag, usedButton) => usedButton === 2 && Array.isArray(panOnDrag) && panOnDrag.includes(2);\nconst wheelDelta = (event) => {\n    const factor = event.ctrlKey && isMacOs() ? 10 : 1;\n    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * factor;\n};\nconst selector$a = (s) => ({\n    d3Zoom: s.d3Zoom,\n    d3Selection: s.d3Selection,\n    d3ZoomHandler: s.d3ZoomHandler,\n    userSelectionActive: s.userSelectionActive,\n});\nconst ZoomPane = ({ onMove, onMoveStart, onMoveEnd, onPaneContextMenu, zoomOnScroll = true, zoomOnPinch = true, panOnScroll = false, panOnScrollSpeed = 0.5, panOnScrollMode = PanOnScrollMode.Free, zoomOnDoubleClick = true, elementsSelectable, panOnDrag = true, defaultViewport, translateExtent, minZoom, maxZoom, zoomActivationKeyCode, preventScrolling = true, children, noWheelClassName, noPanClassName, }) => {\n    const timerId = useRef();\n    const store = useStoreApi();\n    const isZoomingOrPanning = useRef(false);\n    const zoomedWithRightMouseButton = useRef(false);\n    const zoomPane = useRef(null);\n    const prevTransform = useRef({ x: 0, y: 0, zoom: 0 });\n    const { d3Zoom, d3Selection, d3ZoomHandler, userSelectionActive } = useStore(selector$a, shallow);\n    const zoomActivationKeyPressed = useKeyPress(zoomActivationKeyCode);\n    const mouseButton = useRef(0);\n    const isPanScrolling = useRef(false);\n    const panScrollTimeout = useRef();\n    useResizeHandler(zoomPane);\n    useEffect(() => {\n        if (zoomPane.current) {\n            const bbox = zoomPane.current.getBoundingClientRect();\n            const d3ZoomInstance = zoom().scaleExtent([minZoom, maxZoom]).translateExtent(translateExtent);\n            const selection = select(zoomPane.current).call(d3ZoomInstance);\n            const updatedTransform = zoomIdentity\n                .translate(defaultViewport.x, defaultViewport.y)\n                .scale(clamp(defaultViewport.zoom, minZoom, maxZoom));\n            const extent = [\n                [0, 0],\n                [bbox.width, bbox.height],\n            ];\n            const constrainedTransform = d3ZoomInstance.constrain()(updatedTransform, extent, translateExtent);\n            d3ZoomInstance.transform(selection, constrainedTransform);\n            d3ZoomInstance.wheelDelta(wheelDelta);\n            store.setState({\n                d3Zoom: d3ZoomInstance,\n                d3Selection: selection,\n                d3ZoomHandler: selection.on('wheel.zoom'),\n                // we need to pass transform because zoom handler is not registered when we set the initial transform\n                transform: [constrainedTransform.x, constrainedTransform.y, constrainedTransform.k],\n                domNode: zoomPane.current.closest('.react-flow'),\n            });\n        }\n    }, []);\n    useEffect(() => {\n        if (d3Selection && d3Zoom) {\n            if (panOnScroll && !zoomActivationKeyPressed && !userSelectionActive) {\n                d3Selection.on('wheel.zoom', (event) => {\n                    if (isWrappedWithClass(event, noWheelClassName)) {\n                        return false;\n                    }\n                    event.preventDefault();\n                    event.stopImmediatePropagation();\n                    const currentZoom = d3Selection.property('__zoom').k || 1;\n                    // macos and win set ctrlKey=true for pinch gesture on a trackpad\n                    if (event.ctrlKey && zoomOnPinch) {\n                        const point = pointer(event);\n                        const pinchDelta = wheelDelta(event);\n                        const zoom = currentZoom * Math.pow(2, pinchDelta);\n                        // @ts-ignore\n                        d3Zoom.scaleTo(d3Selection, zoom, point, event);\n                        return;\n                    }\n                    // increase scroll speed in firefox\n                    // firefox: deltaMode === 1; chrome: deltaMode === 0\n                    const deltaNormalize = event.deltaMode === 1 ? 20 : 1;\n                    let deltaX = panOnScrollMode === PanOnScrollMode.Vertical ? 0 : event.deltaX * deltaNormalize;\n                    let deltaY = panOnScrollMode === PanOnScrollMode.Horizontal ? 0 : event.deltaY * deltaNormalize;\n                    // this enables vertical scrolling with shift + scroll on windows\n                    if (!isMacOs() && event.shiftKey && panOnScrollMode !== PanOnScrollMode.Vertical) {\n                        deltaX = event.deltaY * deltaNormalize;\n                        deltaY = 0;\n                    }\n                    d3Zoom.translateBy(d3Selection, -(deltaX / currentZoom) * panOnScrollSpeed, -(deltaY / currentZoom) * panOnScrollSpeed, \n                    // @ts-ignore\n                    { internal: true });\n                    const nextViewport = eventToFlowTransform(d3Selection.property('__zoom'));\n                    const { onViewportChangeStart, onViewportChange, onViewportChangeEnd } = store.getState();\n                    clearTimeout(panScrollTimeout.current);\n                    // for pan on scroll we need to handle the event calls on our own\n                    // we can't use the start, zoom and end events from d3-zoom\n                    // because start and move gets called on every scroll event and not once at the beginning\n                    if (!isPanScrolling.current) {\n                        isPanScrolling.current = true;\n                        onMoveStart?.(event, nextViewport);\n                        onViewportChangeStart?.(nextViewport);\n                    }\n                    if (isPanScrolling.current) {\n                        onMove?.(event, nextViewport);\n                        onViewportChange?.(nextViewport);\n                        panScrollTimeout.current = setTimeout(() => {\n                            onMoveEnd?.(event, nextViewport);\n                            onViewportChangeEnd?.(nextViewport);\n                            isPanScrolling.current = false;\n                        }, 150);\n                    }\n                }, { passive: false });\n            }\n            else if (typeof d3ZoomHandler !== 'undefined') {\n                d3Selection.on('wheel.zoom', function (event, d) {\n                    // we still want to enable pinch zooming even if preventScrolling is set to false\n                    const invalidEvent = !preventScrolling && event.type === 'wheel' && !event.ctrlKey;\n                    if (invalidEvent || isWrappedWithClass(event, noWheelClassName)) {\n                        return null;\n                    }\n                    event.preventDefault();\n                    d3ZoomHandler.call(this, event, d);\n                }, { passive: false });\n            }\n        }\n    }, [\n        userSelectionActive,\n        panOnScroll,\n        panOnScrollMode,\n        d3Selection,\n        d3Zoom,\n        d3ZoomHandler,\n        zoomActivationKeyPressed,\n        zoomOnPinch,\n        preventScrolling,\n        noWheelClassName,\n        onMoveStart,\n        onMove,\n        onMoveEnd,\n    ]);\n    useEffect(() => {\n        if (d3Zoom) {\n            d3Zoom.on('start', (event) => {\n                if (!event.sourceEvent || event.sourceEvent.internal) {\n                    return null;\n                }\n                // we need to remember it here, because it's always 0 in the \"zoom\" event\n                mouseButton.current = event.sourceEvent?.button;\n                const { onViewportChangeStart } = store.getState();\n                const flowTransform = eventToFlowTransform(event.transform);\n                isZoomingOrPanning.current = true;\n                prevTransform.current = flowTransform;\n                if (event.sourceEvent?.type === 'mousedown') {\n                    store.setState({ paneDragging: true });\n                }\n                onViewportChangeStart?.(flowTransform);\n                onMoveStart?.(event.sourceEvent, flowTransform);\n            });\n        }\n    }, [d3Zoom, onMoveStart]);\n    useEffect(() => {\n        if (d3Zoom) {\n            if (userSelectionActive && !isZoomingOrPanning.current) {\n                d3Zoom.on('zoom', null);\n            }\n            else if (!userSelectionActive) {\n                d3Zoom.on('zoom', (event) => {\n                    const { onViewportChange } = store.getState();\n                    store.setState({ transform: [event.transform.x, event.transform.y, event.transform.k] });\n                    zoomedWithRightMouseButton.current = !!(onPaneContextMenu && isRightClickPan(panOnDrag, mouseButton.current ?? 0));\n                    if ((onMove || onViewportChange) && !event.sourceEvent?.internal) {\n                        const flowTransform = eventToFlowTransform(event.transform);\n                        onViewportChange?.(flowTransform);\n                        onMove?.(event.sourceEvent, flowTransform);\n                    }\n                });\n            }\n        }\n    }, [userSelectionActive, d3Zoom, onMove, panOnDrag, onPaneContextMenu]);\n    useEffect(() => {\n        if (d3Zoom) {\n            d3Zoom.on('end', (event) => {\n                if (!event.sourceEvent || event.sourceEvent.internal) {\n                    return null;\n                }\n                const { onViewportChangeEnd } = store.getState();\n                isZoomingOrPanning.current = false;\n                store.setState({ paneDragging: false });\n                if (onPaneContextMenu &&\n                    isRightClickPan(panOnDrag, mouseButton.current ?? 0) &&\n                    !zoomedWithRightMouseButton.current) {\n                    onPaneContextMenu(event.sourceEvent);\n                }\n                zoomedWithRightMouseButton.current = false;\n                if ((onMoveEnd || onViewportChangeEnd) && viewChanged(prevTransform.current, event.transform)) {\n                    const flowTransform = eventToFlowTransform(event.transform);\n                    prevTransform.current = flowTransform;\n                    clearTimeout(timerId.current);\n                    timerId.current = setTimeout(() => {\n                        onViewportChangeEnd?.(flowTransform);\n                        onMoveEnd?.(event.sourceEvent, flowTransform);\n                    }, panOnScroll ? 150 : 0);\n                }\n            });\n        }\n    }, [d3Zoom, panOnScroll, panOnDrag, onMoveEnd, onPaneContextMenu]);\n    useEffect(() => {\n        if (d3Zoom) {\n            d3Zoom.filter((event) => {\n                const zoomScroll = zoomActivationKeyPressed || zoomOnScroll;\n                const pinchZoom = zoomOnPinch && event.ctrlKey;\n                if ((panOnDrag === true || (Array.isArray(panOnDrag) && panOnDrag.includes(1))) &&\n                    event.button === 1 &&\n                    event.type === 'mousedown' &&\n                    (isWrappedWithClass(event, 'react-flow__node') || isWrappedWithClass(event, 'react-flow__edge'))) {\n                    return true;\n                }\n                // if all interactions are disabled, we prevent all zoom events\n                if (!panOnDrag && !zoomScroll && !panOnScroll && !zoomOnDoubleClick && !zoomOnPinch) {\n                    return false;\n                }\n                // during a selection we prevent all other interactions\n                if (userSelectionActive) {\n                    return false;\n                }\n                // if zoom on double click is disabled, we prevent the double click event\n                if (!zoomOnDoubleClick && event.type === 'dblclick') {\n                    return false;\n                }\n                // if the target element is inside an element with the nowheel class, we prevent zooming\n                if (isWrappedWithClass(event, noWheelClassName) && event.type === 'wheel') {\n                    return false;\n                }\n                // if the target element is inside an element with the nopan class, we prevent panning\n                if (isWrappedWithClass(event, noPanClassName) &&\n                    (event.type !== 'wheel' || (panOnScroll && event.type === 'wheel' && !zoomActivationKeyPressed))) {\n                    return false;\n                }\n                if (!zoomOnPinch && event.ctrlKey && event.type === 'wheel') {\n                    return false;\n                }\n                // when there is no scroll handling enabled, we prevent all wheel events\n                if (!zoomScroll && !panOnScroll && !pinchZoom && event.type === 'wheel') {\n                    return false;\n                }\n                // if the pane is not movable, we prevent dragging it with mousestart or touchstart\n                if (!panOnDrag && (event.type === 'mousedown' || event.type === 'touchstart')) {\n                    return false;\n                }\n                // if the pane is only movable using allowed clicks\n                if (Array.isArray(panOnDrag) && !panOnDrag.includes(event.button) && event.type === 'mousedown') {\n                    return false;\n                }\n                // We only allow right clicks if pan on drag is set to right click\n                const buttonAllowed = (Array.isArray(panOnDrag) && panOnDrag.includes(event.button)) || !event.button || event.button <= 1;\n                // default filter for d3-zoom\n                return (!event.ctrlKey || event.type === 'wheel') && buttonAllowed;\n            });\n        }\n    }, [\n        userSelectionActive,\n        d3Zoom,\n        zoomOnScroll,\n        zoomOnPinch,\n        panOnScroll,\n        zoomOnDoubleClick,\n        panOnDrag,\n        elementsSelectable,\n        zoomActivationKeyPressed,\n    ]);\n    return (React.createElement(\"div\", { className: \"react-flow__renderer\", ref: zoomPane, style: containerStyle }, children));\n};\n\nconst selector$9 = (s) => ({\n    userSelectionActive: s.userSelectionActive,\n    userSelectionRect: s.userSelectionRect,\n});\nfunction UserSelection() {\n    const { userSelectionActive, userSelectionRect } = useStore(selector$9, shallow);\n    const isActive = userSelectionActive && userSelectionRect;\n    if (!isActive) {\n        return null;\n    }\n    return (React.createElement(\"div\", { className: \"react-flow__selection react-flow__container\", style: {\n            width: userSelectionRect.width,\n            height: userSelectionRect.height,\n            transform: `translate(${userSelectionRect.x}px, ${userSelectionRect.y}px)`,\n        } }));\n}\n\nfunction handleParentExpand(res, updateItem) {\n    const parentId = updateItem.parentNode || updateItem.parentId;\n    const parent = res.find((e) => e.id === parentId);\n    if (parent) {\n        const extendWidth = updateItem.position.x + updateItem.width - parent.width;\n        const extendHeight = updateItem.position.y + updateItem.height - parent.height;\n        if (extendWidth > 0 || extendHeight > 0 || updateItem.position.x < 0 || updateItem.position.y < 0) {\n            parent.style = { ...parent.style } || {};\n            parent.style.width = parent.style.width ?? parent.width;\n            parent.style.height = parent.style.height ?? parent.height;\n            if (extendWidth > 0) {\n                parent.style.width += extendWidth;\n            }\n            if (extendHeight > 0) {\n                parent.style.height += extendHeight;\n            }\n            if (updateItem.position.x < 0) {\n                const xDiff = Math.abs(updateItem.position.x);\n                parent.position.x = parent.position.x - xDiff;\n                parent.style.width += xDiff;\n                updateItem.position.x = 0;\n            }\n            if (updateItem.position.y < 0) {\n                const yDiff = Math.abs(updateItem.position.y);\n                parent.position.y = parent.position.y - yDiff;\n                parent.style.height += yDiff;\n                updateItem.position.y = 0;\n            }\n            parent.width = parent.style.width;\n            parent.height = parent.style.height;\n        }\n    }\n}\nfunction applyChanges(changes, elements) {\n    // we need this hack to handle the setNodes and setEdges function of the useReactFlow hook for controlled flows\n    if (changes.some((c) => c.type === 'reset')) {\n        return changes.filter((c) => c.type === 'reset').map((c) => c.item);\n    }\n    const initElements = changes.filter((c) => c.type === 'add').map((c) => c.item);\n    return elements.reduce((res, item) => {\n        const currentChanges = changes.filter((c) => c.id === item.id);\n        if (currentChanges.length === 0) {\n            res.push(item);\n            return res;\n        }\n        const updateItem = { ...item };\n        for (const currentChange of currentChanges) {\n            if (currentChange) {\n                switch (currentChange.type) {\n                    case 'select': {\n                        updateItem.selected = currentChange.selected;\n                        break;\n                    }\n                    case 'position': {\n                        if (typeof currentChange.position !== 'undefined') {\n                            updateItem.position = currentChange.position;\n                        }\n                        if (typeof currentChange.positionAbsolute !== 'undefined') {\n                            updateItem.positionAbsolute = currentChange.positionAbsolute;\n                        }\n                        if (typeof currentChange.dragging !== 'undefined') {\n                            updateItem.dragging = currentChange.dragging;\n                        }\n                        if (updateItem.expandParent) {\n                            handleParentExpand(res, updateItem);\n                        }\n                        break;\n                    }\n                    case 'dimensions': {\n                        if (typeof currentChange.dimensions !== 'undefined') {\n                            updateItem.width = currentChange.dimensions.width;\n                            updateItem.height = currentChange.dimensions.height;\n                        }\n                        if (typeof currentChange.updateStyle !== 'undefined') {\n                            updateItem.style = { ...(updateItem.style || {}), ...currentChange.dimensions };\n                        }\n                        if (typeof currentChange.resizing === 'boolean') {\n                            updateItem.resizing = currentChange.resizing;\n                        }\n                        if (updateItem.expandParent) {\n                            handleParentExpand(res, updateItem);\n                        }\n                        break;\n                    }\n                    case 'remove': {\n                        return res;\n                    }\n                }\n            }\n        }\n        res.push(updateItem);\n        return res;\n    }, initElements);\n}\nfunction applyNodeChanges(changes, nodes) {\n    return applyChanges(changes, nodes);\n}\nfunction applyEdgeChanges(changes, edges) {\n    return applyChanges(changes, edges);\n}\nconst createSelectionChange = (id, selected) => ({\n    id,\n    type: 'select',\n    selected,\n});\nfunction getSelectionChanges(items, selectedIds) {\n    return items.reduce((res, item) => {\n        const willBeSelected = selectedIds.includes(item.id);\n        if (!item.selected && willBeSelected) {\n            item.selected = true;\n            res.push(createSelectionChange(item.id, true));\n        }\n        else if (item.selected && !willBeSelected) {\n            item.selected = false;\n            res.push(createSelectionChange(item.id, false));\n        }\n        return res;\n    }, []);\n}\n\n/**\n * The user selection rectangle gets displayed when a user drags the mouse while pressing shift\n */\nconst wrapHandler = (handler, containerRef) => {\n    return (event) => {\n        if (event.target !== containerRef.current) {\n            return;\n        }\n        handler?.(event);\n    };\n};\nconst selector$8 = (s) => ({\n    userSelectionActive: s.userSelectionActive,\n    elementsSelectable: s.elementsSelectable,\n    dragging: s.paneDragging,\n});\nconst Pane = memo(({ isSelecting, selectionMode = SelectionMode.Full, panOnDrag, onSelectionStart, onSelectionEnd, onPaneClick, onPaneContextMenu, onPaneScroll, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, children, }) => {\n    const container = useRef(null);\n    const store = useStoreApi();\n    const prevSelectedNodesCount = useRef(0);\n    const prevSelectedEdgesCount = useRef(0);\n    const containerBounds = useRef();\n    const { userSelectionActive, elementsSelectable, dragging } = useStore(selector$8, shallow);\n    const resetUserSelection = () => {\n        store.setState({ userSelectionActive: false, userSelectionRect: null });\n        prevSelectedNodesCount.current = 0;\n        prevSelectedEdgesCount.current = 0;\n    };\n    const onClick = (event) => {\n        onPaneClick?.(event);\n        store.getState().resetSelectedElements();\n        store.setState({ nodesSelectionActive: false });\n    };\n    const onContextMenu = (event) => {\n        if (Array.isArray(panOnDrag) && panOnDrag?.includes(2)) {\n            event.preventDefault();\n            return;\n        }\n        onPaneContextMenu?.(event);\n    };\n    const onWheel = onPaneScroll ? (event) => onPaneScroll(event) : undefined;\n    const onMouseDown = (event) => {\n        const { resetSelectedElements, domNode } = store.getState();\n        containerBounds.current = domNode?.getBoundingClientRect();\n        if (!elementsSelectable ||\n            !isSelecting ||\n            event.button !== 0 ||\n            event.target !== container.current ||\n            !containerBounds.current) {\n            return;\n        }\n        const { x, y } = getEventPosition(event, containerBounds.current);\n        resetSelectedElements();\n        store.setState({\n            userSelectionRect: {\n                width: 0,\n                height: 0,\n                startX: x,\n                startY: y,\n                x,\n                y,\n            },\n        });\n        onSelectionStart?.(event);\n    };\n    const onMouseMove = (event) => {\n        const { userSelectionRect, nodeInternals, edges, transform, onNodesChange, onEdgesChange, nodeOrigin, getNodes } = store.getState();\n        if (!isSelecting || !containerBounds.current || !userSelectionRect) {\n            return;\n        }\n        store.setState({ userSelectionActive: true, nodesSelectionActive: false });\n        const mousePos = getEventPosition(event, containerBounds.current);\n        const startX = userSelectionRect.startX ?? 0;\n        const startY = userSelectionRect.startY ?? 0;\n        const nextUserSelectRect = {\n            ...userSelectionRect,\n            x: mousePos.x < startX ? mousePos.x : startX,\n            y: mousePos.y < startY ? mousePos.y : startY,\n            width: Math.abs(mousePos.x - startX),\n            height: Math.abs(mousePos.y - startY),\n        };\n        const nodes = getNodes();\n        const selectedNodes = getNodesInside(nodeInternals, nextUserSelectRect, transform, selectionMode === SelectionMode.Partial, true, nodeOrigin);\n        const selectedEdgeIds = getConnectedEdges(selectedNodes, edges).map((e) => e.id);\n        const selectedNodeIds = selectedNodes.map((n) => n.id);\n        if (prevSelectedNodesCount.current !== selectedNodeIds.length) {\n            prevSelectedNodesCount.current = selectedNodeIds.length;\n            const changes = getSelectionChanges(nodes, selectedNodeIds);\n            if (changes.length) {\n                onNodesChange?.(changes);\n            }\n        }\n        if (prevSelectedEdgesCount.current !== selectedEdgeIds.length) {\n            prevSelectedEdgesCount.current = selectedEdgeIds.length;\n            const changes = getSelectionChanges(edges, selectedEdgeIds);\n            if (changes.length) {\n                onEdgesChange?.(changes);\n            }\n        }\n        store.setState({\n            userSelectionRect: nextUserSelectRect,\n        });\n    };\n    const onMouseUp = (event) => {\n        if (event.button !== 0) {\n            return;\n        }\n        const { userSelectionRect } = store.getState();\n        // We only want to trigger click functions when in selection mode if\n        // the user did not move the mouse.\n        if (!userSelectionActive && userSelectionRect && event.target === container.current) {\n            onClick?.(event);\n        }\n        store.setState({ nodesSelectionActive: prevSelectedNodesCount.current > 0 });\n        resetUserSelection();\n        onSelectionEnd?.(event);\n    };\n    const onMouseLeave = (event) => {\n        if (userSelectionActive) {\n            store.setState({ nodesSelectionActive: prevSelectedNodesCount.current > 0 });\n            onSelectionEnd?.(event);\n        }\n        resetUserSelection();\n    };\n    const hasActiveSelection = elementsSelectable && (isSelecting || userSelectionActive);\n    return (React.createElement(\"div\", { className: cc(['react-flow__pane', { dragging, selection: isSelecting }]), onClick: hasActiveSelection ? undefined : wrapHandler(onClick, container), onContextMenu: wrapHandler(onContextMenu, container), onWheel: wrapHandler(onWheel, container), onMouseEnter: hasActiveSelection ? undefined : onPaneMouseEnter, onMouseDown: hasActiveSelection ? onMouseDown : undefined, onMouseMove: hasActiveSelection ? onMouseMove : onPaneMouseMove, onMouseUp: hasActiveSelection ? onMouseUp : undefined, onMouseLeave: hasActiveSelection ? onMouseLeave : onPaneMouseLeave, ref: container, style: containerStyle },\n        children,\n        React.createElement(UserSelection, null)));\n});\nPane.displayName = 'Pane';\n\nfunction isParentSelected(node, nodeInternals) {\n    const parentId = node.parentNode || node.parentId;\n    if (!parentId) {\n        return false;\n    }\n    const parentNode = nodeInternals.get(parentId);\n    if (!parentNode) {\n        return false;\n    }\n    if (parentNode.selected) {\n        return true;\n    }\n    return isParentSelected(parentNode, nodeInternals);\n}\nfunction hasSelector(target, selector, nodeRef) {\n    let current = target;\n    do {\n        if (current?.matches(selector))\n            return true;\n        if (current === nodeRef.current)\n            return false;\n        current = current.parentElement;\n    } while (current);\n    return false;\n}\n// looks for all selected nodes and created a NodeDragItem for each of them\nfunction getDragItems(nodeInternals, nodesDraggable, mousePos, nodeId) {\n    return Array.from(nodeInternals.values())\n        .filter((n) => (n.selected || n.id === nodeId) &&\n        (!n.parentNode || n.parentId || !isParentSelected(n, nodeInternals)) &&\n        (n.draggable || (nodesDraggable && typeof n.draggable === 'undefined')))\n        .map((n) => ({\n        id: n.id,\n        position: n.position || { x: 0, y: 0 },\n        positionAbsolute: n.positionAbsolute || { x: 0, y: 0 },\n        distance: {\n            x: mousePos.x - (n.positionAbsolute?.x ?? 0),\n            y: mousePos.y - (n.positionAbsolute?.y ?? 0),\n        },\n        delta: {\n            x: 0,\n            y: 0,\n        },\n        extent: n.extent,\n        parentNode: n.parentNode || n.parentId,\n        parentId: n.parentNode || n.parentId,\n        width: n.width,\n        height: n.height,\n        expandParent: n.expandParent,\n    }));\n}\nfunction clampNodeExtent(node, extent) {\n    if (!extent || extent === 'parent') {\n        return extent;\n    }\n    return [extent[0], [extent[1][0] - (node.width || 0), extent[1][1] - (node.height || 0)]];\n}\nfunction calcNextPosition(node, nextPosition, nodeInternals, nodeExtent, nodeOrigin = [0, 0], onError) {\n    const clampedNodeExtent = clampNodeExtent(node, node.extent || nodeExtent);\n    let currentExtent = clampedNodeExtent;\n    const parentId = node.parentNode || node.parentId;\n    if (node.extent === 'parent' && !node.expandParent) {\n        if (parentId && node.width && node.height) {\n            const parent = nodeInternals.get(parentId);\n            const { x: parentX, y: parentY } = getNodePositionWithOrigin(parent, nodeOrigin).positionAbsolute;\n            currentExtent =\n                parent && isNumeric(parentX) && isNumeric(parentY) && isNumeric(parent.width) && isNumeric(parent.height)\n                    ? [\n                        [parentX + node.width * nodeOrigin[0], parentY + node.height * nodeOrigin[1]],\n                        [\n                            parentX + parent.width - node.width + node.width * nodeOrigin[0],\n                            parentY + parent.height - node.height + node.height * nodeOrigin[1],\n                        ],\n                    ]\n                    : currentExtent;\n        }\n        else {\n            onError?.('005', errorMessages['error005']());\n            currentExtent = clampedNodeExtent;\n        }\n    }\n    else if (node.extent && parentId && node.extent !== 'parent') {\n        const parent = nodeInternals.get(parentId);\n        const { x: parentX, y: parentY } = getNodePositionWithOrigin(parent, nodeOrigin).positionAbsolute;\n        currentExtent = [\n            [node.extent[0][0] + parentX, node.extent[0][1] + parentY],\n            [node.extent[1][0] + parentX, node.extent[1][1] + parentY],\n        ];\n    }\n    let parentPosition = { x: 0, y: 0 };\n    if (parentId) {\n        const parentNode = nodeInternals.get(parentId);\n        parentPosition = getNodePositionWithOrigin(parentNode, nodeOrigin).positionAbsolute;\n    }\n    const positionAbsolute = currentExtent && currentExtent !== 'parent'\n        ? clampPosition(nextPosition, currentExtent)\n        : nextPosition;\n    return {\n        position: {\n            x: positionAbsolute.x - parentPosition.x,\n            y: positionAbsolute.y - parentPosition.y,\n        },\n        positionAbsolute,\n    };\n}\n// returns two params:\n// 1. the dragged node (or the first of the list, if we are dragging a node selection)\n// 2. array of selected nodes (for multi selections)\nfunction getEventHandlerParams({ nodeId, dragItems, nodeInternals, }) {\n    const extentedDragItems = dragItems.map((n) => {\n        const node = nodeInternals.get(n.id);\n        return {\n            ...node,\n            position: n.position,\n            positionAbsolute: n.positionAbsolute,\n        };\n    });\n    return [nodeId ? extentedDragItems.find((n) => n.id === nodeId) : extentedDragItems[0], extentedDragItems];\n}\n\nconst getHandleBounds = (selector, nodeElement, zoom, nodeOrigin) => {\n    const handles = nodeElement.querySelectorAll(selector);\n    if (!handles || !handles.length) {\n        return null;\n    }\n    const handlesArray = Array.from(handles);\n    const nodeBounds = nodeElement.getBoundingClientRect();\n    const nodeOffset = {\n        x: nodeBounds.width * nodeOrigin[0],\n        y: nodeBounds.height * nodeOrigin[1],\n    };\n    return handlesArray.map((handle) => {\n        const handleBounds = handle.getBoundingClientRect();\n        return {\n            id: handle.getAttribute('data-handleid'),\n            position: handle.getAttribute('data-handlepos'),\n            x: (handleBounds.left - nodeBounds.left - nodeOffset.x) / zoom,\n            y: (handleBounds.top - nodeBounds.top - nodeOffset.y) / zoom,\n            ...getDimensions(handle),\n        };\n    });\n};\nfunction getMouseHandler(id, getState, handler) {\n    return handler === undefined\n        ? handler\n        : (event) => {\n            const node = getState().nodeInternals.get(id);\n            if (node) {\n                handler(event, { ...node });\n            }\n        };\n}\n// this handler is called by\n// 1. the click handler when node is not draggable or selectNodesOnDrag = false\n// or\n// 2. the on drag start handler when node is draggable and selectNodesOnDrag = true\nfunction handleNodeClick({ id, store, unselect = false, nodeRef, }) {\n    const { addSelectedNodes, unselectNodesAndEdges, multiSelectionActive, nodeInternals, onError } = store.getState();\n    const node = nodeInternals.get(id);\n    if (!node) {\n        onError?.('012', errorMessages['error012'](id));\n        return;\n    }\n    store.setState({ nodesSelectionActive: false });\n    if (!node.selected) {\n        addSelectedNodes([id]);\n    }\n    else if (unselect || (node.selected && multiSelectionActive)) {\n        unselectNodesAndEdges({ nodes: [node], edges: [] });\n        requestAnimationFrame(() => nodeRef?.current?.blur());\n    }\n}\n\nfunction useGetPointerPosition() {\n    const store = useStoreApi();\n    // returns the pointer position projected to the RF coordinate system\n    const getPointerPosition = useCallback(({ sourceEvent }) => {\n        const { transform, snapGrid, snapToGrid } = store.getState();\n        const x = sourceEvent.touches ? sourceEvent.touches[0].clientX : sourceEvent.clientX;\n        const y = sourceEvent.touches ? sourceEvent.touches[0].clientY : sourceEvent.clientY;\n        const pointerPos = {\n            x: (x - transform[0]) / transform[2],\n            y: (y - transform[1]) / transform[2],\n        };\n        // we need the snapped position in order to be able to skip unnecessary drag events\n        return {\n            xSnapped: snapToGrid ? snapGrid[0] * Math.round(pointerPos.x / snapGrid[0]) : pointerPos.x,\n            ySnapped: snapToGrid ? snapGrid[1] * Math.round(pointerPos.y / snapGrid[1]) : pointerPos.y,\n            ...pointerPos,\n        };\n    }, []);\n    return getPointerPosition;\n}\n\nfunction wrapSelectionDragFunc(selectionFunc) {\n    return (event, _, nodes) => selectionFunc?.(event, nodes);\n}\nfunction useDrag({ nodeRef, disabled = false, noDragClassName, handleSelector, nodeId, isSelectable, selectNodesOnDrag, }) {\n    const store = useStoreApi();\n    const [dragging, setDragging] = useState(false);\n    const dragItems = useRef([]);\n    const lastPos = useRef({ x: null, y: null });\n    const autoPanId = useRef(0);\n    const containerBounds = useRef(null);\n    const mousePosition = useRef({ x: 0, y: 0 });\n    const dragEvent = useRef(null);\n    const autoPanStarted = useRef(false);\n    const dragStarted = useRef(false);\n    const getPointerPosition = useGetPointerPosition();\n    useEffect(() => {\n        if (nodeRef?.current) {\n            const selection = select(nodeRef.current);\n            const updateNodes = ({ x, y }) => {\n                const { nodeInternals, onNodeDrag, onSelectionDrag, updateNodePositions, nodeExtent, snapGrid, snapToGrid, nodeOrigin, onError, } = store.getState();\n                lastPos.current = { x, y };\n                let hasChange = false;\n                let nodesBox = { x: 0, y: 0, x2: 0, y2: 0 };\n                if (dragItems.current.length > 1 && nodeExtent) {\n                    const rect = getNodesBounds(dragItems.current, nodeOrigin);\n                    nodesBox = rectToBox(rect);\n                }\n                dragItems.current = dragItems.current.map((n) => {\n                    const nextPosition = { x: x - n.distance.x, y: y - n.distance.y };\n                    if (snapToGrid) {\n                        nextPosition.x = snapGrid[0] * Math.round(nextPosition.x / snapGrid[0]);\n                        nextPosition.y = snapGrid[1] * Math.round(nextPosition.y / snapGrid[1]);\n                    }\n                    // if there is selection with multiple nodes and a node extent is set, we need to adjust the node extent for each node\n                    // based on its position so that the node stays at it's position relative to the selection.\n                    const adjustedNodeExtent = [\n                        [nodeExtent[0][0], nodeExtent[0][1]],\n                        [nodeExtent[1][0], nodeExtent[1][1]],\n                    ];\n                    if (dragItems.current.length > 1 && nodeExtent && !n.extent) {\n                        adjustedNodeExtent[0][0] = n.positionAbsolute.x - nodesBox.x + nodeExtent[0][0];\n                        adjustedNodeExtent[1][0] = n.positionAbsolute.x + (n.width ?? 0) - nodesBox.x2 + nodeExtent[1][0];\n                        adjustedNodeExtent[0][1] = n.positionAbsolute.y - nodesBox.y + nodeExtent[0][1];\n                        adjustedNodeExtent[1][1] = n.positionAbsolute.y + (n.height ?? 0) - nodesBox.y2 + nodeExtent[1][1];\n                    }\n                    const updatedPos = calcNextPosition(n, nextPosition, nodeInternals, adjustedNodeExtent, nodeOrigin, onError);\n                    // we want to make sure that we only fire a change event when there is a change\n                    hasChange = hasChange || n.position.x !== updatedPos.position.x || n.position.y !== updatedPos.position.y;\n                    n.position = updatedPos.position;\n                    n.positionAbsolute = updatedPos.positionAbsolute;\n                    return n;\n                });\n                if (!hasChange) {\n                    return;\n                }\n                updateNodePositions(dragItems.current, true, true);\n                setDragging(true);\n                const onDrag = nodeId ? onNodeDrag : wrapSelectionDragFunc(onSelectionDrag);\n                if (onDrag && dragEvent.current) {\n                    const [currentNode, nodes] = getEventHandlerParams({\n                        nodeId,\n                        dragItems: dragItems.current,\n                        nodeInternals,\n                    });\n                    onDrag(dragEvent.current, currentNode, nodes);\n                }\n            };\n            const autoPan = () => {\n                if (!containerBounds.current) {\n                    return;\n                }\n                const [xMovement, yMovement] = calcAutoPan(mousePosition.current, containerBounds.current);\n                if (xMovement !== 0 || yMovement !== 0) {\n                    const { transform, panBy } = store.getState();\n                    lastPos.current.x = (lastPos.current.x ?? 0) - xMovement / transform[2];\n                    lastPos.current.y = (lastPos.current.y ?? 0) - yMovement / transform[2];\n                    if (panBy({ x: xMovement, y: yMovement })) {\n                        updateNodes(lastPos.current);\n                    }\n                }\n                autoPanId.current = requestAnimationFrame(autoPan);\n            };\n            const startDrag = (event) => {\n                const { nodeInternals, multiSelectionActive, nodesDraggable, unselectNodesAndEdges, onNodeDragStart, onSelectionDragStart, } = store.getState();\n                dragStarted.current = true;\n                const onStart = nodeId ? onNodeDragStart : wrapSelectionDragFunc(onSelectionDragStart);\n                if ((!selectNodesOnDrag || !isSelectable) && !multiSelectionActive && nodeId) {\n                    if (!nodeInternals.get(nodeId)?.selected) {\n                        // we need to reset selected nodes when selectNodesOnDrag=false\n                        unselectNodesAndEdges();\n                    }\n                }\n                if (nodeId && isSelectable && selectNodesOnDrag) {\n                    handleNodeClick({\n                        id: nodeId,\n                        store,\n                        nodeRef: nodeRef,\n                    });\n                }\n                const pointerPos = getPointerPosition(event);\n                lastPos.current = pointerPos;\n                dragItems.current = getDragItems(nodeInternals, nodesDraggable, pointerPos, nodeId);\n                if (onStart && dragItems.current) {\n                    const [currentNode, nodes] = getEventHandlerParams({\n                        nodeId,\n                        dragItems: dragItems.current,\n                        nodeInternals,\n                    });\n                    onStart(event.sourceEvent, currentNode, nodes);\n                }\n            };\n            if (disabled) {\n                selection.on('.drag', null);\n            }\n            else {\n                const dragHandler = drag()\n                    .on('start', (event) => {\n                    const { domNode, nodeDragThreshold } = store.getState();\n                    if (nodeDragThreshold === 0) {\n                        startDrag(event);\n                    }\n                    const pointerPos = getPointerPosition(event);\n                    lastPos.current = pointerPos;\n                    containerBounds.current = domNode?.getBoundingClientRect() || null;\n                    mousePosition.current = getEventPosition(event.sourceEvent, containerBounds.current);\n                })\n                    .on('drag', (event) => {\n                    const pointerPos = getPointerPosition(event);\n                    const { autoPanOnNodeDrag, nodeDragThreshold } = store.getState();\n                    if (!autoPanStarted.current && dragStarted.current && autoPanOnNodeDrag) {\n                        autoPanStarted.current = true;\n                        autoPan();\n                    }\n                    if (!dragStarted.current) {\n                        const x = pointerPos.xSnapped - (lastPos?.current?.x ?? 0);\n                        const y = pointerPos.ySnapped - (lastPos?.current?.y ?? 0);\n                        const distance = Math.sqrt(x * x + y * y);\n                        if (distance > nodeDragThreshold) {\n                            startDrag(event);\n                        }\n                    }\n                    // skip events without movement\n                    if ((lastPos.current.x !== pointerPos.xSnapped || lastPos.current.y !== pointerPos.ySnapped) &&\n                        dragItems.current &&\n                        dragStarted.current) {\n                        dragEvent.current = event.sourceEvent;\n                        mousePosition.current = getEventPosition(event.sourceEvent, containerBounds.current);\n                        updateNodes(pointerPos);\n                    }\n                })\n                    .on('end', (event) => {\n                    if (!dragStarted.current) {\n                        return;\n                    }\n                    setDragging(false);\n                    autoPanStarted.current = false;\n                    dragStarted.current = false;\n                    cancelAnimationFrame(autoPanId.current);\n                    if (dragItems.current) {\n                        const { updateNodePositions, nodeInternals, onNodeDragStop, onSelectionDragStop } = store.getState();\n                        const onStop = nodeId ? onNodeDragStop : wrapSelectionDragFunc(onSelectionDragStop);\n                        updateNodePositions(dragItems.current, false, false);\n                        if (onStop) {\n                            const [currentNode, nodes] = getEventHandlerParams({\n                                nodeId,\n                                dragItems: dragItems.current,\n                                nodeInternals,\n                            });\n                            onStop(event.sourceEvent, currentNode, nodes);\n                        }\n                    }\n                })\n                    .filter((event) => {\n                    const target = event.target;\n                    const isDraggable = !event.button &&\n                        (!noDragClassName || !hasSelector(target, `.${noDragClassName}`, nodeRef)) &&\n                        (!handleSelector || hasSelector(target, handleSelector, nodeRef));\n                    return isDraggable;\n                });\n                selection.call(dragHandler);\n                return () => {\n                    selection.on('.drag', null);\n                };\n            }\n        }\n    }, [\n        nodeRef,\n        disabled,\n        noDragClassName,\n        handleSelector,\n        isSelectable,\n        store,\n        nodeId,\n        selectNodesOnDrag,\n        getPointerPosition,\n    ]);\n    return dragging;\n}\n\nfunction useUpdateNodePositions() {\n    const store = useStoreApi();\n    const updatePositions = useCallback((params) => {\n        const { nodeInternals, nodeExtent, updateNodePositions, getNodes, snapToGrid, snapGrid, onError, nodesDraggable } = store.getState();\n        const selectedNodes = getNodes().filter((n) => n.selected && (n.draggable || (nodesDraggable && typeof n.draggable === 'undefined')));\n        // by default a node moves 5px on each key press, or 20px if shift is pressed\n        // if snap grid is enabled, we use that for the velocity.\n        const xVelo = snapToGrid ? snapGrid[0] : 5;\n        const yVelo = snapToGrid ? snapGrid[1] : 5;\n        const factor = params.isShiftPressed ? 4 : 1;\n        const positionDiffX = params.x * xVelo * factor;\n        const positionDiffY = params.y * yVelo * factor;\n        const nodeUpdates = selectedNodes.map((n) => {\n            if (n.positionAbsolute) {\n                const nextPosition = { x: n.positionAbsolute.x + positionDiffX, y: n.positionAbsolute.y + positionDiffY };\n                if (snapToGrid) {\n                    nextPosition.x = snapGrid[0] * Math.round(nextPosition.x / snapGrid[0]);\n                    nextPosition.y = snapGrid[1] * Math.round(nextPosition.y / snapGrid[1]);\n                }\n                const { positionAbsolute, position } = calcNextPosition(n, nextPosition, nodeInternals, nodeExtent, undefined, onError);\n                n.position = position;\n                n.positionAbsolute = positionAbsolute;\n            }\n            return n;\n        });\n        updateNodePositions(nodeUpdates, true, false);\n    }, []);\n    return updatePositions;\n}\n\nconst arrowKeyDiffs = {\n    ArrowUp: { x: 0, y: -1 },\n    ArrowDown: { x: 0, y: 1 },\n    ArrowLeft: { x: -1, y: 0 },\n    ArrowRight: { x: 1, y: 0 },\n};\nvar wrapNode = (NodeComponent) => {\n    const NodeWrapper = ({ id, type, data, xPos, yPos, xPosOrigin, yPosOrigin, selected, onClick, onMouseEnter, onMouseMove, onMouseLeave, onContextMenu, onDoubleClick, style, className, isDraggable, isSelectable, isConnectable, isFocusable, selectNodesOnDrag, sourcePosition, targetPosition, hidden, resizeObserver, dragHandle, zIndex, isParent, noDragClassName, noPanClassName, initialized, disableKeyboardA11y, ariaLabel, rfId, hasHandleBounds, }) => {\n        const store = useStoreApi();\n        const nodeRef = useRef(null);\n        const prevNodeRef = useRef(null);\n        const prevSourcePosition = useRef(sourcePosition);\n        const prevTargetPosition = useRef(targetPosition);\n        const prevType = useRef(type);\n        const hasPointerEvents = isSelectable || isDraggable || onClick || onMouseEnter || onMouseMove || onMouseLeave;\n        const updatePositions = useUpdateNodePositions();\n        const onMouseEnterHandler = getMouseHandler(id, store.getState, onMouseEnter);\n        const onMouseMoveHandler = getMouseHandler(id, store.getState, onMouseMove);\n        const onMouseLeaveHandler = getMouseHandler(id, store.getState, onMouseLeave);\n        const onContextMenuHandler = getMouseHandler(id, store.getState, onContextMenu);\n        const onDoubleClickHandler = getMouseHandler(id, store.getState, onDoubleClick);\n        const onSelectNodeHandler = (event) => {\n            const { nodeDragThreshold } = store.getState();\n            if (isSelectable && (!selectNodesOnDrag || !isDraggable || nodeDragThreshold > 0)) {\n                // this handler gets called within the drag start event when selectNodesOnDrag=true\n                handleNodeClick({\n                    id,\n                    store,\n                    nodeRef,\n                });\n            }\n            if (onClick) {\n                const node = store.getState().nodeInternals.get(id);\n                if (node) {\n                    onClick(event, { ...node });\n                }\n            }\n        };\n        const onKeyDown = (event) => {\n            if (isInputDOMNode(event)) {\n                return;\n            }\n            if (disableKeyboardA11y) {\n                return;\n            }\n            if (elementSelectionKeys.includes(event.key) && isSelectable) {\n                const unselect = event.key === 'Escape';\n                handleNodeClick({\n                    id,\n                    store,\n                    unselect,\n                    nodeRef,\n                });\n            }\n            else if (isDraggable && selected && Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {\n                store.setState({\n                    ariaLiveMessage: `Moved selected node ${event.key\n                        .replace('Arrow', '')\n                        .toLowerCase()}. New position, x: ${~~xPos}, y: ${~~yPos}`,\n                });\n                updatePositions({\n                    x: arrowKeyDiffs[event.key].x,\n                    y: arrowKeyDiffs[event.key].y,\n                    isShiftPressed: event.shiftKey,\n                });\n            }\n        };\n        useEffect(() => {\n            return () => {\n                if (prevNodeRef.current) {\n                    resizeObserver?.unobserve(prevNodeRef.current);\n                    prevNodeRef.current = null;\n                }\n            };\n        }, []);\n        useEffect(() => {\n            if (nodeRef.current && !hidden) {\n                const currNode = nodeRef.current;\n                if (!initialized || !hasHandleBounds || prevNodeRef.current !== currNode) {\n                    // At this point we always want to make sure that the node gets re-measured / re-initialized.\n                    // We need to unobserve it first in case it is still observed\n                    if (prevNodeRef.current) {\n                        resizeObserver?.unobserve(prevNodeRef.current);\n                    }\n                    resizeObserver?.observe(currNode);\n                    prevNodeRef.current = currNode;\n                }\n            }\n        }, [hidden, initialized, hasHandleBounds]);\n        useEffect(() => {\n            // when the user programmatically changes the source or handle position, we re-initialize the node\n            const typeChanged = prevType.current !== type;\n            const sourcePosChanged = prevSourcePosition.current !== sourcePosition;\n            const targetPosChanged = prevTargetPosition.current !== targetPosition;\n            if (nodeRef.current && (typeChanged || sourcePosChanged || targetPosChanged)) {\n                if (typeChanged) {\n                    prevType.current = type;\n                }\n                if (sourcePosChanged) {\n                    prevSourcePosition.current = sourcePosition;\n                }\n                if (targetPosChanged) {\n                    prevTargetPosition.current = targetPosition;\n                }\n                store.getState().updateNodeDimensions([{ id, nodeElement: nodeRef.current, forceUpdate: true }]);\n            }\n        }, [id, type, sourcePosition, targetPosition]);\n        const dragging = useDrag({\n            nodeRef,\n            disabled: hidden || !isDraggable,\n            noDragClassName,\n            handleSelector: dragHandle,\n            nodeId: id,\n            isSelectable,\n            selectNodesOnDrag,\n        });\n        if (hidden) {\n            return null;\n        }\n        return (React.createElement(\"div\", { className: cc([\n                'react-flow__node',\n                `react-flow__node-${type}`,\n                {\n                    // this is overwritable by passing `nopan` as a class name\n                    [noPanClassName]: isDraggable,\n                },\n                className,\n                {\n                    selected,\n                    selectable: isSelectable,\n                    parent: isParent,\n                    dragging,\n                },\n            ]), ref: nodeRef, style: {\n                zIndex,\n                transform: `translate(${xPosOrigin}px,${yPosOrigin}px)`,\n                pointerEvents: hasPointerEvents ? 'all' : 'none',\n                visibility: initialized ? 'visible' : 'hidden',\n                ...style,\n            }, \"data-id\": id, \"data-testid\": `rf__node-${id}`, onMouseEnter: onMouseEnterHandler, onMouseMove: onMouseMoveHandler, onMouseLeave: onMouseLeaveHandler, onContextMenu: onContextMenuHandler, onClick: onSelectNodeHandler, onDoubleClick: onDoubleClickHandler, onKeyDown: isFocusable ? onKeyDown : undefined, tabIndex: isFocusable ? 0 : undefined, role: isFocusable ? 'button' : undefined, \"aria-describedby\": disableKeyboardA11y ? undefined : `${ARIA_NODE_DESC_KEY}-${rfId}`, \"aria-label\": ariaLabel },\n            React.createElement(Provider, { value: id },\n                React.createElement(NodeComponent, { id: id, data: data, type: type, xPos: xPos, yPos: yPos, selected: selected, isConnectable: isConnectable, sourcePosition: sourcePosition, targetPosition: targetPosition, dragging: dragging, dragHandle: dragHandle, zIndex: zIndex }))));\n    };\n    NodeWrapper.displayName = 'NodeWrapper';\n    return memo(NodeWrapper);\n};\n\n/**\n * The nodes selection rectangle gets displayed when a user\n * made a selection with on or several nodes\n */\nconst selector$7 = (s) => {\n    const selectedNodes = s.getNodes().filter((n) => n.selected);\n    return {\n        ...getNodesBounds(selectedNodes, s.nodeOrigin),\n        transformString: `translate(${s.transform[0]}px,${s.transform[1]}px) scale(${s.transform[2]})`,\n        userSelectionActive: s.userSelectionActive,\n    };\n};\nfunction NodesSelection({ onSelectionContextMenu, noPanClassName, disableKeyboardA11y }) {\n    const store = useStoreApi();\n    const { width, height, x: left, y: top, transformString, userSelectionActive } = useStore(selector$7, shallow);\n    const updatePositions = useUpdateNodePositions();\n    const nodeRef = useRef(null);\n    useEffect(() => {\n        if (!disableKeyboardA11y) {\n            nodeRef.current?.focus({\n                preventScroll: true,\n            });\n        }\n    }, [disableKeyboardA11y]);\n    useDrag({\n        nodeRef,\n    });\n    if (userSelectionActive || !width || !height) {\n        return null;\n    }\n    const onContextMenu = onSelectionContextMenu\n        ? (event) => {\n            const selectedNodes = store\n                .getState()\n                .getNodes()\n                .filter((n) => n.selected);\n            onSelectionContextMenu(event, selectedNodes);\n        }\n        : undefined;\n    const onKeyDown = (event) => {\n        if (Object.prototype.hasOwnProperty.call(arrowKeyDiffs, event.key)) {\n            updatePositions({\n                x: arrowKeyDiffs[event.key].x,\n                y: arrowKeyDiffs[event.key].y,\n                isShiftPressed: event.shiftKey,\n            });\n        }\n    };\n    return (React.createElement(\"div\", { className: cc(['react-flow__nodesselection', 'react-flow__container', noPanClassName]), style: {\n            transform: transformString,\n        } },\n        React.createElement(\"div\", { ref: nodeRef, className: \"react-flow__nodesselection-rect\", onContextMenu: onContextMenu, tabIndex: disableKeyboardA11y ? undefined : -1, onKeyDown: disableKeyboardA11y ? undefined : onKeyDown, style: {\n                width,\n                height,\n                top,\n                left,\n            } })));\n}\nvar NodesSelection$1 = memo(NodesSelection);\n\nconst selector$6 = (s) => s.nodesSelectionActive;\nconst FlowRenderer = ({ children, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneContextMenu, onPaneScroll, deleteKeyCode, onMove, onMoveStart, onMoveEnd, selectionKeyCode, selectionOnDrag, selectionMode, onSelectionStart, onSelectionEnd, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, elementsSelectable, zoomOnScroll, zoomOnPinch, panOnScroll: _panOnScroll, panOnScrollSpeed, panOnScrollMode, zoomOnDoubleClick, panOnDrag: _panOnDrag, defaultViewport, translateExtent, minZoom, maxZoom, preventScrolling, onSelectionContextMenu, noWheelClassName, noPanClassName, disableKeyboardA11y, }) => {\n    const nodesSelectionActive = useStore(selector$6);\n    const selectionKeyPressed = useKeyPress(selectionKeyCode);\n    const panActivationKeyPressed = useKeyPress(panActivationKeyCode);\n    const panOnDrag = panActivationKeyPressed || _panOnDrag;\n    const panOnScroll = panActivationKeyPressed || _panOnScroll;\n    const isSelecting = selectionKeyPressed || (selectionOnDrag && panOnDrag !== true);\n    useGlobalKeyHandler({ deleteKeyCode, multiSelectionKeyCode });\n    return (React.createElement(ZoomPane, { onMove: onMove, onMoveStart: onMoveStart, onMoveEnd: onMoveEnd, onPaneContextMenu: onPaneContextMenu, elementsSelectable: elementsSelectable, zoomOnScroll: zoomOnScroll, zoomOnPinch: zoomOnPinch, panOnScroll: panOnScroll, panOnScrollSpeed: panOnScrollSpeed, panOnScrollMode: panOnScrollMode, zoomOnDoubleClick: zoomOnDoubleClick, panOnDrag: !selectionKeyPressed && panOnDrag, defaultViewport: defaultViewport, translateExtent: translateExtent, minZoom: minZoom, maxZoom: maxZoom, zoomActivationKeyCode: zoomActivationKeyCode, preventScrolling: preventScrolling, noWheelClassName: noWheelClassName, noPanClassName: noPanClassName },\n        React.createElement(Pane, { onSelectionStart: onSelectionStart, onSelectionEnd: onSelectionEnd, onPaneClick: onPaneClick, onPaneMouseEnter: onPaneMouseEnter, onPaneMouseMove: onPaneMouseMove, onPaneMouseLeave: onPaneMouseLeave, onPaneContextMenu: onPaneContextMenu, onPaneScroll: onPaneScroll, panOnDrag: panOnDrag, isSelecting: !!isSelecting, selectionMode: selectionMode },\n            children,\n            nodesSelectionActive && (React.createElement(NodesSelection$1, { onSelectionContextMenu: onSelectionContextMenu, noPanClassName: noPanClassName, disableKeyboardA11y: disableKeyboardA11y })))));\n};\nFlowRenderer.displayName = 'FlowRenderer';\nvar FlowRenderer$1 = memo(FlowRenderer);\n\nfunction useVisibleNodes(onlyRenderVisible) {\n    const nodes = useStore(useCallback((s) => onlyRenderVisible\n        ? getNodesInside(s.nodeInternals, { x: 0, y: 0, width: s.width, height: s.height }, s.transform, true)\n        : s.getNodes(), [onlyRenderVisible]));\n    return nodes;\n}\n\nfunction createNodeTypes(nodeTypes) {\n    const standardTypes = {\n        input: wrapNode((nodeTypes.input || InputNode$1)),\n        default: wrapNode((nodeTypes.default || DefaultNode$1)),\n        output: wrapNode((nodeTypes.output || OutputNode$1)),\n        group: wrapNode((nodeTypes.group || GroupNode)),\n    };\n    const wrappedTypes = {};\n    const specialTypes = Object.keys(nodeTypes)\n        .filter((k) => !['input', 'default', 'output', 'group'].includes(k))\n        .reduce((res, key) => {\n        res[key] = wrapNode((nodeTypes[key] || DefaultNode$1));\n        return res;\n    }, wrappedTypes);\n    return {\n        ...standardTypes,\n        ...specialTypes,\n    };\n}\nconst getPositionWithOrigin = ({ x, y, width, height, origin, }) => {\n    if (!width || !height) {\n        return { x, y };\n    }\n    if (origin[0] < 0 || origin[1] < 0 || origin[0] > 1 || origin[1] > 1) {\n        return { x, y };\n    }\n    return {\n        x: x - width * origin[0],\n        y: y - height * origin[1],\n    };\n};\n\nconst selector$5 = (s) => ({\n    nodesDraggable: s.nodesDraggable,\n    nodesConnectable: s.nodesConnectable,\n    nodesFocusable: s.nodesFocusable,\n    elementsSelectable: s.elementsSelectable,\n    updateNodeDimensions: s.updateNodeDimensions,\n    onError: s.onError,\n});\nconst NodeRenderer = (props) => {\n    const { nodesDraggable, nodesConnectable, nodesFocusable, elementsSelectable, updateNodeDimensions, onError } = useStore(selector$5, shallow);\n    const nodes = useVisibleNodes(props.onlyRenderVisibleElements);\n    const resizeObserverRef = useRef();\n    const resizeObserver = useMemo(() => {\n        if (typeof ResizeObserver === 'undefined') {\n            return null;\n        }\n        const observer = new ResizeObserver((entries) => {\n            const updates = entries.map((entry) => ({\n                id: entry.target.getAttribute('data-id'),\n                nodeElement: entry.target,\n                forceUpdate: true,\n            }));\n            updateNodeDimensions(updates);\n        });\n        resizeObserverRef.current = observer;\n        return observer;\n    }, []);\n    useEffect(() => {\n        return () => {\n            resizeObserverRef?.current?.disconnect();\n        };\n    }, []);\n    return (React.createElement(\"div\", { className: \"react-flow__nodes\", style: containerStyle }, nodes.map((node) => {\n        let nodeType = node.type || 'default';\n        if (!props.nodeTypes[nodeType]) {\n            onError?.('003', errorMessages['error003'](nodeType));\n            nodeType = 'default';\n        }\n        const NodeComponent = (props.nodeTypes[nodeType] || props.nodeTypes.default);\n        const isDraggable = !!(node.draggable || (nodesDraggable && typeof node.draggable === 'undefined'));\n        const isSelectable = !!(node.selectable || (elementsSelectable && typeof node.selectable === 'undefined'));\n        const isConnectable = !!(node.connectable || (nodesConnectable && typeof node.connectable === 'undefined'));\n        const isFocusable = !!(node.focusable || (nodesFocusable && typeof node.focusable === 'undefined'));\n        const clampedPosition = props.nodeExtent\n            ? clampPosition(node.positionAbsolute, props.nodeExtent)\n            : node.positionAbsolute;\n        const posX = clampedPosition?.x ?? 0;\n        const posY = clampedPosition?.y ?? 0;\n        const posOrigin = getPositionWithOrigin({\n            x: posX,\n            y: posY,\n            width: node.width ?? 0,\n            height: node.height ?? 0,\n            origin: props.nodeOrigin,\n        });\n        return (React.createElement(NodeComponent, { key: node.id, id: node.id, className: node.className, style: node.style, type: nodeType, data: node.data, sourcePosition: node.sourcePosition || Position.Bottom, targetPosition: node.targetPosition || Position.Top, hidden: node.hidden, xPos: posX, yPos: posY, xPosOrigin: posOrigin.x, yPosOrigin: posOrigin.y, selectNodesOnDrag: props.selectNodesOnDrag, onClick: props.onNodeClick, onMouseEnter: props.onNodeMouseEnter, onMouseMove: props.onNodeMouseMove, onMouseLeave: props.onNodeMouseLeave, onContextMenu: props.onNodeContextMenu, onDoubleClick: props.onNodeDoubleClick, selected: !!node.selected, isDraggable: isDraggable, isSelectable: isSelectable, isConnectable: isConnectable, isFocusable: isFocusable, resizeObserver: resizeObserver, dragHandle: node.dragHandle, zIndex: node[internalsSymbol]?.z ?? 0, isParent: !!node[internalsSymbol]?.isParent, noDragClassName: props.noDragClassName, noPanClassName: props.noPanClassName, initialized: !!node.width && !!node.height, rfId: props.rfId, disableKeyboardA11y: props.disableKeyboardA11y, ariaLabel: node.ariaLabel, hasHandleBounds: !!node[internalsSymbol]?.handleBounds }));\n    })));\n};\nNodeRenderer.displayName = 'NodeRenderer';\nvar NodeRenderer$1 = memo(NodeRenderer);\n\nconst shiftX = (x, shift, position) => {\n    if (position === Position.Left)\n        return x - shift;\n    if (position === Position.Right)\n        return x + shift;\n    return x;\n};\nconst shiftY = (y, shift, position) => {\n    if (position === Position.Top)\n        return y - shift;\n    if (position === Position.Bottom)\n        return y + shift;\n    return y;\n};\nconst EdgeUpdaterClassName = 'react-flow__edgeupdater';\nconst EdgeAnchor = ({ position, centerX, centerY, radius = 10, onMouseDown, onMouseEnter, onMouseOut, type, }) => (React.createElement(\"circle\", { onMouseDown: onMouseDown, onMouseEnter: onMouseEnter, onMouseOut: onMouseOut, className: cc([EdgeUpdaterClassName, `${EdgeUpdaterClassName}-${type}`]), cx: shiftX(centerX, radius, position), cy: shiftY(centerY, radius, position), r: radius, stroke: \"transparent\", fill: \"transparent\" }));\n\nconst alwaysValidConnection = () => true;\nvar wrapEdge = (EdgeComponent) => {\n    const EdgeWrapper = ({ id, className, type, data, onClick, onEdgeDoubleClick, selected, animated, label, labelStyle, labelShowBg, labelBgStyle, labelBgPadding, labelBgBorderRadius, style, source, target, sourceX, sourceY, targetX, targetY, sourcePosition, targetPosition, elementsSelectable, hidden, sourceHandleId, targetHandleId, onContextMenu, onMouseEnter, onMouseMove, onMouseLeave, edgeUpdaterRadius, onEdgeUpdate, onEdgeUpdateStart, onEdgeUpdateEnd, markerEnd, markerStart, rfId, ariaLabel, isFocusable, isUpdatable, pathOptions, interactionWidth, disableKeyboardA11y, }) => {\n        const edgeRef = useRef(null);\n        const [updateHover, setUpdateHover] = useState(false);\n        const [updating, setUpdating] = useState(false);\n        const store = useStoreApi();\n        const markerStartUrl = useMemo(() => `url('#${getMarkerId(markerStart, rfId)}')`, [markerStart, rfId]);\n        const markerEndUrl = useMemo(() => `url('#${getMarkerId(markerEnd, rfId)}')`, [markerEnd, rfId]);\n        if (hidden) {\n            return null;\n        }\n        const onEdgeClick = (event) => {\n            const { edges, addSelectedEdges, unselectNodesAndEdges, multiSelectionActive } = store.getState();\n            const edge = edges.find((e) => e.id === id);\n            if (!edge) {\n                return;\n            }\n            if (elementsSelectable) {\n                store.setState({ nodesSelectionActive: false });\n                if (edge.selected && multiSelectionActive) {\n                    unselectNodesAndEdges({ nodes: [], edges: [edge] });\n                    edgeRef.current?.blur();\n                }\n                else {\n                    addSelectedEdges([id]);\n                }\n            }\n            if (onClick) {\n                onClick(event, edge);\n            }\n        };\n        const onEdgeDoubleClickHandler = getMouseHandler$1(id, store.getState, onEdgeDoubleClick);\n        const onEdgeContextMenu = getMouseHandler$1(id, store.getState, onContextMenu);\n        const onEdgeMouseEnter = getMouseHandler$1(id, store.getState, onMouseEnter);\n        const onEdgeMouseMove = getMouseHandler$1(id, store.getState, onMouseMove);\n        const onEdgeMouseLeave = getMouseHandler$1(id, store.getState, onMouseLeave);\n        const handleEdgeUpdater = (event, isSourceHandle) => {\n            // avoid triggering edge updater if mouse btn is not left\n            if (event.button !== 0) {\n                return;\n            }\n            const { edges, isValidConnection: isValidConnectionStore } = store.getState();\n            const nodeId = isSourceHandle ? target : source;\n            const handleId = (isSourceHandle ? targetHandleId : sourceHandleId) || null;\n            const handleType = isSourceHandle ? 'target' : 'source';\n            const isValidConnection = isValidConnectionStore || alwaysValidConnection;\n            const isTarget = isSourceHandle;\n            const edge = edges.find((e) => e.id === id);\n            setUpdating(true);\n            onEdgeUpdateStart?.(event, edge, handleType);\n            const _onEdgeUpdateEnd = (evt) => {\n                setUpdating(false);\n                onEdgeUpdateEnd?.(evt, edge, handleType);\n            };\n            const onConnectEdge = (connection) => onEdgeUpdate?.(edge, connection);\n            handlePointerDown({\n                event,\n                handleId,\n                nodeId,\n                onConnect: onConnectEdge,\n                isTarget,\n                getState: store.getState,\n                setState: store.setState,\n                isValidConnection,\n                edgeUpdaterType: handleType,\n                onEdgeUpdateEnd: _onEdgeUpdateEnd,\n            });\n        };\n        const onEdgeUpdaterSourceMouseDown = (event) => handleEdgeUpdater(event, true);\n        const onEdgeUpdaterTargetMouseDown = (event) => handleEdgeUpdater(event, false);\n        const onEdgeUpdaterMouseEnter = () => setUpdateHover(true);\n        const onEdgeUpdaterMouseOut = () => setUpdateHover(false);\n        const inactive = !elementsSelectable && !onClick;\n        const onKeyDown = (event) => {\n            if (!disableKeyboardA11y && elementSelectionKeys.includes(event.key) && elementsSelectable) {\n                const { unselectNodesAndEdges, addSelectedEdges, edges } = store.getState();\n                const unselect = event.key === 'Escape';\n                if (unselect) {\n                    edgeRef.current?.blur();\n                    unselectNodesAndEdges({ edges: [edges.find((e) => e.id === id)] });\n                }\n                else {\n                    addSelectedEdges([id]);\n                }\n            }\n        };\n        return (React.createElement(\"g\", { className: cc([\n                'react-flow__edge',\n                `react-flow__edge-${type}`,\n                className,\n                { selected, animated, inactive, updating: updateHover },\n            ]), onClick: onEdgeClick, onDoubleClick: onEdgeDoubleClickHandler, onContextMenu: onEdgeContextMenu, onMouseEnter: onEdgeMouseEnter, onMouseMove: onEdgeMouseMove, onMouseLeave: onEdgeMouseLeave, onKeyDown: isFocusable ? onKeyDown : undefined, tabIndex: isFocusable ? 0 : undefined, role: isFocusable ? 'button' : 'img', \"data-testid\": `rf__edge-${id}`, \"aria-label\": ariaLabel === null ? undefined : ariaLabel ? ariaLabel : `Edge from ${source} to ${target}`, \"aria-describedby\": isFocusable ? `${ARIA_EDGE_DESC_KEY}-${rfId}` : undefined, ref: edgeRef },\n            !updating && (React.createElement(EdgeComponent, { id: id, source: source, target: target, selected: selected, animated: animated, label: label, labelStyle: labelStyle, labelShowBg: labelShowBg, labelBgStyle: labelBgStyle, labelBgPadding: labelBgPadding, labelBgBorderRadius: labelBgBorderRadius, data: data, style: style, sourceX: sourceX, sourceY: sourceY, targetX: targetX, targetY: targetY, sourcePosition: sourcePosition, targetPosition: targetPosition, sourceHandleId: sourceHandleId, targetHandleId: targetHandleId, markerStart: markerStartUrl, markerEnd: markerEndUrl, pathOptions: pathOptions, interactionWidth: interactionWidth })),\n            isUpdatable && (React.createElement(React.Fragment, null,\n                (isUpdatable === 'source' || isUpdatable === true) && (React.createElement(EdgeAnchor, { position: sourcePosition, centerX: sourceX, centerY: sourceY, radius: edgeUpdaterRadius, onMouseDown: onEdgeUpdaterSourceMouseDown, onMouseEnter: onEdgeUpdaterMouseEnter, onMouseOut: onEdgeUpdaterMouseOut, type: \"source\" })),\n                (isUpdatable === 'target' || isUpdatable === true) && (React.createElement(EdgeAnchor, { position: targetPosition, centerX: targetX, centerY: targetY, radius: edgeUpdaterRadius, onMouseDown: onEdgeUpdaterTargetMouseDown, onMouseEnter: onEdgeUpdaterMouseEnter, onMouseOut: onEdgeUpdaterMouseOut, type: \"target\" }))))));\n    };\n    EdgeWrapper.displayName = 'EdgeWrapper';\n    return memo(EdgeWrapper);\n};\n\nfunction createEdgeTypes(edgeTypes) {\n    const standardTypes = {\n        default: wrapEdge((edgeTypes.default || BezierEdge)),\n        straight: wrapEdge((edgeTypes.bezier || StraightEdge)),\n        step: wrapEdge((edgeTypes.step || StepEdge)),\n        smoothstep: wrapEdge((edgeTypes.step || SmoothStepEdge)),\n        simplebezier: wrapEdge((edgeTypes.simplebezier || SimpleBezierEdge)),\n    };\n    const wrappedTypes = {};\n    const specialTypes = Object.keys(edgeTypes)\n        .filter((k) => !['default', 'bezier'].includes(k))\n        .reduce((res, key) => {\n        res[key] = wrapEdge((edgeTypes[key] || BezierEdge));\n        return res;\n    }, wrappedTypes);\n    return {\n        ...standardTypes,\n        ...specialTypes,\n    };\n}\nfunction getHandlePosition(position, nodeRect, handle = null) {\n    const x = (handle?.x || 0) + nodeRect.x;\n    const y = (handle?.y || 0) + nodeRect.y;\n    const width = handle?.width || nodeRect.width;\n    const height = handle?.height || nodeRect.height;\n    switch (position) {\n        case Position.Top:\n            return {\n                x: x + width / 2,\n                y,\n            };\n        case Position.Right:\n            return {\n                x: x + width,\n                y: y + height / 2,\n            };\n        case Position.Bottom:\n            return {\n                x: x + width / 2,\n                y: y + height,\n            };\n        case Position.Left:\n            return {\n                x,\n                y: y + height / 2,\n            };\n    }\n}\nfunction getHandle(bounds, handleId) {\n    if (!bounds) {\n        return null;\n    }\n    if (bounds.length === 1 || !handleId) {\n        return bounds[0];\n    }\n    else if (handleId) {\n        return bounds.find((d) => d.id === handleId) || null;\n    }\n    return null;\n}\nconst getEdgePositions = (sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition) => {\n    const sourceHandlePos = getHandlePosition(sourcePosition, sourceNodeRect, sourceHandle);\n    const targetHandlePos = getHandlePosition(targetPosition, targetNodeRect, targetHandle);\n    return {\n        sourceX: sourceHandlePos.x,\n        sourceY: sourceHandlePos.y,\n        targetX: targetHandlePos.x,\n        targetY: targetHandlePos.y,\n    };\n};\nfunction isEdgeVisible({ sourcePos, targetPos, sourceWidth, sourceHeight, targetWidth, targetHeight, width, height, transform, }) {\n    const edgeBox = {\n        x: Math.min(sourcePos.x, targetPos.x),\n        y: Math.min(sourcePos.y, targetPos.y),\n        x2: Math.max(sourcePos.x + sourceWidth, targetPos.x + targetWidth),\n        y2: Math.max(sourcePos.y + sourceHeight, targetPos.y + targetHeight),\n    };\n    if (edgeBox.x === edgeBox.x2) {\n        edgeBox.x2 += 1;\n    }\n    if (edgeBox.y === edgeBox.y2) {\n        edgeBox.y2 += 1;\n    }\n    const viewBox = rectToBox({\n        x: (0 - transform[0]) / transform[2],\n        y: (0 - transform[1]) / transform[2],\n        width: width / transform[2],\n        height: height / transform[2],\n    });\n    const xOverlap = Math.max(0, Math.min(viewBox.x2, edgeBox.x2) - Math.max(viewBox.x, edgeBox.x));\n    const yOverlap = Math.max(0, Math.min(viewBox.y2, edgeBox.y2) - Math.max(viewBox.y, edgeBox.y));\n    const overlappingArea = Math.ceil(xOverlap * yOverlap);\n    return overlappingArea > 0;\n}\nfunction getNodeData(node) {\n    const handleBounds = node?.[internalsSymbol]?.handleBounds || null;\n    const isValid = handleBounds &&\n        node?.width &&\n        node?.height &&\n        typeof node?.positionAbsolute?.x !== 'undefined' &&\n        typeof node?.positionAbsolute?.y !== 'undefined';\n    return [\n        {\n            x: node?.positionAbsolute?.x || 0,\n            y: node?.positionAbsolute?.y || 0,\n            width: node?.width || 0,\n            height: node?.height || 0,\n        },\n        handleBounds,\n        !!isValid,\n    ];\n}\n\nconst defaultEdgeTree = [{ level: 0, isMaxLevel: true, edges: [] }];\nfunction groupEdgesByZLevel(edges, nodeInternals, elevateEdgesOnSelect = false) {\n    let maxLevel = -1;\n    const levelLookup = edges.reduce((tree, edge) => {\n        const hasZIndex = isNumeric(edge.zIndex);\n        let z = hasZIndex ? edge.zIndex : 0;\n        if (elevateEdgesOnSelect) {\n            const targetNode = nodeInternals.get(edge.target);\n            const sourceNode = nodeInternals.get(edge.source);\n            const edgeOrConnectedNodeSelected = edge.selected || targetNode?.selected || sourceNode?.selected;\n            const selectedZIndex = Math.max(sourceNode?.[internalsSymbol]?.z || 0, targetNode?.[internalsSymbol]?.z || 0, 1000);\n            z = (hasZIndex ? edge.zIndex : 0) + (edgeOrConnectedNodeSelected ? selectedZIndex : 0);\n        }\n        if (tree[z]) {\n            tree[z].push(edge);\n        }\n        else {\n            tree[z] = [edge];\n        }\n        maxLevel = z > maxLevel ? z : maxLevel;\n        return tree;\n    }, {});\n    const edgeTree = Object.entries(levelLookup).map(([key, edges]) => {\n        const level = +key;\n        return {\n            edges,\n            level,\n            isMaxLevel: level === maxLevel,\n        };\n    });\n    if (edgeTree.length === 0) {\n        return defaultEdgeTree;\n    }\n    return edgeTree;\n}\nfunction useVisibleEdges(onlyRenderVisible, nodeInternals, elevateEdgesOnSelect) {\n    const edges = useStore(useCallback((s) => {\n        if (!onlyRenderVisible) {\n            return s.edges;\n        }\n        return s.edges.filter((e) => {\n            const sourceNode = nodeInternals.get(e.source);\n            const targetNode = nodeInternals.get(e.target);\n            return (sourceNode?.width &&\n                sourceNode?.height &&\n                targetNode?.width &&\n                targetNode?.height &&\n                isEdgeVisible({\n                    sourcePos: sourceNode.positionAbsolute || { x: 0, y: 0 },\n                    targetPos: targetNode.positionAbsolute || { x: 0, y: 0 },\n                    sourceWidth: sourceNode.width,\n                    sourceHeight: sourceNode.height,\n                    targetWidth: targetNode.width,\n                    targetHeight: targetNode.height,\n                    width: s.width,\n                    height: s.height,\n                    transform: s.transform,\n                }));\n        });\n    }, [onlyRenderVisible, nodeInternals]));\n    return groupEdgesByZLevel(edges, nodeInternals, elevateEdgesOnSelect);\n}\n\nconst ArrowSymbol = ({ color = 'none', strokeWidth = 1 }) => {\n    return (React.createElement(\"polyline\", { style: {\n            stroke: color,\n            strokeWidth,\n        }, strokeLinecap: \"round\", strokeLinejoin: \"round\", fill: \"none\", points: \"-5,-4 0,0 -5,4\" }));\n};\nconst ArrowClosedSymbol = ({ color = 'none', strokeWidth = 1 }) => {\n    return (React.createElement(\"polyline\", { style: {\n            stroke: color,\n            fill: color,\n            strokeWidth,\n        }, strokeLinecap: \"round\", strokeLinejoin: \"round\", points: \"-5,-4 0,0 -5,4 -5,-4\" }));\n};\nconst MarkerSymbols = {\n    [MarkerType.Arrow]: ArrowSymbol,\n    [MarkerType.ArrowClosed]: ArrowClosedSymbol,\n};\nfunction useMarkerSymbol(type) {\n    const store = useStoreApi();\n    const symbol = useMemo(() => {\n        const symbolExists = Object.prototype.hasOwnProperty.call(MarkerSymbols, type);\n        if (!symbolExists) {\n            store.getState().onError?.('009', errorMessages['error009'](type));\n            return null;\n        }\n        return MarkerSymbols[type];\n    }, [type]);\n    return symbol;\n}\n\nconst Marker = ({ id, type, color, width = 12.5, height = 12.5, markerUnits = 'strokeWidth', strokeWidth, orient = 'auto-start-reverse', }) => {\n    const Symbol = useMarkerSymbol(type);\n    if (!Symbol) {\n        return null;\n    }\n    return (React.createElement(\"marker\", { className: \"react-flow__arrowhead\", id: id, markerWidth: `${width}`, markerHeight: `${height}`, viewBox: \"-10 -10 20 20\", markerUnits: markerUnits, orient: orient, refX: \"0\", refY: \"0\" },\n        React.createElement(Symbol, { color: color, strokeWidth: strokeWidth })));\n};\nconst markerSelector = ({ defaultColor, rfId }) => (s) => {\n    const ids = [];\n    return s.edges\n        .reduce((markers, edge) => {\n        [edge.markerStart, edge.markerEnd].forEach((marker) => {\n            if (marker && typeof marker === 'object') {\n                const markerId = getMarkerId(marker, rfId);\n                if (!ids.includes(markerId)) {\n                    markers.push({ id: markerId, color: marker.color || defaultColor, ...marker });\n                    ids.push(markerId);\n                }\n            }\n        });\n        return markers;\n    }, [])\n        .sort((a, b) => a.id.localeCompare(b.id));\n};\n// when you have multiple flows on a page and you hide the first one, the other ones have no markers anymore\n// when they do have markers with the same ids. To prevent this the user can pass a unique id to the react flow wrapper\n// that we can then use for creating our unique marker ids\nconst MarkerDefinitions = ({ defaultColor, rfId }) => {\n    const markers = useStore(useCallback(markerSelector({ defaultColor, rfId }), [defaultColor, rfId]), \n    // the id includes all marker options, so we just need to look at that part of the marker\n    (a, b) => !(a.length !== b.length || a.some((m, i) => m.id !== b[i].id)));\n    return (React.createElement(\"defs\", null, markers.map((marker) => (React.createElement(Marker, { id: marker.id, key: marker.id, type: marker.type, color: marker.color, width: marker.width, height: marker.height, markerUnits: marker.markerUnits, strokeWidth: marker.strokeWidth, orient: marker.orient })))));\n};\nMarkerDefinitions.displayName = 'MarkerDefinitions';\nvar MarkerDefinitions$1 = memo(MarkerDefinitions);\n\nconst selector$4 = (s) => ({\n    nodesConnectable: s.nodesConnectable,\n    edgesFocusable: s.edgesFocusable,\n    edgesUpdatable: s.edgesUpdatable,\n    elementsSelectable: s.elementsSelectable,\n    width: s.width,\n    height: s.height,\n    connectionMode: s.connectionMode,\n    nodeInternals: s.nodeInternals,\n    onError: s.onError,\n});\nconst EdgeRenderer = ({ defaultMarkerColor, onlyRenderVisibleElements, elevateEdgesOnSelect, rfId, edgeTypes, noPanClassName, onEdgeUpdate, onEdgeContextMenu, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, onEdgeClick, edgeUpdaterRadius, onEdgeDoubleClick, onEdgeUpdateStart, onEdgeUpdateEnd, children, disableKeyboardA11y, }) => {\n    const { edgesFocusable, edgesUpdatable, elementsSelectable, width, height, connectionMode, nodeInternals, onError } = useStore(selector$4, shallow);\n    const edgeTree = useVisibleEdges(onlyRenderVisibleElements, nodeInternals, elevateEdgesOnSelect);\n    if (!width) {\n        return null;\n    }\n    return (React.createElement(React.Fragment, null,\n        edgeTree.map(({ level, edges, isMaxLevel }) => (React.createElement(\"svg\", { key: level, style: { zIndex: level }, width: width, height: height, className: \"react-flow__edges react-flow__container\" },\n            isMaxLevel && React.createElement(MarkerDefinitions$1, { defaultColor: defaultMarkerColor, rfId: rfId }),\n            React.createElement(\"g\", null, edges.map((edge) => {\n                const [sourceNodeRect, sourceHandleBounds, sourceIsValid] = getNodeData(nodeInternals.get(edge.source));\n                const [targetNodeRect, targetHandleBounds, targetIsValid] = getNodeData(nodeInternals.get(edge.target));\n                if (!sourceIsValid || !targetIsValid) {\n                    return null;\n                }\n                let edgeType = edge.type || 'default';\n                if (!edgeTypes[edgeType]) {\n                    onError?.('011', errorMessages['error011'](edgeType));\n                    edgeType = 'default';\n                }\n                const EdgeComponent = edgeTypes[edgeType] || edgeTypes.default;\n                // when connection type is loose we can define all handles as sources and connect source -> source\n                const targetNodeHandles = connectionMode === ConnectionMode.Strict\n                    ? targetHandleBounds.target\n                    : (targetHandleBounds.target ?? []).concat(targetHandleBounds.source ?? []);\n                const sourceHandle = getHandle(sourceHandleBounds.source, edge.sourceHandle);\n                const targetHandle = getHandle(targetNodeHandles, edge.targetHandle);\n                const sourcePosition = sourceHandle?.position || Position.Bottom;\n                const targetPosition = targetHandle?.position || Position.Top;\n                const isFocusable = !!(edge.focusable || (edgesFocusable && typeof edge.focusable === 'undefined'));\n                const isUpdatable = typeof onEdgeUpdate !== 'undefined' &&\n                    (edge.updatable || (edgesUpdatable && typeof edge.updatable === 'undefined'));\n                if (!sourceHandle || !targetHandle) {\n                    onError?.('008', errorMessages['error008'](sourceHandle, edge));\n                    return null;\n                }\n                const { sourceX, sourceY, targetX, targetY } = getEdgePositions(sourceNodeRect, sourceHandle, sourcePosition, targetNodeRect, targetHandle, targetPosition);\n                return (React.createElement(EdgeComponent, { key: edge.id, id: edge.id, className: cc([edge.className, noPanClassName]), type: edgeType, data: edge.data, selected: !!edge.selected, animated: !!edge.animated, hidden: !!edge.hidden, label: edge.label, labelStyle: edge.labelStyle, labelShowBg: edge.labelShowBg, labelBgStyle: edge.labelBgStyle, labelBgPadding: edge.labelBgPadding, labelBgBorderRadius: edge.labelBgBorderRadius, style: edge.style, source: edge.source, target: edge.target, sourceHandleId: edge.sourceHandle, targetHandleId: edge.targetHandle, markerEnd: edge.markerEnd, markerStart: edge.markerStart, sourceX: sourceX, sourceY: sourceY, targetX: targetX, targetY: targetY, sourcePosition: sourcePosition, targetPosition: targetPosition, elementsSelectable: elementsSelectable, onEdgeUpdate: onEdgeUpdate, onContextMenu: onEdgeContextMenu, onMouseEnter: onEdgeMouseEnter, onMouseMove: onEdgeMouseMove, onMouseLeave: onEdgeMouseLeave, onClick: onEdgeClick, edgeUpdaterRadius: edgeUpdaterRadius, onEdgeDoubleClick: onEdgeDoubleClick, onEdgeUpdateStart: onEdgeUpdateStart, onEdgeUpdateEnd: onEdgeUpdateEnd, rfId: rfId, ariaLabel: edge.ariaLabel, isFocusable: isFocusable, isUpdatable: isUpdatable, pathOptions: 'pathOptions' in edge ? edge.pathOptions : undefined, interactionWidth: edge.interactionWidth, disableKeyboardA11y: disableKeyboardA11y }));\n            }))))),\n        children));\n};\nEdgeRenderer.displayName = 'EdgeRenderer';\nvar EdgeRenderer$1 = memo(EdgeRenderer);\n\nconst selector$3 = (s) => `translate(${s.transform[0]}px,${s.transform[1]}px) scale(${s.transform[2]})`;\nfunction Viewport({ children }) {\n    const transform = useStore(selector$3);\n    return (React.createElement(\"div\", { className: \"react-flow__viewport react-flow__container\", style: { transform } }, children));\n}\n\nfunction useOnInitHandler(onInit) {\n    const rfInstance = useReactFlow();\n    const isInitialized = useRef(false);\n    useEffect(() => {\n        if (!isInitialized.current && rfInstance.viewportInitialized && onInit) {\n            setTimeout(() => onInit(rfInstance), 1);\n            isInitialized.current = true;\n        }\n    }, [onInit, rfInstance.viewportInitialized]);\n}\n\nconst oppositePosition = {\n    [Position.Left]: Position.Right,\n    [Position.Right]: Position.Left,\n    [Position.Top]: Position.Bottom,\n    [Position.Bottom]: Position.Top,\n};\nconst ConnectionLine = ({ nodeId, handleType, style, type = ConnectionLineType.Bezier, CustomComponent, connectionStatus, }) => {\n    const { fromNode, handleId, toX, toY, connectionMode } = useStore(useCallback((s) => ({\n        fromNode: s.nodeInternals.get(nodeId),\n        handleId: s.connectionHandleId,\n        toX: (s.connectionPosition.x - s.transform[0]) / s.transform[2],\n        toY: (s.connectionPosition.y - s.transform[1]) / s.transform[2],\n        connectionMode: s.connectionMode,\n    }), [nodeId]), shallow);\n    const fromHandleBounds = fromNode?.[internalsSymbol]?.handleBounds;\n    let handleBounds = fromHandleBounds?.[handleType];\n    if (connectionMode === ConnectionMode.Loose) {\n        handleBounds = handleBounds ? handleBounds : fromHandleBounds?.[handleType === 'source' ? 'target' : 'source'];\n    }\n    if (!fromNode || !handleBounds) {\n        return null;\n    }\n    const fromHandle = handleId ? handleBounds.find((d) => d.id === handleId) : handleBounds[0];\n    const fromHandleX = fromHandle ? fromHandle.x + fromHandle.width / 2 : (fromNode.width ?? 0) / 2;\n    const fromHandleY = fromHandle ? fromHandle.y + fromHandle.height / 2 : fromNode.height ?? 0;\n    const fromX = (fromNode.positionAbsolute?.x ?? 0) + fromHandleX;\n    const fromY = (fromNode.positionAbsolute?.y ?? 0) + fromHandleY;\n    const fromPosition = fromHandle?.position;\n    const toPosition = fromPosition ? oppositePosition[fromPosition] : null;\n    if (!fromPosition || !toPosition) {\n        return null;\n    }\n    if (CustomComponent) {\n        return (React.createElement(CustomComponent, { connectionLineType: type, connectionLineStyle: style, fromNode: fromNode, fromHandle: fromHandle, fromX: fromX, fromY: fromY, toX: toX, toY: toY, fromPosition: fromPosition, toPosition: toPosition, connectionStatus: connectionStatus }));\n    }\n    let dAttr = '';\n    const pathParams = {\n        sourceX: fromX,\n        sourceY: fromY,\n        sourcePosition: fromPosition,\n        targetX: toX,\n        targetY: toY,\n        targetPosition: toPosition,\n    };\n    if (type === ConnectionLineType.Bezier) {\n        // we assume the destination position is opposite to the source position\n        [dAttr] = getBezierPath(pathParams);\n    }\n    else if (type === ConnectionLineType.Step) {\n        [dAttr] = getSmoothStepPath({\n            ...pathParams,\n            borderRadius: 0,\n        });\n    }\n    else if (type === ConnectionLineType.SmoothStep) {\n        [dAttr] = getSmoothStepPath(pathParams);\n    }\n    else if (type === ConnectionLineType.SimpleBezier) {\n        [dAttr] = getSimpleBezierPath(pathParams);\n    }\n    else {\n        dAttr = `M${fromX},${fromY} ${toX},${toY}`;\n    }\n    return React.createElement(\"path\", { d: dAttr, fill: \"none\", className: \"react-flow__connection-path\", style: style });\n};\nConnectionLine.displayName = 'ConnectionLine';\nconst selector$2 = (s) => ({\n    nodeId: s.connectionNodeId,\n    handleType: s.connectionHandleType,\n    nodesConnectable: s.nodesConnectable,\n    connectionStatus: s.connectionStatus,\n    width: s.width,\n    height: s.height,\n});\nfunction ConnectionLineWrapper({ containerStyle, style, type, component }) {\n    const { nodeId, handleType, nodesConnectable, width, height, connectionStatus } = useStore(selector$2, shallow);\n    const isValid = !!(nodeId && handleType && width && nodesConnectable);\n    if (!isValid) {\n        return null;\n    }\n    return (React.createElement(\"svg\", { style: containerStyle, width: width, height: height, className: \"react-flow__edges react-flow__connectionline react-flow__container\" },\n        React.createElement(\"g\", { className: cc(['react-flow__connection', connectionStatus]) },\n            React.createElement(ConnectionLine, { nodeId: nodeId, handleType: handleType, style: style, type: type, CustomComponent: component, connectionStatus: connectionStatus }))));\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction useNodeOrEdgeTypes(nodeOrEdgeTypes, createTypes) {\n    const typesKeysRef = useRef(null);\n    const store = useStoreApi();\n    const typesParsed = useMemo(() => {\n        if (process.env.NODE_ENV === 'development') {\n            const typeKeys = Object.keys(nodeOrEdgeTypes);\n            if (shallow(typesKeysRef.current, typeKeys)) {\n                store.getState().onError?.('002', errorMessages['error002']());\n            }\n            typesKeysRef.current = typeKeys;\n        }\n        return createTypes(nodeOrEdgeTypes);\n    }, [nodeOrEdgeTypes]);\n    return typesParsed;\n}\n\nconst GraphView = ({ nodeTypes, edgeTypes, onMove, onMoveStart, onMoveEnd, onInit, onNodeClick, onEdgeClick, onNodeDoubleClick, onEdgeDoubleClick, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onSelectionContextMenu, onSelectionStart, onSelectionEnd, connectionLineType, connectionLineStyle, connectionLineComponent, connectionLineContainerStyle, selectionKeyCode, selectionOnDrag, selectionMode, multiSelectionKeyCode, panActivationKeyCode, zoomActivationKeyCode, deleteKeyCode, onlyRenderVisibleElements, elementsSelectable, selectNodesOnDrag, defaultViewport, translateExtent, minZoom, maxZoom, preventScrolling, defaultMarkerColor, zoomOnScroll, zoomOnPinch, panOnScroll, panOnScrollSpeed, panOnScrollMode, zoomOnDoubleClick, panOnDrag, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneScroll, onPaneContextMenu, onEdgeUpdate, onEdgeContextMenu, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, edgeUpdaterRadius, onEdgeUpdateStart, onEdgeUpdateEnd, noDragClassName, noWheelClassName, noPanClassName, elevateEdgesOnSelect, disableKeyboardA11y, nodeOrigin, nodeExtent, rfId, }) => {\n    const nodeTypesWrapped = useNodeOrEdgeTypes(nodeTypes, createNodeTypes);\n    const edgeTypesWrapped = useNodeOrEdgeTypes(edgeTypes, createEdgeTypes);\n    useOnInitHandler(onInit);\n    return (React.createElement(FlowRenderer$1, { onPaneClick: onPaneClick, onPaneMouseEnter: onPaneMouseEnter, onPaneMouseMove: onPaneMouseMove, onPaneMouseLeave: onPaneMouseLeave, onPaneContextMenu: onPaneContextMenu, onPaneScroll: onPaneScroll, deleteKeyCode: deleteKeyCode, selectionKeyCode: selectionKeyCode, selectionOnDrag: selectionOnDrag, selectionMode: selectionMode, onSelectionStart: onSelectionStart, onSelectionEnd: onSelectionEnd, multiSelectionKeyCode: multiSelectionKeyCode, panActivationKeyCode: panActivationKeyCode, zoomActivationKeyCode: zoomActivationKeyCode, elementsSelectable: elementsSelectable, onMove: onMove, onMoveStart: onMoveStart, onMoveEnd: onMoveEnd, zoomOnScroll: zoomOnScroll, zoomOnPinch: zoomOnPinch, zoomOnDoubleClick: zoomOnDoubleClick, panOnScroll: panOnScroll, panOnScrollSpeed: panOnScrollSpeed, panOnScrollMode: panOnScrollMode, panOnDrag: panOnDrag, defaultViewport: defaultViewport, translateExtent: translateExtent, minZoom: minZoom, maxZoom: maxZoom, onSelectionContextMenu: onSelectionContextMenu, preventScrolling: preventScrolling, noDragClassName: noDragClassName, noWheelClassName: noWheelClassName, noPanClassName: noPanClassName, disableKeyboardA11y: disableKeyboardA11y },\n        React.createElement(Viewport, null,\n            React.createElement(EdgeRenderer$1, { edgeTypes: edgeTypesWrapped, onEdgeClick: onEdgeClick, onEdgeDoubleClick: onEdgeDoubleClick, onEdgeUpdate: onEdgeUpdate, onlyRenderVisibleElements: onlyRenderVisibleElements, onEdgeContextMenu: onEdgeContextMenu, onEdgeMouseEnter: onEdgeMouseEnter, onEdgeMouseMove: onEdgeMouseMove, onEdgeMouseLeave: onEdgeMouseLeave, onEdgeUpdateStart: onEdgeUpdateStart, onEdgeUpdateEnd: onEdgeUpdateEnd, edgeUpdaterRadius: edgeUpdaterRadius, defaultMarkerColor: defaultMarkerColor, noPanClassName: noPanClassName, elevateEdgesOnSelect: !!elevateEdgesOnSelect, disableKeyboardA11y: disableKeyboardA11y, rfId: rfId },\n                React.createElement(ConnectionLineWrapper, { style: connectionLineStyle, type: connectionLineType, component: connectionLineComponent, containerStyle: connectionLineContainerStyle })),\n            React.createElement(\"div\", { className: \"react-flow__edgelabel-renderer\" }),\n            React.createElement(NodeRenderer$1, { nodeTypes: nodeTypesWrapped, onNodeClick: onNodeClick, onNodeDoubleClick: onNodeDoubleClick, onNodeMouseEnter: onNodeMouseEnter, onNodeMouseMove: onNodeMouseMove, onNodeMouseLeave: onNodeMouseLeave, onNodeContextMenu: onNodeContextMenu, selectNodesOnDrag: selectNodesOnDrag, onlyRenderVisibleElements: onlyRenderVisibleElements, noPanClassName: noPanClassName, noDragClassName: noDragClassName, disableKeyboardA11y: disableKeyboardA11y, nodeOrigin: nodeOrigin, nodeExtent: nodeExtent, rfId: rfId }))));\n};\nGraphView.displayName = 'GraphView';\nvar GraphView$1 = memo(GraphView);\n\nconst infiniteExtent = [\n    [Number.NEGATIVE_INFINITY, Number.NEGATIVE_INFINITY],\n    [Number.POSITIVE_INFINITY, Number.POSITIVE_INFINITY],\n];\nconst initialState = {\n    rfId: '1',\n    width: 0,\n    height: 0,\n    transform: [0, 0, 1],\n    nodeInternals: new Map(),\n    edges: [],\n    onNodesChange: null,\n    onEdgesChange: null,\n    hasDefaultNodes: false,\n    hasDefaultEdges: false,\n    d3Zoom: null,\n    d3Selection: null,\n    d3ZoomHandler: undefined,\n    minZoom: 0.5,\n    maxZoom: 2,\n    translateExtent: infiniteExtent,\n    nodeExtent: infiniteExtent,\n    nodesSelectionActive: false,\n    userSelectionActive: false,\n    userSelectionRect: null,\n    connectionNodeId: null,\n    connectionHandleId: null,\n    connectionHandleType: 'source',\n    connectionPosition: { x: 0, y: 0 },\n    connectionStatus: null,\n    connectionMode: ConnectionMode.Strict,\n    domNode: null,\n    paneDragging: false,\n    noPanClassName: 'nopan',\n    nodeOrigin: [0, 0],\n    nodeDragThreshold: 0,\n    snapGrid: [15, 15],\n    snapToGrid: false,\n    nodesDraggable: true,\n    nodesConnectable: true,\n    nodesFocusable: true,\n    edgesFocusable: true,\n    edgesUpdatable: true,\n    elementsSelectable: true,\n    elevateNodesOnSelect: true,\n    fitViewOnInit: false,\n    fitViewOnInitDone: false,\n    fitViewOnInitOptions: undefined,\n    onSelectionChange: [],\n    multiSelectionActive: false,\n    connectionStartHandle: null,\n    connectionEndHandle: null,\n    connectionClickStartHandle: null,\n    connectOnClick: true,\n    ariaLiveMessage: '',\n    autoPanOnConnect: true,\n    autoPanOnNodeDrag: true,\n    connectionRadius: 20,\n    onError: devWarn,\n    isValidConnection: undefined,\n};\n\nconst createRFStore = () => createWithEqualityFn((set, get) => ({\n    ...initialState,\n    setNodes: (nodes) => {\n        const { nodeInternals, nodeOrigin, elevateNodesOnSelect } = get();\n        set({ nodeInternals: createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect) });\n    },\n    getNodes: () => {\n        return Array.from(get().nodeInternals.values());\n    },\n    setEdges: (edges) => {\n        const { defaultEdgeOptions = {} } = get();\n        set({ edges: edges.map((e) => ({ ...defaultEdgeOptions, ...e })) });\n    },\n    setDefaultNodesAndEdges: (nodes, edges) => {\n        const hasDefaultNodes = typeof nodes !== 'undefined';\n        const hasDefaultEdges = typeof edges !== 'undefined';\n        const nodeInternals = hasDefaultNodes\n            ? createNodeInternals(nodes, new Map(), get().nodeOrigin, get().elevateNodesOnSelect)\n            : new Map();\n        const nextEdges = hasDefaultEdges ? edges : [];\n        set({ nodeInternals, edges: nextEdges, hasDefaultNodes, hasDefaultEdges });\n    },\n    updateNodeDimensions: (updates) => {\n        const { onNodesChange, nodeInternals, fitViewOnInit, fitViewOnInitDone, fitViewOnInitOptions, domNode, nodeOrigin, } = get();\n        const viewportNode = domNode?.querySelector('.react-flow__viewport');\n        if (!viewportNode) {\n            return;\n        }\n        const style = window.getComputedStyle(viewportNode);\n        const { m22: zoom } = new window.DOMMatrixReadOnly(style.transform);\n        const changes = updates.reduce((res, update) => {\n            const node = nodeInternals.get(update.id);\n            if (node?.hidden) {\n                nodeInternals.set(node.id, {\n                    ...node,\n                    [internalsSymbol]: {\n                        ...node[internalsSymbol],\n                        // we need to reset the handle bounds when the node is hidden\n                        // in order to force a new observation when the node is shown again\n                        handleBounds: undefined,\n                    },\n                });\n            }\n            else if (node) {\n                const dimensions = getDimensions(update.nodeElement);\n                const doUpdate = !!(dimensions.width &&\n                    dimensions.height &&\n                    (node.width !== dimensions.width || node.height !== dimensions.height || update.forceUpdate));\n                if (doUpdate) {\n                    nodeInternals.set(node.id, {\n                        ...node,\n                        [internalsSymbol]: {\n                            ...node[internalsSymbol],\n                            handleBounds: {\n                                source: getHandleBounds('.source', update.nodeElement, zoom, nodeOrigin),\n                                target: getHandleBounds('.target', update.nodeElement, zoom, nodeOrigin),\n                            },\n                        },\n                        ...dimensions,\n                    });\n                    res.push({\n                        id: node.id,\n                        type: 'dimensions',\n                        dimensions,\n                    });\n                }\n            }\n            return res;\n        }, []);\n        updateAbsoluteNodePositions(nodeInternals, nodeOrigin);\n        const nextFitViewOnInitDone = fitViewOnInitDone ||\n            (fitViewOnInit && !fitViewOnInitDone && fitView(get, { initial: true, ...fitViewOnInitOptions }));\n        set({ nodeInternals: new Map(nodeInternals), fitViewOnInitDone: nextFitViewOnInitDone });\n        if (changes?.length > 0) {\n            onNodesChange?.(changes);\n        }\n    },\n    updateNodePositions: (nodeDragItems, positionChanged = true, dragging = false) => {\n        const { triggerNodeChanges } = get();\n        const changes = nodeDragItems.map((node) => {\n            const change = {\n                id: node.id,\n                type: 'position',\n                dragging,\n            };\n            if (positionChanged) {\n                change.positionAbsolute = node.positionAbsolute;\n                change.position = node.position;\n            }\n            return change;\n        });\n        triggerNodeChanges(changes);\n    },\n    triggerNodeChanges: (changes) => {\n        const { onNodesChange, nodeInternals, hasDefaultNodes, nodeOrigin, getNodes, elevateNodesOnSelect } = get();\n        if (changes?.length) {\n            if (hasDefaultNodes) {\n                const nodes = applyNodeChanges(changes, getNodes());\n                const nextNodeInternals = createNodeInternals(nodes, nodeInternals, nodeOrigin, elevateNodesOnSelect);\n                set({ nodeInternals: nextNodeInternals });\n            }\n            onNodesChange?.(changes);\n        }\n    },\n    addSelectedNodes: (selectedNodeIds) => {\n        const { multiSelectionActive, edges, getNodes } = get();\n        let changedNodes;\n        let changedEdges = null;\n        if (multiSelectionActive) {\n            changedNodes = selectedNodeIds.map((nodeId) => createSelectionChange(nodeId, true));\n        }\n        else {\n            changedNodes = getSelectionChanges(getNodes(), selectedNodeIds);\n            changedEdges = getSelectionChanges(edges, []);\n        }\n        updateNodesAndEdgesSelections({\n            changedNodes,\n            changedEdges,\n            get,\n            set,\n        });\n    },\n    addSelectedEdges: (selectedEdgeIds) => {\n        const { multiSelectionActive, edges, getNodes } = get();\n        let changedEdges;\n        let changedNodes = null;\n        if (multiSelectionActive) {\n            changedEdges = selectedEdgeIds.map((edgeId) => createSelectionChange(edgeId, true));\n        }\n        else {\n            changedEdges = getSelectionChanges(edges, selectedEdgeIds);\n            changedNodes = getSelectionChanges(getNodes(), []);\n        }\n        updateNodesAndEdgesSelections({\n            changedNodes,\n            changedEdges,\n            get,\n            set,\n        });\n    },\n    unselectNodesAndEdges: ({ nodes, edges } = {}) => {\n        const { edges: storeEdges, getNodes } = get();\n        const nodesToUnselect = nodes ? nodes : getNodes();\n        const edgesToUnselect = edges ? edges : storeEdges;\n        const changedNodes = nodesToUnselect.map((n) => {\n            n.selected = false;\n            return createSelectionChange(n.id, false);\n        });\n        const changedEdges = edgesToUnselect.map((edge) => createSelectionChange(edge.id, false));\n        updateNodesAndEdgesSelections({\n            changedNodes,\n            changedEdges,\n            get,\n            set,\n        });\n    },\n    setMinZoom: (minZoom) => {\n        const { d3Zoom, maxZoom } = get();\n        d3Zoom?.scaleExtent([minZoom, maxZoom]);\n        set({ minZoom });\n    },\n    setMaxZoom: (maxZoom) => {\n        const { d3Zoom, minZoom } = get();\n        d3Zoom?.scaleExtent([minZoom, maxZoom]);\n        set({ maxZoom });\n    },\n    setTranslateExtent: (translateExtent) => {\n        get().d3Zoom?.translateExtent(translateExtent);\n        set({ translateExtent });\n    },\n    resetSelectedElements: () => {\n        const { edges, getNodes } = get();\n        const nodes = getNodes();\n        const nodesToUnselect = nodes\n            .filter((e) => e.selected)\n            .map((n) => createSelectionChange(n.id, false));\n        const edgesToUnselect = edges\n            .filter((e) => e.selected)\n            .map((e) => createSelectionChange(e.id, false));\n        updateNodesAndEdgesSelections({\n            changedNodes: nodesToUnselect,\n            changedEdges: edgesToUnselect,\n            get,\n            set,\n        });\n    },\n    setNodeExtent: (nodeExtent) => {\n        const { nodeInternals } = get();\n        nodeInternals.forEach((node) => {\n            node.positionAbsolute = clampPosition(node.position, nodeExtent);\n        });\n        set({\n            nodeExtent,\n            nodeInternals: new Map(nodeInternals),\n        });\n    },\n    panBy: (delta) => {\n        const { transform, width, height, d3Zoom, d3Selection, translateExtent } = get();\n        if (!d3Zoom || !d3Selection || (!delta.x && !delta.y)) {\n            return false;\n        }\n        const nextTransform = zoomIdentity\n            .translate(transform[0] + delta.x, transform[1] + delta.y)\n            .scale(transform[2]);\n        const extent = [\n            [0, 0],\n            [width, height],\n        ];\n        const constrainedTransform = d3Zoom?.constrain()(nextTransform, extent, translateExtent);\n        d3Zoom.transform(d3Selection, constrainedTransform);\n        const transformChanged = transform[0] !== constrainedTransform.x ||\n            transform[1] !== constrainedTransform.y ||\n            transform[2] !== constrainedTransform.k;\n        return transformChanged;\n    },\n    cancelConnection: () => set({\n        connectionNodeId: initialState.connectionNodeId,\n        connectionHandleId: initialState.connectionHandleId,\n        connectionHandleType: initialState.connectionHandleType,\n        connectionStatus: initialState.connectionStatus,\n        connectionStartHandle: initialState.connectionStartHandle,\n        connectionEndHandle: initialState.connectionEndHandle,\n    }),\n    reset: () => set({ ...initialState }),\n}), Object.is);\n\nconst ReactFlowProvider = ({ children }) => {\n    const storeRef = useRef(null);\n    if (!storeRef.current) {\n        storeRef.current = createRFStore();\n    }\n    return React.createElement(Provider$1, { value: storeRef.current }, children);\n};\nReactFlowProvider.displayName = 'ReactFlowProvider';\n\nconst Wrapper = ({ children }) => {\n    const isWrapped = useContext(StoreContext);\n    if (isWrapped) {\n        // we need to wrap it with a fragment because it's not allowed for children to be a ReactNode\n        // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/18051\n        return React.createElement(React.Fragment, null, children);\n    }\n    return React.createElement(ReactFlowProvider, null, children);\n};\nWrapper.displayName = 'ReactFlowWrapper';\n\nconst defaultNodeTypes = {\n    input: InputNode$1,\n    default: DefaultNode$1,\n    output: OutputNode$1,\n    group: GroupNode,\n};\nconst defaultEdgeTypes = {\n    default: BezierEdge,\n    straight: StraightEdge,\n    step: StepEdge,\n    smoothstep: SmoothStepEdge,\n    simplebezier: SimpleBezierEdge,\n};\nconst initNodeOrigin = [0, 0];\nconst initSnapGrid = [15, 15];\nconst initDefaultViewport = { x: 0, y: 0, zoom: 1 };\nconst wrapperStyle = {\n    width: '100%',\n    height: '100%',\n    overflow: 'hidden',\n    position: 'relative',\n    zIndex: 0,\n};\nconst ReactFlow = forwardRef(({ nodes, edges, defaultNodes, defaultEdges, className, nodeTypes = defaultNodeTypes, edgeTypes = defaultEdgeTypes, onNodeClick, onEdgeClick, onInit, onMove, onMoveStart, onMoveEnd, onConnect, onConnectStart, onConnectEnd, onClickConnectStart, onClickConnectEnd, onNodeMouseEnter, onNodeMouseMove, onNodeMouseLeave, onNodeContextMenu, onNodeDoubleClick, onNodeDragStart, onNodeDrag, onNodeDragStop, onNodesDelete, onEdgesDelete, onSelectionChange, onSelectionDragStart, onSelectionDrag, onSelectionDragStop, onSelectionContextMenu, onSelectionStart, onSelectionEnd, connectionMode = ConnectionMode.Strict, connectionLineType = ConnectionLineType.Bezier, connectionLineStyle, connectionLineComponent, connectionLineContainerStyle, deleteKeyCode = 'Backspace', selectionKeyCode = 'Shift', selectionOnDrag = false, selectionMode = SelectionMode.Full, panActivationKeyCode = 'Space', multiSelectionKeyCode = isMacOs() ? 'Meta' : 'Control', zoomActivationKeyCode = isMacOs() ? 'Meta' : 'Control', snapToGrid = false, snapGrid = initSnapGrid, onlyRenderVisibleElements = false, selectNodesOnDrag = true, nodesDraggable, nodesConnectable, nodesFocusable, nodeOrigin = initNodeOrigin, edgesFocusable, edgesUpdatable, elementsSelectable, defaultViewport = initDefaultViewport, minZoom = 0.5, maxZoom = 2, translateExtent = infiniteExtent, preventScrolling = true, nodeExtent, defaultMarkerColor = '#b1b1b7', zoomOnScroll = true, zoomOnPinch = true, panOnScroll = false, panOnScrollSpeed = 0.5, panOnScrollMode = PanOnScrollMode.Free, zoomOnDoubleClick = true, panOnDrag = true, onPaneClick, onPaneMouseEnter, onPaneMouseMove, onPaneMouseLeave, onPaneScroll, onPaneContextMenu, children, onEdgeUpdate, onEdgeContextMenu, onEdgeDoubleClick, onEdgeMouseEnter, onEdgeMouseMove, onEdgeMouseLeave, onEdgeUpdateStart, onEdgeUpdateEnd, edgeUpdaterRadius = 10, onNodesChange, onEdgesChange, noDragClassName = 'nodrag', noWheelClassName = 'nowheel', noPanClassName = 'nopan', fitView = false, fitViewOptions, connectOnClick = true, attributionPosition, proOptions, defaultEdgeOptions, elevateNodesOnSelect = true, elevateEdgesOnSelect = false, disableKeyboardA11y = false, autoPanOnConnect = true, autoPanOnNodeDrag = true, connectionRadius = 20, isValidConnection, onError, style, id, nodeDragThreshold, ...rest }, ref) => {\n    const rfId = id || '1';\n    return (React.createElement(\"div\", { ...rest, style: { ...style, ...wrapperStyle }, ref: ref, className: cc(['react-flow', className]), \"data-testid\": \"rf__wrapper\", id: id },\n        React.createElement(Wrapper, null,\n            React.createElement(GraphView$1, { onInit: onInit, onMove: onMove, onMoveStart: onMoveStart, onMoveEnd: onMoveEnd, onNodeClick: onNodeClick, onEdgeClick: onEdgeClick, onNodeMouseEnter: onNodeMouseEnter, onNodeMouseMove: onNodeMouseMove, onNodeMouseLeave: onNodeMouseLeave, onNodeContextMenu: onNodeContextMenu, onNodeDoubleClick: onNodeDoubleClick, nodeTypes: nodeTypes, edgeTypes: edgeTypes, connectionLineType: connectionLineType, connectionLineStyle: connectionLineStyle, connectionLineComponent: connectionLineComponent, connectionLineContainerStyle: connectionLineContainerStyle, selectionKeyCode: selectionKeyCode, selectionOnDrag: selectionOnDrag, selectionMode: selectionMode, deleteKeyCode: deleteKeyCode, multiSelectionKeyCode: multiSelectionKeyCode, panActivationKeyCode: panActivationKeyCode, zoomActivationKeyCode: zoomActivationKeyCode, onlyRenderVisibleElements: onlyRenderVisibleElements, selectNodesOnDrag: selectNodesOnDrag, defaultViewport: defaultViewport, translateExtent: translateExtent, minZoom: minZoom, maxZoom: maxZoom, preventScrolling: preventScrolling, zoomOnScroll: zoomOnScroll, zoomOnPinch: zoomOnPinch, zoomOnDoubleClick: zoomOnDoubleClick, panOnScroll: panOnScroll, panOnScrollSpeed: panOnScrollSpeed, panOnScrollMode: panOnScrollMode, panOnDrag: panOnDrag, onPaneClick: onPaneClick, onPaneMouseEnter: onPaneMouseEnter, onPaneMouseMove: onPaneMouseMove, onPaneMouseLeave: onPaneMouseLeave, onPaneScroll: onPaneScroll, onPaneContextMenu: onPaneContextMenu, onSelectionContextMenu: onSelectionContextMenu, onSelectionStart: onSelectionStart, onSelectionEnd: onSelectionEnd, onEdgeUpdate: onEdgeUpdate, onEdgeContextMenu: onEdgeContextMenu, onEdgeDoubleClick: onEdgeDoubleClick, onEdgeMouseEnter: onEdgeMouseEnter, onEdgeMouseMove: onEdgeMouseMove, onEdgeMouseLeave: onEdgeMouseLeave, onEdgeUpdateStart: onEdgeUpdateStart, onEdgeUpdateEnd: onEdgeUpdateEnd, edgeUpdaterRadius: edgeUpdaterRadius, defaultMarkerColor: defaultMarkerColor, noDragClassName: noDragClassName, noWheelClassName: noWheelClassName, noPanClassName: noPanClassName, elevateEdgesOnSelect: elevateEdgesOnSelect, rfId: rfId, disableKeyboardA11y: disableKeyboardA11y, nodeOrigin: nodeOrigin, nodeExtent: nodeExtent }),\n            React.createElement(StoreUpdater, { nodes: nodes, edges: edges, defaultNodes: defaultNodes, defaultEdges: defaultEdges, onConnect: onConnect, onConnectStart: onConnectStart, onConnectEnd: onConnectEnd, onClickConnectStart: onClickConnectStart, onClickConnectEnd: onClickConnectEnd, nodesDraggable: nodesDraggable, nodesConnectable: nodesConnectable, nodesFocusable: nodesFocusable, edgesFocusable: edgesFocusable, edgesUpdatable: edgesUpdatable, elementsSelectable: elementsSelectable, elevateNodesOnSelect: elevateNodesOnSelect, minZoom: minZoom, maxZoom: maxZoom, nodeExtent: nodeExtent, onNodesChange: onNodesChange, onEdgesChange: onEdgesChange, snapToGrid: snapToGrid, snapGrid: snapGrid, connectionMode: connectionMode, translateExtent: translateExtent, connectOnClick: connectOnClick, defaultEdgeOptions: defaultEdgeOptions, fitView: fitView, fitViewOptions: fitViewOptions, onNodesDelete: onNodesDelete, onEdgesDelete: onEdgesDelete, onNodeDragStart: onNodeDragStart, onNodeDrag: onNodeDrag, onNodeDragStop: onNodeDragStop, onSelectionDrag: onSelectionDrag, onSelectionDragStart: onSelectionDragStart, onSelectionDragStop: onSelectionDragStop, noPanClassName: noPanClassName, nodeOrigin: nodeOrigin, rfId: rfId, autoPanOnConnect: autoPanOnConnect, autoPanOnNodeDrag: autoPanOnNodeDrag, onError: onError, connectionRadius: connectionRadius, isValidConnection: isValidConnection, nodeDragThreshold: nodeDragThreshold }),\n            React.createElement(Wrapper$1, { onSelectionChange: onSelectionChange }),\n            children,\n            React.createElement(Attribution, { proOptions: proOptions, position: attributionPosition }),\n            React.createElement(A11yDescriptions, { rfId: rfId, disableKeyboardA11y: disableKeyboardA11y }))));\n});\nReactFlow.displayName = 'ReactFlow';\n\nconst selector$1 = (s) => s.domNode?.querySelector('.react-flow__edgelabel-renderer');\nfunction EdgeLabelRenderer({ children }) {\n    const edgeLabelRenderer = useStore(selector$1);\n    if (!edgeLabelRenderer) {\n        return null;\n    }\n    return createPortal(children, edgeLabelRenderer);\n}\n\nfunction useUpdateNodeInternals() {\n    const store = useStoreApi();\n    return useCallback((id) => {\n        const { domNode, updateNodeDimensions } = store.getState();\n        const updateIds = Array.isArray(id) ? id : [id];\n        const updates = updateIds.reduce((res, updateId) => {\n            const nodeElement = domNode?.querySelector(`.react-flow__node[data-id=\"${updateId}\"]`);\n            if (nodeElement) {\n                res.push({ id: updateId, nodeElement, forceUpdate: true });\n            }\n            return res;\n        }, []);\n        requestAnimationFrame(() => updateNodeDimensions(updates));\n    }, []);\n}\n\nconst nodesSelector = (state) => state.getNodes();\nfunction useNodes() {\n    const nodes = useStore(nodesSelector, shallow);\n    return nodes;\n}\n\nconst edgesSelector = (state) => state.edges;\nfunction useEdges() {\n    const edges = useStore(edgesSelector, shallow);\n    return edges;\n}\n\nconst viewportSelector = (state) => ({\n    x: state.transform[0],\n    y: state.transform[1],\n    zoom: state.transform[2],\n});\nfunction useViewport() {\n    const viewport = useStore(viewportSelector, shallow);\n    return viewport;\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction createUseItemsState(applyChanges) {\n    return (initialItems) => {\n        const [items, setItems] = useState(initialItems);\n        const onItemsChange = useCallback((changes) => setItems((items) => applyChanges(changes, items)), []);\n        return [items, setItems, onItemsChange];\n    };\n}\nconst useNodesState = createUseItemsState(applyNodeChanges);\nconst useEdgesState = createUseItemsState(applyEdgeChanges);\n\nfunction useOnViewportChange({ onStart, onChange, onEnd }) {\n    const store = useStoreApi();\n    useEffect(() => {\n        store.setState({ onViewportChangeStart: onStart });\n    }, [onStart]);\n    useEffect(() => {\n        store.setState({ onViewportChange: onChange });\n    }, [onChange]);\n    useEffect(() => {\n        store.setState({ onViewportChangeEnd: onEnd });\n    }, [onEnd]);\n}\n\nfunction useOnSelectionChange({ onChange }) {\n    const store = useStoreApi();\n    useEffect(() => {\n        const nextSelectionChangeHandlers = [...store.getState().onSelectionChange, onChange];\n        store.setState({ onSelectionChange: nextSelectionChangeHandlers });\n        return () => {\n            const nextHandlers = store.getState().onSelectionChange.filter((fn) => fn !== onChange);\n            store.setState({ onSelectionChange: nextHandlers });\n        };\n    }, [onChange]);\n}\n\nconst selector = (options) => (s) => {\n    if (s.nodeInternals.size === 0) {\n        return false;\n    }\n    return s\n        .getNodes()\n        .filter((n) => (options.includeHiddenNodes ? true : !n.hidden))\n        .every((n) => n[internalsSymbol]?.handleBounds !== undefined);\n};\nconst defaultOptions = {\n    includeHiddenNodes: false,\n};\nfunction useNodesInitialized(options = defaultOptions) {\n    const initialized = useStore(selector(options));\n    return initialized;\n}\n\nexport { BaseEdge, BezierEdge, ConnectionLineType, ConnectionMode, EdgeLabelRenderer, EdgeText$1 as EdgeText, Handle$1 as Handle, MarkerType, PanOnScrollMode, Panel, Position, ReactFlow, ReactFlowProvider, SelectionMode, SimpleBezierEdge, SmoothStepEdge, StepEdge, StraightEdge, addEdge, applyEdgeChanges, applyNodeChanges, boxToRect, clamp, getBezierPath, getBoundsOfRects, getConnectedEdges, getIncomers, getMarkerEnd, getNodePositionWithOrigin, getNodesBounds, getOutgoers, getRectOfNodes, getSimpleBezierPath, getSmoothStepPath, getStraightPath, getTransformForBounds, getViewportForBounds, handleParentExpand, internalsSymbol, isEdge, isNode, rectToBox, updateEdge, useEdges, useEdgesState, useGetPointerPosition, useKeyPress, useNodeId, useNodes, useNodesInitialized, useNodesState, useOnSelectionChange, useOnViewportChange, useReactFlow, useStore, useStoreApi, useUpdateNodeInternals, useViewport };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}