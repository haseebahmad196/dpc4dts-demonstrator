{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  var _selectedInformationF, _selectedInformationF2;\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [informationFlows, setInformationFlows] = useState([]);\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const areSiblings = (node1, node2) => {\n    return node1.parentId === node2.parentId;\n  };\n  const handleNodeClick = (event, nodeData) => {\n    var _informationFlows$fin;\n    const id = nodeData.id;\n    const node = nodes.find(n => n.id === id);\n    setSelectedNode(node);\n    const selectedInformationFlow = informationFlows === null || informationFlows === void 0 ? void 0 : (_informationFlows$fin = informationFlows.find(flow => flow.find(flowId => (flowId === null || flowId === void 0 ? void 0 : flowId.id) == nodeData.id))) === null || _informationFlows$fin === void 0 ? void 0 : _informationFlows$fin.find(infoFlow => (infoFlow === null || infoFlow === void 0 ? void 0 : infoFlow.id) == (nodeData === null || nodeData === void 0 ? void 0 : nodeData.id));\n    setSelectedInformationFlow(selectedInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(false);\n      if (!sourceNode) {\n        setSourceNode(node);\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid blue\"\n          }\n        } : n));\n      } else if (sourceNode.id !== id) {\n        if (!areSiblings(sourceNode, node)) {\n          alert(\"Information flow can only be added between sibling nodes.\");\n          return;\n        }\n        const path = findPath(sourceNode.id, node.id);\n        setEdges(eds => eds.map(edge => {\n          var _edge$style, _edge$style2, _edge$style3;\n          console.log(edge);\n          const isInPath = path.includes(edge.source) && path.includes(edge.target);\n          return {\n            ...edge,\n            animated: (edge === null || edge === void 0 ? void 0 : (_edge$style = edge.style) === null || _edge$style === void 0 ? void 0 : _edge$style.stroke) == \"green\" || isInPath ? true : false,\n            style: {\n              stroke: (edge === null || edge === void 0 ? void 0 : (_edge$style2 = edge.style) === null || _edge$style2 === void 0 ? void 0 : _edge$style2.stroke) == \"green\" ? \"green\" : isInPath ? \"green\" : \"black\"\n            },\n            markerEnd: {\n              type: (edge === null || edge === void 0 ? void 0 : (_edge$style3 = edge.style) === null || _edge$style3 === void 0 ? void 0 : _edge$style3.stroke) == \"green\" || isInPath ? MarkerType.ArrowClosed : null,\n              color: \"green\",\n              width: 20,\n              height: 20\n            }\n          };\n        }));\n        setDestinationNode(node);\n        let informationFl = [...informationFlows];\n\n        // Check if the source-destination pair already exists\n        const isDuplicate = informationFl.some(flow => flow[0].id === sourceNode.id && flow[1].id === node.id);\n\n        // Only add the flow if it doesn't already exist\n        if (!isDuplicate) {\n          informationFl.push([sourceNode, node]);\n          setInformationFlows(informationFl);\n        }\n        //information flow is added here [s]\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid green\"\n          }\n        } : n));\n        setTimeout(resetSelection, 1000);\n        // resetSelection();\n      }\n    }\n  };\n\n  // ... (rest of the code remains the same)\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"98vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-8\",\n      style: {\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-3\",\n        style: {\n          position: \"absolute\",\n          top: -88,\n          right: \"-23vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: resetSelection,\n          children: \"Add Information Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary ml-2 mt-10\",\n          onClick: exportInformationFlows,\n          children: \"Export Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importInformationFlows,\n          style: {\n            display: \"none\"\n          },\n          id: \"uploadFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"uploadFile\",\n          className: \"btn btn-secondary ml-2 mt-2\",\n          children: \"Import Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes.map(node => ({\n          ...node,\n          data: {\n            ...node.data,\n            disable: disableAdd\n          }\n        })),\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: handleNodeClick,\n        onPaneClick: () => setSelectedNode(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this), sourceNode && destinationNode == null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 mb-2 bg-secondary text-white\",\n        children: \"Select the Destination Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }, this) : \"\", resetFlow & enableInformationFlow ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 mb-2 bg-secondary text-white\",\n        children: \"Select the Source Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-4\",\n      style: {\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mr-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Holon Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nameofNode\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nameofNode\",\n              className: \"form-control\",\n              value: selectedNode.data.label,\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  label: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 213,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 211,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeDescription\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 233,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"nodeDescription\",\n              className: \"form-control\",\n              style: {\n                height: \"200px\",\n                width: \"100%\"\n              },\n              placeholder: \"An example description...\",\n              value: selectedNode.data.description || \"\",\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  description: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4 my-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"mb-3\",\n              children: \"Information Flows\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 260,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              value: informationFlows.length > 0 ? selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF = selectedInformationFlow.data) === null || _selectedInformationF === void 0 ? void 0 : _selectedInformationF.label : selectedNode.data.label,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 259,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeInfoFlows\",\n              children: \"Information Flows Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 274,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              style: {\n                height: \"100px\",\n                width: \"100%\"\n              },\n              value: informationFlows.length > 0 ? selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF2 = selectedInformationFlow.data) === null || _selectedInformationF2 === void 0 ? void 0 : _selectedInformationF2.description : selectedNode.data.description,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 273,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: enableInformationFlow && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"lead\",\n              children: \"Selected Information Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: () => showInformationFlowOnTheGraphs(),\n              children: \"Show All Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: () => showSelectedHolonFlowOnTheGraphs(),\n              children: \"Selected Holon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 17\n            }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary mx-2\",\n              onClick: resetGraphs,\n              children: \"Reset Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 310,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 15\n          }, this), !selectedFlowShow && informationFlows.map(nodePair => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 alert alert-success\",\n              style: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 330,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 329,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  gap: 20\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-success\",\n                  onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                  children: \"Show Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 336,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-danger\",\n                  onClick: () => {\n                    const nodeId1 = nodePair[0].id;\n                    const nodeId2 = nodePair[1].id;\n                    setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                    resetGraphs();\n                  },\n                  children: \"Delete Information Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 344,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 335,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 321,\n              columnNumber: 21\n            }, this);\n          }), selectedFlowShow && selectedInformationFlows.map(nodePair => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 alert alert-success\",\n              style: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 380,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 379,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  gap: 20\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-success\",\n                  onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                  children: \"Show Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 386,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-danger\",\n                  onClick: () => {\n                    const nodeId1 = nodePair[0].id;\n                    const nodeId2 = nodePair[1].id;\n                    setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                    resetGraphs();\n                  },\n                  children: \"Delete Information Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 394,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 385,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 371,\n              columnNumber: 21\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title\",\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 425,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: () => setIsModalOpen(false),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 426,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"newNodeLabel\",\n            children: \"New Node Label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 436,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"newNodeLabel\",\n            className: \"form-control\",\n            placeholder: \"New Node Label\",\n            value: newNodeLabel,\n            onChange: e => setNewNodeLabel(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: () => setIsModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 448,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: () => {\n            setNodes(nds => [...nds, {\n              id: `${nds.length + 1}`,\n              type: \"customNode\",\n              data: {\n                label: newNodeLabel\n              },\n              position: {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              }\n            }]);\n            setIsModalOpen(false);\n            setNewNodeLabel(\"\");\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"BceDYfEKdLy9oQsGhAkX/RAO24I=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","jsxDEV","_jsxDEV","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","_selectedInformationF","_selectedInformationF2","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","selectedInformationFlow","setSelectedInformationFlow","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","setDisableAdd","resetFlow","setResetFlow","informationFlows","setInformationFlows","selectedInformationFlows","setSelectedInformationFlows","selectedFlowShow","setSelectedFlowShow","onConnect","params","eds","areSiblings","node1","node2","parentId","handleNodeClick","event","nodeData","_informationFlows$fin","id","node","find","n","flow","flowId","infoFlow","nds","map","style","border","alert","path","findPath","edge","_edge$style","_edge$style2","_edge$style3","console","log","isInPath","includes","source","target","animated","stroke","markerEnd","type","ArrowClosed","color","width","height","informationFl","isDuplicate","some","push","setTimeout","resetSelection","className","display","children","position","top","right","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","exportInformationFlows","accept","onChange","importInformationFlows","htmlFor","data","disable","fitView","onNodeClick","onPaneClick","left","borderLeft","value","label","e","placeholder","description","readOnly","showInformationFlowOnTheGraphs","showSelectedHolonFlowOnTheGraphs","resetGraphs","nodePair","justifyContent","alignItems","gap","showOneFlowOnGraph","nodeId1","nodeId2","flows","filter","pair","isOpen","onRequestClose","x","Math","random","y","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd, setDisableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n\r\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\r\n\r\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n\r\n  const areSiblings = (node1, node2) => {\r\n    return node1.parentId === node2.parentId;\r\n  };\r\n\r\n  const handleNodeClick = (event, nodeData) => {\r\n    const id = nodeData.id;\r\n    const node = nodes.find((n) => n.id === id);\r\n    setSelectedNode(node);\r\n    const selectedInformationFlow = informationFlows\r\n      ?.find((flow) => flow.find((flowId) => flowId?.id == nodeData.id))\r\n      ?.find((infoFlow) => infoFlow?.id == nodeData?.id);\r\n    setSelectedInformationFlow(selectedInformationFlow);\r\n\r\n    if (enableInformationFlow) {\r\n      setResetFlow(false);\r\n      if (!sourceNode) {\r\n        setSourceNode(node);\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id ? { ...n, style: { border: \"2px solid blue\" } } : n\r\n          )\r\n        );\r\n      } else if (sourceNode.id !== id) {\r\n        if (!areSiblings(sourceNode, node)) {\r\n          alert(\"Information flow can only be added between sibling nodes.\");\r\n          return;\r\n        }\r\n\r\n        const path = findPath(sourceNode.id, node.id);\r\n        setEdges((eds) =>\r\n          eds.map((edge) => {\r\n            console.log(edge);\r\n            const isInPath =\r\n              path.includes(edge.source) && path.includes(edge.target);\r\n            return {\r\n              ...edge,\r\n              animated:\r\n                edge?.style?.stroke == \"green\" || isInPath ? true : false,\r\n              style: {\r\n                stroke:\r\n                  edge?.style?.stroke == \"green\"\r\n                    ? \"green\"\r\n                    : isInPath\r\n                    ? \"green\"\r\n                    : \"black\",\r\n              },\r\n              markerEnd: {\r\n                type:\r\n                  edge?.style?.stroke == \"green\" || isInPath\r\n                    ? MarkerType.ArrowClosed\r\n                    : null,\r\n                color: \"green\",\r\n                width: 20,\r\n                height: 20,\r\n              },\r\n            };\r\n          })\r\n        );\r\n\r\n        setDestinationNode(node);\r\n        let informationFl = [...informationFlows];\r\n\r\n        // Check if the source-destination pair already exists\r\n        const isDuplicate = informationFl.some(\r\n          (flow) => flow[0].id === sourceNode.id && flow[1].id === node.id\r\n        );\r\n\r\n        // Only add the flow if it doesn't already exist\r\n        if (!isDuplicate) {\r\n          informationFl.push([sourceNode, node]);\r\n          setInformationFlows(informationFl);\r\n        }\r\n        //information flow is added here [s]\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id\r\n              ? { ...n, style: { border: \"2px solid green\" } }\r\n              : n\r\n          )\r\n        );\r\n        setTimeout(resetSelection, 1000);\r\n        // resetSelection();\r\n      }\r\n    }\r\n  };\r\n\r\n  // ... (rest of the code remains the same)\r\n\r\n  return (\r\n    <div\r\n      className=\"container-fluid\"\r\n      style={{ display: \"flex\", height: \"100vh\", width: \"98vw\" }}\r\n    >\r\n      <div className=\"col-8\" style={{ height: \"100%\" }}>\r\n        <div\r\n          className=\"d-flex justify-content-between align-items-center mb-3\"\r\n          style={{ position: \"absolute\", top: -88, right: \"-23vw\" }}\r\n        >\r\n          <button className={\"btn btn-success\"} onClick={resetSelection}>\r\n            Add Information Flow\r\n          </button>\r\n          {informationFlows.length > 0 && (\r\n            <button\r\n              className={\"btn btn-secondary ml-2 mt-10\"}\r\n              onClick={exportInformationFlows}\r\n            >\r\n              Export Information Flows\r\n            </button>\r\n          )}\r\n\r\n          <input\r\n            type=\"file\"\r\n            accept=\".json\"\r\n            onChange={importInformationFlows}\r\n            style={{ display: \"none\" }}\r\n            id=\"uploadFile\"\r\n          />\r\n          <label htmlFor=\"uploadFile\" className=\"btn btn-secondary ml-2 mt-2\">\r\n            Import Information Flows\r\n          </label>\r\n        </div>\r\n\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes.map((node) => ({\r\n            ...node,\r\n            data: {\r\n              ...node.data,\r\n              disable: disableAdd,\r\n            },\r\n          }))}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={handleNodeClick}\r\n          onPaneClick={() => setSelectedNode(null)}\r\n        />\r\n      </div>\r\n      {sourceNode && destinationNode == null ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"p-3 mb-2 bg-secondary text-white\">\r\n            Select the Destination Node\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {resetFlow & enableInformationFlow ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"p-3 mb-2 bg-secondary text-white\">Select the Source Node</div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div\r\n        className=\"col-4\"\r\n        style={{ padding: \"10px\", borderLeft: \"1px solid #ccc\" }}\r\n      >\r\n        {selectedNode ? (\r\n          <div className=\"mr-3\">\r\n            <div className=\"border border-dark p-4\">\r\n              <h4>Holon Details</h4>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nameofNode\">Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nameofNode\"\r\n                  className=\"form-control\"\r\n                  value={selectedNode.data.label}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? {\r\n                              ...node,\r\n                              data: { ...node.data, label: e.target.value },\r\n                            }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeDescription\">Description</label>\r\n                <textarea\r\n                  id=\"nodeDescription\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"200px\", width: \"100%\" }}\r\n                  placeholder=\"An example description...\"\r\n                  value={selectedNode.data.description || \"\"}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? {\r\n                              ...node,\r\n                              data: {\r\n                                ...node.data,\r\n                                description: e.target.value,\r\n                              },\r\n                            }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"border border-dark p-4 my-2\">\r\n              <div className=\"form-group mb-3\">\r\n                <h4 className=\"mb-3\">Information Flows</h4>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.data?.label\r\n                      : selectedNode.data.label\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeInfoFlows\">\r\n                  Information Flows Description\r\n                </label>\r\n                <textarea\r\n                  type=\"text\"\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"100px\", width: \"100%\" }}\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.data?.description\r\n                      : selectedNode.data.description\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                {enableInformationFlow && (\r\n                  <p className=\"lead\">Selected Information Flow</p>\r\n                )}\r\n              </div>\r\n              <div>\r\n                <button\r\n                  className={\"btn btn-success mx-1\"}\r\n                  onClick={() => showInformationFlowOnTheGraphs()}\r\n                >\r\n                  Show All Flow\r\n                </button>\r\n                <button\r\n                  className={\"btn btn-success mx-1\"}\r\n                  onClick={() => showSelectedHolonFlowOnTheGraphs()}\r\n                >\r\n                  Selected Holon\r\n                </button>\r\n                {informationFlows.length > 0 && (\r\n                  <button\r\n                    className={\"btn btn-primary mx-2\"}\r\n                    onClick={resetGraphs}\r\n                  >\r\n                    Reset Flow\r\n                  </button>\r\n                )}\r\n              </div>\r\n              {!selectedFlowShow &&\r\n                informationFlows.map((nodePair) => {\r\n                  return (\r\n                    <div\r\n                      className=\"mt-3 alert alert-success\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <div>\r\n                        <strong>\r\n                          {nodePair[0].data.label} {\"-->\"}{\" \"}\r\n                          {nodePair[1].data.label}\r\n                        </strong>\r\n                      </div>\r\n                      <div style={{ display: \"flex\", gap: 20 }}>\r\n                        <button\r\n                          className={\"btn btn-success\"}\r\n                          onClick={() =>\r\n                            showOneFlowOnGraph(nodePair[0], nodePair[1])\r\n                          }\r\n                        >\r\n                          Show Flow\r\n                        </button>\r\n                        <button\r\n                          className={\"btn btn-danger\"}\r\n                          onClick={() => {\r\n                            const nodeId1 = nodePair[0].id;\r\n                            const nodeId2 = nodePair[1].id;\r\n                            setInformationFlows((flows) =>\r\n                              flows.filter(\r\n                                (pair) =>\r\n                                  !(\r\n                                    pair[0].id === nodeId1 &&\r\n                                    pair[1].id === nodeId2\r\n                                  )\r\n                              )\r\n                            );\r\n                            resetGraphs();\r\n                          }}\r\n                        >\r\n                          Delete Information Flow\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n\r\n              {selectedFlowShow &&\r\n                selectedInformationFlows.map((nodePair) => {\r\n                  return (\r\n                    <div\r\n                      className=\"mt-3 alert alert-success\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <div>\r\n                        <strong>\r\n                          {nodePair[0].data.label} {\"-->\"}{\" \"}\r\n                          {nodePair[1].data.label}\r\n                        </strong>\r\n                      </div>\r\n                      <div style={{ display: \"flex\", gap: 20 }}>\r\n                        <button\r\n                          className={\"btn btn-success\"}\r\n                          onClick={() =>\r\n                            showOneFlowOnGraph(nodePair[0], nodePair[1])\r\n                          }\r\n                        >\r\n                          Show Flow\r\n                        </button>\r\n                        <button\r\n                          className={\"btn btn-danger\"}\r\n                          onClick={() => {\r\n                            const nodeId1 = nodePair[0].id;\r\n                            const nodeId2 = nodePair[1].id;\r\n                            setInformationFlows((flows) =>\r\n                              flows.filter(\r\n                                (pair) =>\r\n                                  !(\r\n                                    pair[0].id === nodeId1 &&\r\n                                    pair[1].id === nodeId2\r\n                                  )\r\n                              )\r\n                            );\r\n                            resetGraphs();\r\n                          }}\r\n                        >\r\n                          Delete Information Flow\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>No Selection</div>\r\n        )}\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title\">Add Node</h5>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            <span>&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <div className=\"form-group mb-3\">\r\n            <label htmlFor=\"newNodeLabel\">New Node Label</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"newNodeLabel\"\r\n              className=\"form-control\"\r\n              placeholder=\"New Node Label\"\r\n              value={newNodeLabel}\r\n              onChange={(e) => setNewNodeLabel(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            Close\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              setNodes((nds) => [\r\n                ...nds,\r\n                {\r\n                  id: `${nds.length + 1}`,\r\n                  type: \"customNode\",\r\n                  data: { label: newNodeLabel },\r\n                  position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n                },\r\n              ]);\r\n              setIsModalOpen(false);\r\n              setNewNodeLabel(\"\");\r\n            }}\r\n          >\r\n            Add Node\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}