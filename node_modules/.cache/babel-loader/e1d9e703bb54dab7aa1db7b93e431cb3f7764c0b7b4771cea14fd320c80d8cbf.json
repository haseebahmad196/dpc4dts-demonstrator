{"ast":null,"code":"var _jsxFileName = \"C:\\\\Documents for a job\\\\Certifications\\\\Meta Frontend\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport { Tree } from 'react-d3-tree';\nimport './styles.css'; // Import the CSS file containing styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [treeData, setTreeData] = useState({\n    name: 'Information System',\n    children: [{\n      name: 'Stakeholder',\n      children: []\n    }, {\n      name: 'Infrastructure',\n      children: []\n    }]\n  });\n  const [lines, setLines] = useState([]);\n  const containerRef = useRef(null);\n  useEffect(() => {\n    if (containerRef.current) {\n      const containerRect = containerRef.current.getBoundingClientRect();\n      const updatedLines = [];\n      treeData.children.forEach(child => {\n        const childNode = containerRef.current.querySelector(`g[data-name=\"${child.name}\"]`);\n        if (childNode) {\n          const childRect = childNode.getBoundingClientRect();\n          const line = {\n            x1: containerRect.left + containerRect.width / 2,\n            y1: containerRect.top + containerRect.height,\n            x2: childRect.left + childRect.width / 2,\n            y2: childRect.top\n          };\n          updatedLines.push(line);\n        }\n      });\n      setLines(updatedLines);\n    }\n  }, [treeData]);\n  const addChild = (parentId, childName) => {\n    const newNode = {\n      name: childName,\n      children: []\n    };\n    setTreeData(prevState => {\n      const updatedTreeData = JSON.parse(JSON.stringify(prevState)); // Deep copy the state\n      const parentNode = findNode(updatedTreeData, parentId);\n      if (parentNode) {\n        parentNode.children.push(newNode);\n      }\n      return updatedTreeData;\n    });\n  };\n  const findNode = (tree, id) => {\n    if (tree.name === id) {\n      return tree;\n    }\n    if (tree.children) {\n      for (let child of tree.children) {\n        const foundNode = findNode(child, id);\n        if (foundNode) {\n          return foundNode;\n        }\n      }\n    }\n    return null;\n  };\n  const removeChild = (parentId, childName) => {\n    setTreeData(prevState => {\n      const updatedTreeData = JSON.parse(JSON.stringify(prevState)); // Deep copy the state\n      const parentNode = findNode(updatedTreeData, parentId);\n      if (parentNode) {\n        parentNode.children = parentNode.children.filter(child => child.name !== childName);\n      }\n      return updatedTreeData;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    ref: containerRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-container\",\n      children: [/*#__PURE__*/_jsxDEV(Tree, {\n        data: treeData,\n        orientation: \"vertical\",\n        translate: {\n          x: 300,\n          y: 50\n        },\n        nodeSvgShape: {\n          shape: 'circle',\n          shapeProps: {\n            r: 10,\n            fill: 'lightblue'\n          }\n        },\n        nodeLabelComponent: {\n          render: /*#__PURE__*/_jsxDEV(NodeLabel, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }, this),\n          foreignObjectWrapper: {\n            y: 24\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"svg\", {\n        className: \"line-container\",\n        children: lines.map((line, index) => /*#__PURE__*/_jsxDEV(\"line\", {\n          x1: line.x1,\n          y1: line.y1,\n          x2: line.x2,\n          y2: line.y2\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"reX6i3tvritwy/5+b6XPf5kUF78=\");\n_c = App;\nconst NodeLabel = ({\n  nodeData\n}) => /*#__PURE__*/_jsxDEV(\"text\", {\n  textAnchor: \"middle\",\n  dominantBaseline: \"central\",\n  children: nodeData.name\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 110,\n  columnNumber: 37\n}, this);\n_c2 = NodeLabel;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"NodeLabel\");","map":{"version":3,"names":["React","useState","useEffect","useRef","Tree","jsxDEV","_jsxDEV","App","_s","treeData","setTreeData","name","children","lines","setLines","containerRef","current","containerRect","getBoundingClientRect","updatedLines","forEach","child","childNode","querySelector","childRect","line","x1","left","width","y1","top","height","x2","y2","push","addChild","parentId","childName","newNode","prevState","updatedTreeData","JSON","parse","stringify","parentNode","findNode","tree","id","foundNode","removeChild","filter","className","ref","data","orientation","translate","x","y","nodeSvgShape","shape","shapeProps","r","fill","nodeLabelComponent","render","NodeLabel","fileName","_jsxFileName","lineNumber","columnNumber","foreignObjectWrapper","map","index","_c","nodeData","textAnchor","dominantBaseline","_c2","$RefreshReg$"],"sources":["C:/Documents for a job/Certifications/Meta Frontend/my-react-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport { Tree } from 'react-d3-tree';\nimport './styles.css'; // Import the CSS file containing styles\n\nconst App = () => {\n  const [treeData, setTreeData] = useState({\n    name: 'Information System',\n    children: [\n      {\n        name: 'Stakeholder',\n        children: [],\n      },\n      {\n        name: 'Infrastructure',\n        children: [],\n      },\n    ],\n  });\n\n  const [lines, setLines] = useState([]);\n\n  const containerRef = useRef(null);\n\n  useEffect(() => {\n    if (containerRef.current) {\n      const containerRect = containerRef.current.getBoundingClientRect();\n      const updatedLines = [];\n      treeData.children.forEach((child) => {\n        const childNode = containerRef.current.querySelector(`g[data-name=\"${child.name}\"]`);\n        if (childNode) {\n          const childRect = childNode.getBoundingClientRect();\n          const line = {\n            x1: containerRect.left + containerRect.width / 2,\n            y1: containerRect.top + containerRect.height,\n            x2: childRect.left + childRect.width / 2,\n            y2: childRect.top,\n          };\n          updatedLines.push(line);\n        }\n      });\n      setLines(updatedLines);\n    }\n  }, [treeData]);\n\n  const addChild = (parentId, childName) => {\n    const newNode = {\n      name: childName,\n      children: [],\n    };\n\n    setTreeData((prevState) => {\n      const updatedTreeData = JSON.parse(JSON.stringify(prevState)); // Deep copy the state\n      const parentNode = findNode(updatedTreeData, parentId);\n      if (parentNode) {\n        parentNode.children.push(newNode);\n      }\n      return updatedTreeData;\n    });\n  };\n\n  const findNode = (tree, id) => {\n    if (tree.name === id) {\n      return tree;\n    }\n    if (tree.children) {\n      for (let child of tree.children) {\n        const foundNode = findNode(child, id);\n        if (foundNode) {\n          return foundNode;\n        }\n      }\n    }\n    return null;\n  };\n\n  const removeChild = (parentId, childName) => {\n    setTreeData((prevState) => {\n      const updatedTreeData = JSON.parse(JSON.stringify(prevState)); // Deep copy the state\n      const parentNode = findNode(updatedTreeData, parentId);\n      if (parentNode) {\n        parentNode.children = parentNode.children.filter((child) => child.name !== childName);\n      }\n      return updatedTreeData;\n    });\n  };\n\n  return (\n    <div className=\"container\" ref={containerRef}>\n      <div className=\"tree-container\">\n        <Tree\n          data={treeData}\n          orientation=\"vertical\"\n          translate={{ x: 300, y: 50 }}\n          nodeSvgShape={{ shape: 'circle', shapeProps: { r: 10, fill: 'lightblue' } }}\n          nodeLabelComponent={{\n            render: <NodeLabel />,\n            foreignObjectWrapper: { y: 24 },\n          }}\n        />\n        <svg className=\"line-container\">\n          {lines.map((line, index) => (\n            <line key={index} x1={line.x1} y1={line.y1} x2={line.x2} y2={line.y2} />\n          ))}\n        </svg>\n      </div>\n    </div>\n  );\n};\n\nconst NodeLabel = ({ nodeData }) => <text textAnchor=\"middle\" dominantBaseline=\"central\">{nodeData.name}</text>;\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}