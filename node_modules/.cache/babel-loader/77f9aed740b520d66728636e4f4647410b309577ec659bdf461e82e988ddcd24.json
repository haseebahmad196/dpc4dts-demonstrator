{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  var _selectedInformationF, _selectedInformationF2;\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [connectionMode, setConnectionMode] = useState(\"any\");\n  const [informationFlows, setInformationFlows] = useState([]);\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  // useEffect(() => {\n  //   console.log(sourceNode);\n  //   informationFlows.push([sourceNode, destinationNode]);\n  //   setSourceNode(null);\n  //   console.log(informationFlows);\n  // }, [sourceNode]);\n\n  // / Export the information flows as a JSON file\n  const exportInformationFlows = () => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(informationFlows));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n\n  // Import the information flows from a JSON file\n  const importInformationFlows = event => {\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      try {\n        const importedFlows = JSON.parse(e.target.result);\n        if (Array.isArray(importedFlows)) {\n          console.log(importedFlows);\n          console.log(informationFlows);\n          debugger;\n          // Convert the imported flows into nodes and update the state\n          setInformationFlows(importedFlows.map(([sourceNode, destinationNode]) => {\n            return [nodes.find(node => node.id === sourceNode.id) || sourceNode, nodes.find(node => node.id === destinationNode.id) || destinationNode];\n          }));\n          alert(\"Information Flows loaded successfully.\");\n        } else {\n          alert(\"Invalid JSON format.\");\n        }\n      } catch (error) {\n        alert(\"Failed to load the JSON file. Please check the file format.\");\n      }\n    };\n    if (event.target.files.length > 0) {\n      fileReader.readAsText(event.target.files[0]);\n    }\n  };\n  const findPath = (sourceId, targetId) => {\n    const visited = new Set();\n    const queue = [[sourceId]];\n    while (queue.length > 0) {\n      const path = queue.shift();\n      const node = path[path.length - 1];\n      if (node === targetId) return path;\n      if (!visited.has(node)) {\n        visited.add(node);\n        edges.filter(edge => edge.source === node || edge.target === node).forEach(edge => {\n          const nextNode = edge.source === node ? edge.target : edge.source;\n          queue.push([...path, nextNode]);\n        });\n      }\n    }\n    return [];\n  };\n  const handleNodeClick = (event, nodeData) => {\n    const id = nodeData.id;\n    const node = nodes.find(n => n.id === id);\n    setSelectedNode(node);\n    if (enableInformationFlow) {\n      setResetFlow(false);\n      if (!sourceNode) {\n        setSourceNode(node);\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid blue\"\n          }\n        } : n));\n      } else if (sourceNode.id !== id) {\n        // Check level constraint if in same-level mode\n        if (connectionMode === \"same\" && sourceNode.data.level !== node.data.level) {\n          alert(\"Nodes must be on the same level!\");\n          resetSelection();\n          return;\n        }\n        const path = findPath(sourceNode.id, node.id);\n        setEdges(eds => eds.map(edge => {\n          var _edge$style, _edge$style2, _edge$style3;\n          const isInPath = path.includes(edge.source) && path.includes(edge.target);\n          return {\n            ...edge,\n            animated: (edge === null || edge === void 0 ? void 0 : (_edge$style = edge.style) === null || _edge$style === void 0 ? void 0 : _edge$style.stroke) === \"green\" || isInPath,\n            style: {\n              stroke: (edge === null || edge === void 0 ? void 0 : (_edge$style2 = edge.style) === null || _edge$style2 === void 0 ? void 0 : _edge$style2.stroke) === \"green\" || isInPath ? \"green\" : \"black\"\n            },\n            markerEnd: {\n              type: (edge === null || edge === void 0 ? void 0 : (_edge$style3 = edge.style) === null || _edge$style3 === void 0 ? void 0 : _edge$style3.stroke) === \"green\" || isInPath ? MarkerType.ArrowClosed : null,\n              color: \"green\"\n            }\n          };\n        }));\n\n        // Create new edge\n        const newEdge = {\n          id: `e${sourceNode.id}-${node.id}`,\n          source: sourceNode.id,\n          target: node.id,\n          style: {\n            stroke: \"#333\",\n            strokeWidth: 2\n          },\n          markerEnd: {\n            type: MarkerType.ArrowClosed,\n            color: \"#333\"\n          }\n        };\n        setEdges(eds => addEdge(newEdge, eds));\n        setInformationFlows(prevFlows => {\n          const isDuplicate = prevFlows.some(([src, tgt]) => src.id === sourceNode.id && tgt.id === node.id);\n          return isDuplicate ? prevFlows : [...prevFlows, [sourceNode, node]];\n        });\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid green\"\n          }\n        } : n));\n        setTimeout(resetSelection, 1000);\n      }\n    }\n  };\n  const showInformationFlowOnTheGraphs = () => {\n    // write the code to use the information flows 2d array,\n    // iterate through the information flow 2d array one by one,\n    // read the source node and destination node which will be 1 array, source node is the 0th index element and destination node is 1st index element\n    // the source node color should be blue and destination source node should be green and the edge color will be green and dash animation.\n    informationFlows.forEach(flow => {\n      const [sourceNode, destinationNode] = flow;\n      showOneFlowOnGraph(sourceNode, destinationNode);\n    });\n    setSelectedFlowShow(false);\n  };\n  const showSelectedHolonFlowOnTheGraphs = () => {\n    var _selectedNode$data;\n    // write the code to use the information flows 2d array,\n    // iterate through the information flow 2d array one by one,\n    // read the source node and destination node which will be 1 array, source node is the 0th index element and destination node is 1st index element\n    // the source node color should be blue and destination source node should be green and the edge color will be green and dash animation.\n    resetGraphs();\n    let selectedLabel = selectedNode === null || selectedNode === void 0 ? void 0 : (_selectedNode$data = selectedNode.data) === null || _selectedNode$data === void 0 ? void 0 : _selectedNode$data.label;\n    informationFlows.forEach(flow => {\n      var _flow$0$data, _flow$1$data;\n      let flowLabel0 = (_flow$0$data = flow[0].data) === null || _flow$0$data === void 0 ? void 0 : _flow$0$data.label;\n      let flowLabel1 = (_flow$1$data = flow[1].data) === null || _flow$1$data === void 0 ? void 0 : _flow$1$data.label;\n      if (flowLabel0 == selectedLabel || flowLabel1 == selectedLabel) {\n        const [sourceNode, destinationNode] = flow;\n        showOneFlowOnGraph(sourceNode, destinationNode);\n      }\n    });\n    let newInformationFlows = [];\n    informationFlows.forEach(flow => {\n      var _flow$0$data2, _flow$1$data2;\n      let flowLabel0 = (_flow$0$data2 = flow[0].data) === null || _flow$0$data2 === void 0 ? void 0 : _flow$0$data2.label;\n      let flowLabel1 = (_flow$1$data2 = flow[1].data) === null || _flow$1$data2 === void 0 ? void 0 : _flow$1$data2.label;\n      if (flowLabel0 == selectedLabel || flowLabel1 == selectedLabel) {\n        newInformationFlows.push(flow);\n      }\n    });\n    setSelectedInformationFlows(newInformationFlows);\n    setSelectedFlowShow(true);\n  };\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\n    // Reset the graph to clear any existing styles\n    // resetGraphs();\n\n    // Update the nodes to show the selected source and destination colors\n    setNodes(nds => nds.map(n => n.id === sourceNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid blue\"\n      }\n    } : n.id === destinationNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid green\"\n      }\n    } : n));\n\n    // Find the path from sourceNode to destinationNode\n    const path = findPath(sourceNode.id, destinationNode.id);\n    if (!path || path.length === 0) {\n      console.error(\"No path found between the selected nodes.\");\n      return;\n    }\n\n    // Update edges with green color, dashed animation, and correct arrow direction\n    setEdges(eds => eds.map(edge => {\n      var _edge$style4, _edge$style5;\n      const isInPath = path.includes(edge.source) && path.includes(edge.target);\n\n      // Determine if the edge is in the forward or backward direction\n      const isForwardDirection = edge.source === path[0] && edge.target === path[1];\n      const isBackwardDirection = edge.target === path[0] && edge.source === path[1];\n\n      // Ensure edge.style and markerEnd are initialized\n      return {\n        ...edge,\n        animated: isInPath ? true : edge.animated,\n        style: {\n          ...edge.style,\n          // Merge existing styles\n          stroke: isInPath ? \"green\" : (_edge$style4 = edge.style) === null || _edge$style4 === void 0 ? void 0 : _edge$style4.stroke,\n          strokeDasharray: isInPath ? \"5,5\" : (_edge$style5 = edge.style) === null || _edge$style5 === void 0 ? void 0 : _edge$style5.strokeDasharray\n        },\n        markerEnd: isInPath ? {\n          type: MarkerType.ArrowClosed,\n          color: \"green\",\n          orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\"\n        } : edge.markerEnd\n      };\n    }));\n  };\n  const resetSelection = () => {\n    setEnableInformationFlow(!enableInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(true);\n      setSourceNode(null);\n      setDestinationNode(null);\n      // setSelectedNode(null);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          border: \"none\"\n        }\n      })));\n      setEdges(eds => eds.map(edge => ({\n        ...edge,\n        animated: false,\n        style: {\n          stroke: \"black\"\n        }\n      })));\n    }\n  };\n  const resetGraphs = () => {\n    setNodes(nds => nds.map(n => ({\n      ...n,\n      style: {\n        border: \"none\"\n      }\n    })));\n    setEdges(eds => eds.map(edge => ({\n      ...edge,\n      animated: false,\n      style: {\n        stroke: \"black\"\n      }\n    })));\n    setSelectedFlowShow(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"98vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-8\",\n      style: {\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-3\",\n        style: {\n          position: \"absolute\",\n          top: -88,\n          right: \"-23vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: resetSelection,\n          children: \"Add Information Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 11\n        }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary ml-2\",\n          onClick: exportInformationFlows,\n          children: \"Export Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importInformationFlows,\n          style: {\n            display: \"none\"\n          },\n          id: \"uploadFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"uploadFile\",\n          className: \"btn btn-secondary ml-2 mt-2\",\n          children: \"Import Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes.map(node => ({\n          ...node,\n          data: {\n            ...node.data,\n            disable: disableAdd\n          }\n        })),\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: handleNodeClick,\n        onPaneClick: () => setSelectedNode(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 7\n    }, this), sourceNode && destinationNode == null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Destination Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 9\n    }, this) : \"\", resetFlow & enableInformationFlow ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Source Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-4\",\n      style: {\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mr-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Holon Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 403,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nameofNode\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 405,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nameofNode\",\n              className: \"form-control\",\n              value: selectedNode.data.label,\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  label: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 406,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 404,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeDescription\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 426,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"nodeDescription\",\n              className: \"form-control\",\n              style: {\n                height: \"200px\",\n                width: \"100%\"\n              },\n              placeholder: \"An example description...\",\n              value: selectedNode.data.description || \"\",\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  description: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 425,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4 my-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"mb-3\",\n              children: \"Information Flows\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              value: informationFlows.length > 0 ? selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF = selectedInformationFlow.data) === null || _selectedInformationF === void 0 ? void 0 : _selectedInformationF.label : selectedNode.data.label,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeInfoFlows\",\n              children: \"Information Flows Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              style: {\n                height: \"100px\",\n                width: \"100%\"\n              },\n              value: informationFlows.length > 0 ? selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF2 = selectedInformationFlow.data) === null || _selectedInformationF2 === void 0 ? void 0 : _selectedInformationF2.description : selectedNode.data.description,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: enableInformationFlow && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"lead\",\n              children: \"Selected Information Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 489,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 487,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: () => showInformationFlowOnTheGraphs(),\n              children: \"Show All Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 493,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: () => showSelectedHolonFlowOnTheGraphs(),\n              children: \"Selected Holon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 499,\n              columnNumber: 17\n            }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary mx-2\",\n              onClick: resetGraphs,\n              children: \"Reset Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 506,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 492,\n            columnNumber: 15\n          }, this), !selectedFlowShow && informationFlows.map(nodePair => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 alert alert-success\",\n              style: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 526,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 525,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  gap: 20\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-success\",\n                  onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                  children: \"Show Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 532,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-danger\",\n                  onClick: () => {\n                    const nodeId1 = nodePair[0].id;\n                    const nodeId2 = nodePair[1].id;\n                    // setNodes((nds) => nds.filter((node) => node.id != nodeId2));\n                    setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                    resetGraphs();\n                  },\n                  children: \"Delete Information Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 540,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 531,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 21\n            }, this);\n          }), selectedFlowShow && selectedInformationFlows.map(nodePair => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 alert alert-success\",\n              style: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 577,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 576,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  gap: 20\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-success\",\n                  onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                  children: \"Show Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 583,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-danger\",\n                  onClick: () => {\n                    const nodeId1 = nodePair[0].id;\n                    const nodeId2 = nodePair[1].id;\n                    // setNodes((nds) => nds.filter((node) => node.id != nodeId2));\n                    setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                    resetGraphs();\n                  },\n                  children: \"Delete Information Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 591,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 582,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 568,\n              columnNumber: 21\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 630,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title\",\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 635,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: () => setIsModalOpen(false),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 636,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 634,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"newNodeLabel\",\n            children: \"New Node Label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 646,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"newNodeLabel\",\n            className: \"form-control\",\n            placeholder: \"New Node Label\",\n            value: newNodeLabel,\n            onChange: e => setNewNodeLabel(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 645,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: () => setIsModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: () => {\n            setNodes(nds => [...nds, {\n              id: `${nds.length + 1}`,\n              type: \"customNode\",\n              data: {\n                label: newNodeLabel\n              },\n              position: {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              }\n            }]);\n            setIsModalOpen(false);\n            setNewNodeLabel(\"\");\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 665,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 657,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"rCeo1qhlxwOW8faJLc3zLDIvxFg=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","ToggleButtonGroup","ToggleButton","jsxDEV","_jsxDEV","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","_selectedInformationF","_selectedInformationF2","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","selectedInformationFlow","setSelectedInformationFlow","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","setDisableAdd","resetFlow","setResetFlow","connectionMode","setConnectionMode","informationFlows","setInformationFlows","selectedInformationFlows","setSelectedInformationFlows","selectedFlowShow","setSelectedFlowShow","onConnect","params","eds","exportInformationFlows","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","importInformationFlows","event","fileReader","FileReader","onload","e","importedFlows","parse","target","result","Array","isArray","console","log","map","find","node","id","alert","error","files","length","readAsText","findPath","sourceId","targetId","visited","Set","queue","path","shift","has","add","filter","edge","source","forEach","nextNode","push","handleNodeClick","nodeData","n","nds","style","border","data","level","resetSelection","_edge$style","_edge$style2","_edge$style3","isInPath","includes","animated","stroke","markerEnd","type","ArrowClosed","color","newEdge","strokeWidth","prevFlows","isDuplicate","some","src","tgt","setTimeout","showInformationFlowOnTheGraphs","flow","showOneFlowOnGraph","showSelectedHolonFlowOnTheGraphs","_selectedNode$data","resetGraphs","selectedLabel","label","_flow$0$data","_flow$1$data","flowLabel0","flowLabel1","newInformationFlows","_flow$0$data2","_flow$1$data2","_edge$style4","_edge$style5","isForwardDirection","isBackwardDirection","strokeDasharray","orient","className","display","height","width","children","position","top","right","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","htmlFor","disable","fitView","onNodeClick","onPaneClick","left","borderLeft","value","placeholder","description","readOnly","nodePair","justifyContent","alignItems","gap","nodeId1","nodeId2","flows","pair","isOpen","onRequestClose","x","Math","random","y","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd, setDisableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n  const [connectionMode, setConnectionMode] = useState(\"any\");\r\n\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\r\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\r\n\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n  // useEffect(() => {\r\n  //   console.log(sourceNode);\r\n  //   informationFlows.push([sourceNode, destinationNode]);\r\n  //   setSourceNode(null);\r\n  //   console.log(informationFlows);\r\n  // }, [sourceNode]);\r\n\r\n  // / Export the information flows as a JSON file\r\n  const exportInformationFlows = () => {\r\n    const dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(informationFlows));\r\n    const downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\r\n    document.body.appendChild(downloadAnchorNode);\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  };\r\n\r\n  // Import the information flows from a JSON file\r\n  const importInformationFlows = (event) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = (e) => {\r\n      try {\r\n        const importedFlows = JSON.parse(e.target.result);\r\n\r\n        if (Array.isArray(importedFlows)) {\r\n          console.log(importedFlows);\r\n          console.log(informationFlows);\r\n          debugger;\r\n          // Convert the imported flows into nodes and update the state\r\n          setInformationFlows(\r\n            importedFlows.map(([sourceNode, destinationNode]) => {\r\n              return [\r\n                nodes.find((node) => node.id === sourceNode.id) || sourceNode,\r\n                nodes.find((node) => node.id === destinationNode.id) ||\r\n                  destinationNode,\r\n              ];\r\n            })\r\n          );\r\n          alert(\"Information Flows loaded successfully.\");\r\n        } else {\r\n          alert(\"Invalid JSON format.\");\r\n        }\r\n      } catch (error) {\r\n        alert(\"Failed to load the JSON file. Please check the file format.\");\r\n      }\r\n    };\r\n\r\n    if (event.target.files.length > 0) {\r\n      fileReader.readAsText(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const findPath = (sourceId, targetId) => {\r\n    const visited = new Set();\r\n    const queue = [[sourceId]];\r\n\r\n    while (queue.length > 0) {\r\n      const path = queue.shift();\r\n      const node = path[path.length - 1];\r\n\r\n      if (node === targetId) return path;\r\n\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        edges\r\n          .filter((edge) => edge.source === node || edge.target === node)\r\n          .forEach((edge) => {\r\n            const nextNode = edge.source === node ? edge.target : edge.source;\r\n            queue.push([...path, nextNode]);\r\n          });\r\n      }\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const handleNodeClick = (event, nodeData) => {\r\n    const id = nodeData.id;\r\n    const node = nodes.find((n) => n.id === id);\r\n    setSelectedNode(node);\r\n\r\n    if (enableInformationFlow) {\r\n      setResetFlow(false);\r\n      if (!sourceNode) {\r\n        setSourceNode(node);\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id ? { ...n, style: { border: \"2px solid blue\" } } : n\r\n          )\r\n        );\r\n      } else if (sourceNode.id !== id) {\r\n        // Check level constraint if in same-level mode\r\n        if (connectionMode === \"same\" && sourceNode.data.level !== node.data.level) {\r\n          alert(\"Nodes must be on the same level!\");\r\n          resetSelection();\r\n          return;\r\n        }\r\n        const path = findPath(sourceNode.id, node.id);\r\n        setEdges((eds) =>\r\n          eds.map((edge) => {\r\n            const isInPath = path.includes(edge.source) && path.includes(edge.target);\r\n            return {\r\n              ...edge,\r\n              animated: edge?.style?.stroke === \"green\" || isInPath,\r\n              style: {\r\n                stroke: edge?.style?.stroke === \"green\" || isInPath ? \"green\" : \"black\",\r\n              },\r\n              markerEnd: {\r\n                type: edge?.style?.stroke === \"green\" || isInPath \r\n                  ? MarkerType.ArrowClosed \r\n                  : null,\r\n                color: \"green\",\r\n              },\r\n            };\r\n          })\r\n        );\r\n\r\n        // Create new edge\r\n        const newEdge = {\r\n          id: `e${sourceNode.id}-${node.id}`,\r\n          source: sourceNode.id,\r\n          target: node.id,\r\n          style: { stroke: \"#333\", strokeWidth: 2 },\r\n          markerEnd: { type: MarkerType.ArrowClosed, color: \"#333\" },\r\n        };\r\n\r\n        setEdges((eds) => addEdge(newEdge, eds));\r\n        setInformationFlows((prevFlows) => {\r\n          const isDuplicate = prevFlows.some(\r\n            ([src, tgt]) => src.id === sourceNode.id && tgt.id === node.id\r\n          );\r\n          return isDuplicate ? prevFlows : [...prevFlows, [sourceNode, node]];\r\n        });\r\n\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id ? { ...n, style: { border: \"2px solid green\" } } : n\r\n          )\r\n        );\r\n        setTimeout(resetSelection, 1000);\r\n      }\r\n    }\r\n  };\r\n  const showInformationFlowOnTheGraphs = () => {\r\n    // write the code to use the information flows 2d array,\r\n    // iterate through the information flow 2d array one by one,\r\n    // read the source node and destination node which will be 1 array, source node is the 0th index element and destination node is 1st index element\r\n    // the source node color should be blue and destination source node should be green and the edge color will be green and dash animation.\r\n    informationFlows.forEach((flow) => {\r\n      const [sourceNode, destinationNode] = flow;\r\n      showOneFlowOnGraph(sourceNode, destinationNode);\r\n    });\r\n\r\n    setSelectedFlowShow(false);\r\n  };\r\n  const showSelectedHolonFlowOnTheGraphs = () => {\r\n    // write the code to use the information flows 2d array,\r\n    // iterate through the information flow 2d array one by one,\r\n    // read the source node and destination node which will be 1 array, source node is the 0th index element and destination node is 1st index element\r\n    // the source node color should be blue and destination source node should be green and the edge color will be green and dash animation.\r\n    resetGraphs();\r\n    let selectedLabel = selectedNode?.data?.label;\r\n    informationFlows.forEach((flow) => {\r\n      let flowLabel0 = flow[0].data?.label;\r\n      let flowLabel1 = flow[1].data?.label;\r\n      if (flowLabel0 == selectedLabel || flowLabel1 == selectedLabel) {\r\n        const [sourceNode, destinationNode] = flow;\r\n        showOneFlowOnGraph(sourceNode, destinationNode);\r\n      }\r\n    });\r\n    let newInformationFlows = [];\r\n    informationFlows.forEach((flow) => {\r\n      let flowLabel0 = flow[0].data?.label;\r\n      let flowLabel1 = flow[1].data?.label;\r\n      if (flowLabel0 == selectedLabel || flowLabel1 == selectedLabel) {\r\n        newInformationFlows.push(flow);\r\n      }\r\n    });\r\n    setSelectedInformationFlows(newInformationFlows);\r\n    setSelectedFlowShow(true);\r\n  };\r\n\r\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\r\n    // Reset the graph to clear any existing styles\r\n    // resetGraphs();\r\n\r\n    // Update the nodes to show the selected source and destination colors\r\n    setNodes((nds) =>\r\n      nds.map((n) =>\r\n        n.id === sourceNode.id\r\n          ? { ...n, style: { border: \"2px solid blue\" } }\r\n          : n.id === destinationNode.id\r\n          ? { ...n, style: { border: \"2px solid green\" } }\r\n          : n\r\n      )\r\n    );\r\n\r\n    // Find the path from sourceNode to destinationNode\r\n    const path = findPath(sourceNode.id, destinationNode.id);\r\n\r\n    if (!path || path.length === 0) {\r\n      console.error(\"No path found between the selected nodes.\");\r\n      return;\r\n    }\r\n\r\n    // Update edges with green color, dashed animation, and correct arrow direction\r\n    setEdges((eds) =>\r\n      eds.map((edge) => {\r\n        const isInPath =\r\n          path.includes(edge.source) && path.includes(edge.target);\r\n\r\n        // Determine if the edge is in the forward or backward direction\r\n        const isForwardDirection =\r\n          edge.source === path[0] && edge.target === path[1];\r\n        const isBackwardDirection =\r\n          edge.target === path[0] && edge.source === path[1];\r\n\r\n        // Ensure edge.style and markerEnd are initialized\r\n        return {\r\n          ...edge,\r\n          animated: isInPath ? true : edge.animated,\r\n          style: {\r\n            ...edge.style, // Merge existing styles\r\n            stroke: isInPath ? \"green\" : edge.style?.stroke,\r\n            strokeDasharray: isInPath ? \"5,5\" : edge.style?.strokeDasharray,\r\n          },\r\n          markerEnd: isInPath\r\n            ? {\r\n                type: MarkerType.ArrowClosed,\r\n                color: \"green\",\r\n                orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\",\r\n              }\r\n            : edge.markerEnd,\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  const resetSelection = () => {\r\n    setEnableInformationFlow(!enableInformationFlow);\r\n    if (enableInformationFlow) {\r\n      setResetFlow(true);\r\n      setSourceNode(null);\r\n      setDestinationNode(null);\r\n      // setSelectedNode(null);\r\n      setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n      setEdges((eds) =>\r\n        eds.map((edge) => ({\r\n          ...edge,\r\n          animated: false,\r\n          style: { stroke: \"black\" },\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const resetGraphs = () => {\r\n    setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n    setEdges((eds) =>\r\n      eds.map((edge) => ({\r\n        ...edge,\r\n        animated: false,\r\n        style: { stroke: \"black\" },\r\n      }))\r\n    );\r\n\r\n    setSelectedFlowShow(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"container-fluid\"\r\n      style={{ display: \"flex\", height: \"100vh\", width: \"98vw\" }}\r\n    >\r\n      <div className=\"col-8\" style={{ height: \"100%\" }}>\r\n        <div\r\n          className=\"d-flex justify-content-between align-items-center mb-3\"\r\n          style={{ position: \"absolute\", top: -88, right: \"-23vw\" }}\r\n        >\r\n          {/* <h3>Add Node</h3> */}\r\n          <button className={\"btn btn-success\"} onClick={resetSelection}>\r\n            Add Information Flow\r\n          </button>\r\n          {/* {informationFlows.length > 0 && (\r\n            <button\r\n              className={\"btn btn-success\"}\r\n              onClick={showInformationFlowOnTheGraphs}\r\n            >\r\n              Show Information Flows\r\n            </button>\r\n          )} */}\r\n          {informationFlows.length > 0 && (\r\n            <button\r\n              className={\"btn btn-primary ml-2\"}\r\n              onClick={exportInformationFlows}\r\n            >\r\n              Export Information Flows\r\n            </button>\r\n          )}\r\n\r\n          <input\r\n            type=\"file\"\r\n            accept=\".json\"\r\n            onChange={importInformationFlows}\r\n            style={{ display: \"none\" }}\r\n            id=\"uploadFile\"\r\n          />\r\n          <label htmlFor=\"uploadFile\" className=\"btn btn-secondary ml-2 mt-2\">\r\n            Import Information Flows\r\n          </label>\r\n        </div>\r\n\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes.map((node) => ({\r\n            ...node,\r\n            data: {\r\n              ...node.data,\r\n              disable: disableAdd,\r\n            },\r\n          }))}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={handleNodeClick}\r\n          onPaneClick={() => setSelectedNode(null)}\r\n        />\r\n      </div>\r\n      {sourceNode && destinationNode == null ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">\r\n            Select the Destination Node\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {resetFlow & enableInformationFlow ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">Select the Source Node</div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div\r\n        className=\"col-4\"\r\n        style={{ padding: \"10px\", borderLeft: \"1px solid #ccc\" }}\r\n      >\r\n        {selectedNode ? (\r\n          <div className=\"mr-3\">\r\n            <div className=\"border border-dark p-4\">\r\n              <h4>Holon Details</h4>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nameofNode\">Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nameofNode\"\r\n                  className=\"form-control\"\r\n                  value={selectedNode.data.label}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? {\r\n                              ...node,\r\n                              data: { ...node.data, label: e.target.value },\r\n                            }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeDescription\">Description</label>\r\n                <textarea\r\n                  id=\"nodeDescription\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"200px\", width: \"100%\" }}\r\n                  placeholder=\"An example description...\"\r\n                  value={selectedNode.data.description || \"\"}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? {\r\n                              ...node,\r\n                              data: {\r\n                                ...node.data,\r\n                                description: e.target.value,\r\n                              },\r\n                            }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"border border-dark p-4 my-2\">\r\n              <div className=\"form-group mb-3\">\r\n                <h4 className=\"mb-3\">Information Flows</h4>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.data?.label\r\n                      : selectedNode.data.label\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeInfoFlows\">\r\n                  Information Flows Description\r\n                </label>\r\n                <textarea\r\n                  type=\"text\"\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"100px\", width: \"100%\" }}\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.data?.description\r\n                      : selectedNode.data.description\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n\r\n              {/* <div className=\"mt-3 alert alert-info\">\r\n              <strong>Node Selected:</strong> {selectedNode.data.label}\r\n            </div> */}\r\n              <div>\r\n                {enableInformationFlow && (\r\n                  <p className=\"lead\">Selected Information Flow</p>\r\n                )}\r\n              </div>\r\n              <div>\r\n                <button\r\n                  className={\"btn btn-success mx-1\"}\r\n                  onClick={() => showInformationFlowOnTheGraphs()}\r\n                >\r\n                  Show All Flow\r\n                </button>\r\n                <button\r\n                  className={\"btn btn-success mx-1\"}\r\n                  onClick={() => showSelectedHolonFlowOnTheGraphs()}\r\n                >\r\n                  Selected Holon\r\n                </button>\r\n                {informationFlows.length > 0 && (\r\n                  <button\r\n                    className={\"btn btn-primary mx-2\"}\r\n                    onClick={resetGraphs}\r\n                  >\r\n                    Reset Flow\r\n                  </button>\r\n                )}\r\n              </div>\r\n              {!selectedFlowShow &&\r\n                informationFlows.map((nodePair) => {\r\n                  return (\r\n                    <div\r\n                      className=\"mt-3 alert alert-success\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <div>\r\n                        <strong>\r\n                          {nodePair[0].data.label} {\"-->\"}{\" \"}\r\n                          {nodePair[1].data.label}\r\n                        </strong>\r\n                      </div>\r\n                      <div style={{ display: \"flex\", gap: 20 }}>\r\n                        <button\r\n                          className={\"btn btn-success\"}\r\n                          onClick={() =>\r\n                            showOneFlowOnGraph(nodePair[0], nodePair[1])\r\n                          }\r\n                        >\r\n                          Show Flow\r\n                        </button>\r\n                        <button\r\n                          className={\"btn btn-danger\"}\r\n                          onClick={() => {\r\n                            const nodeId1 = nodePair[0].id;\r\n                            const nodeId2 = nodePair[1].id;\r\n                            // setNodes((nds) => nds.filter((node) => node.id != nodeId2));\r\n                            setInformationFlows((flows) =>\r\n                              flows.filter(\r\n                                (pair) =>\r\n                                  !(\r\n                                    pair[0].id === nodeId1 &&\r\n                                    pair[1].id === nodeId2\r\n                                  )\r\n                              )\r\n                            );\r\n                            resetGraphs();\r\n                          }}\r\n                        >\r\n                          Delete Information Flow\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n\r\n              {selectedFlowShow &&\r\n                selectedInformationFlows.map((nodePair) => {\r\n                  return (\r\n                    <div\r\n                      className=\"mt-3 alert alert-success\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <div>\r\n                        <strong>\r\n                          {nodePair[0].data.label} {\"-->\"}{\" \"}\r\n                          {nodePair[1].data.label}\r\n                        </strong>\r\n                      </div>\r\n                      <div style={{ display: \"flex\", gap: 20 }}>\r\n                        <button\r\n                          className={\"btn btn-success\"}\r\n                          onClick={() =>\r\n                            showOneFlowOnGraph(nodePair[0], nodePair[1])\r\n                          }\r\n                        >\r\n                          Show Flow\r\n                        </button>\r\n                        <button\r\n                          className={\"btn btn-danger\"}\r\n                          onClick={() => {\r\n                            const nodeId1 = nodePair[0].id;\r\n                            const nodeId2 = nodePair[1].id;\r\n                            // setNodes((nds) => nds.filter((node) => node.id != nodeId2));\r\n                            setInformationFlows((flows) =>\r\n                              flows.filter(\r\n                                (pair) =>\r\n                                  !(\r\n                                    pair[0].id === nodeId1 &&\r\n                                    pair[1].id === nodeId2\r\n                                  )\r\n                              )\r\n                            );\r\n                            resetGraphs();\r\n                          }}\r\n                        >\r\n                          Delete Information Flow\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              {/* {enableInformationFlow &&\r\n              sourceNode &&\r\n              destinationNode &&\r\n              destinationNode.map((element) => {\r\n                return (\r\n                  <div className=\"mt-3 alert alert-success\">\r\n                    <strong>\r\n                      {sourceNode.data.label} {\"-->\"} {element.data.label}\r\n                    </strong>\r\n                  </div>\r\n                );\r\n              })} */}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>No Selection</div>\r\n        )}\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title\">Add Node</h5>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            <span>&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <div className=\"form-group mb-3\">\r\n            <label htmlFor=\"newNodeLabel\">New Node Label</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"newNodeLabel\"\r\n              className=\"form-control\"\r\n              placeholder=\"New Node Label\"\r\n              value={newNodeLabel}\r\n              onChange={(e) => setNewNodeLabel(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            Close\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              setNodes((nds) => [\r\n                ...nds,\r\n                {\r\n                  id: `${nds.length + 1}`,\r\n                  type: \"customNode\",\r\n                  data: { label: newNodeLabel },\r\n                  position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n                },\r\n              ]);\r\n              setIsModalOpen(false);\r\n              setNewNodeLabel(\"\");\r\n            }}\r\n          >\r\n            Add Node\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}