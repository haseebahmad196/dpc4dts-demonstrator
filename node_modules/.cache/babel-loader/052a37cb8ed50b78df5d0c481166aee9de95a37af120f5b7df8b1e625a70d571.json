{"ast":null,"code":"var _jsxFileName = \"C:\\\\Documents for a job\\\\Certifications\\\\Meta Frontend\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Tree, TreeNode } from 'react-organizational-chart';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Holon = ({\n  node,\n  onAddChild,\n  onRemoveNode,\n  onSelectNode,\n  isSelected\n}) => {\n  // Handles click on action buttons without selecting the node\n  const handleActionClick = (e, action) => {\n    e.stopPropagation(); // Prevents the click from selecting the node\n    action();\n  };\n  return /*#__PURE__*/_jsxDEV(TreeNode, {\n    label: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `tree-label ${isSelected(node) ? 'selected' : ''}`,\n      onClick: () => onSelectNode(node),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"name\",\n        children: node.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          onClick: e => handleActionClick(e, () => onAddChild(node)),\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 13\n        }, this), node.id !== 'root' && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"remove-button\",\n          onClick: e => handleActionClick(e, () => onRemoveNode(node.id)),\n          children: \"x\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 20,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 9\n    }, this),\n    children: node.children.map(child => /*#__PURE__*/_jsxDEV(Holon, {\n      node: child,\n      onAddChild: onAddChild,\n      onRemoveNode: onRemoveNode,\n      onSelectNode: onSelectNode,\n      isSelected: isSelected\n    }, child.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 13,\n    columnNumber: 5\n  }, this);\n};\n_c = Holon;\nconst App = () => {\n  _s();\n  const initialNodes = {\n    id: 'root',\n    name: 'Information System',\n    description: 'A set of components for collecting, storing, and processing data.',\n    // Example description\n    children: []\n  };\n  const [nodes, setNodes] = useState(initialNodes);\n  const [selectedHolon, setSelectedHolon] = useState(null);\n\n  // Adds a child node\n  const onAddChild = parentNode => {\n    const childName = prompt('Enter the name of the child:');\n    if (!childName) return;\n    const newChild = {\n      id: `${parentNode.id}-${Math.random()}`,\n      // Ideally, use a more reliable method for ID generation\n      name: childName,\n      description: 'Description not provided.',\n      // Placeholder description\n      children: []\n    };\n\n    // Function to recursively add a new child to the specified parent node\n    const addNode = (node, parentId) => {\n      if (node.id === parentId) {\n        node.children.push(newChild);\n        return;\n      }\n      node.children.forEach(child => addNode(child, parentId));\n    };\n    const newNodes = {\n      ...nodes\n    };\n    addNode(newNodes, parentNode.id);\n    setNodes(newNodes);\n  };\n\n  // Removes a node by ID\n  const onRemoveNode = nodeId => {\n    // Function to recursively remove a node by ID\n    const removeNode = (node, nodeIdToRemove) => {\n      node.children = node.children.filter(child => child.id !== nodeIdToRemove).map(child => removeNode(child, nodeIdToRemove));\n      return node;\n    };\n    const newNodes = {\n      ...nodes\n    };\n    removeNode(newNodes, nodeId);\n    setNodes(newNodes);\n    if (selectedHolon && selectedHolon.id === nodeId) {\n      setSelectedHolon(null); // Deselect if the removed node was selected\n    }\n  };\n\n  // Selects a node to show its details\n  const onSelectNode = node => {\n    setSelectedHolon(node);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(Tree, {\n      lineWidth: \"2px\",\n      lineColor: \"blue\",\n      lineBorderRadius: \"5px\",\n      children: /*#__PURE__*/_jsxDEV(Holon, {\n        node: nodes,\n        onAddChild: onAddChild,\n        onRemoveNode: onRemoveNode,\n        onSelectNode: setSelectedHolon,\n        isSelected: node => selectedHolon && node.id === selectedHolon.id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), selectedHolon && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"holon-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Holon Details\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Name: \", selectedHolon.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Description: \", selectedHolon.description]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"31YFXVOmbk0FSScOe6uAY/bmYAY=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Holon\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","Tree","TreeNode","jsxDEV","_jsxDEV","Holon","node","onAddChild","onRemoveNode","onSelectNode","isSelected","handleActionClick","e","action","stopPropagation","label","className","onClick","children","name","fileName","_jsxFileName","lineNumber","columnNumber","id","map","child","_c","App","_s","initialNodes","description","nodes","setNodes","selectedHolon","setSelectedHolon","parentNode","childName","prompt","newChild","Math","random","addNode","parentId","push","forEach","newNodes","nodeId","removeNode","nodeIdToRemove","filter","lineWidth","lineColor","lineBorderRadius","_c2","$RefreshReg$"],"sources":["C:/Documents for a job/Certifications/Meta Frontend/my-react-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Tree, TreeNode } from 'react-organizational-chart';\nimport './styles.css';\n\nconst Holon = ({ node, onAddChild, onRemoveNode, onSelectNode, isSelected }) => {\n  // Handles click on action buttons without selecting the node\n  const handleActionClick = (e, action) => {\n    e.stopPropagation(); // Prevents the click from selecting the node\n    action();\n  };\n\n  return (\n    <TreeNode\n      label={\n        <div className={`tree-label ${isSelected(node) ? 'selected' : ''}`} onClick={() => onSelectNode(node)}>\n          <div className=\"name\">{node.name}</div>\n          <div className=\"buttons\">\n            <button className=\"add-button\" onClick={(e) => handleActionClick(e, () => onAddChild(node))}>+</button>\n            {node.id !== 'root' && (\n              <button className=\"remove-button\" onClick={(e) => handleActionClick(e, () => onRemoveNode(node.id))}>x</button>\n            )}\n          </div>\n        </div>\n      }\n    >\n      {node.children.map((child) => (\n        <Holon\n          key={child.id}\n          node={child}\n          onAddChild={onAddChild}\n          onRemoveNode={onRemoveNode}\n          onSelectNode={onSelectNode}\n          isSelected={isSelected}\n        />\n      ))}\n    </TreeNode>\n  );\n};\n\nconst App = () => {\n  const initialNodes = {\n    id: 'root',\n    name: 'Information System',\n    description: 'A set of components for collecting, storing, and processing data.', // Example description\n    children: []\n  };\n\n  const [nodes, setNodes] = useState(initialNodes);\n  const [selectedHolon, setSelectedHolon] = useState(null);\n\n  // Adds a child node\n  const onAddChild = (parentNode) => {\n    const childName = prompt('Enter the name of the child:');\n    if (!childName) return;\n\n    const newChild = {\n      id: `${parentNode.id}-${Math.random()}`, // Ideally, use a more reliable method for ID generation\n      name: childName,\n      description: 'Description not provided.', // Placeholder description\n      children: []\n    };\n\n    // Function to recursively add a new child to the specified parent node\n    const addNode = (node, parentId) => {\n      if (node.id === parentId) {\n        node.children.push(newChild);\n        return;\n      }\n      node.children.forEach(child => addNode(child, parentId));\n    };\n\n    const newNodes = { ...nodes };\n    addNode(newNodes, parentNode.id);\n    setNodes(newNodes);\n  };\n\n  // Removes a node by ID\n  const onRemoveNode = (nodeId) => {\n    // Function to recursively remove a node by ID\n    const removeNode = (node, nodeIdToRemove) => {\n      node.children = node.children.filter(child => child.id !== nodeIdToRemove).map(child => removeNode(child, nodeIdToRemove));\n      return node;\n    };\n\n    const newNodes = { ...nodes };\n    removeNode(newNodes, nodeId);\n    setNodes(newNodes);\n    if (selectedHolon && selectedHolon.id === nodeId) {\n      setSelectedHolon(null); // Deselect if the removed node was selected\n    }\n  };\n\n  // Selects a node to show its details\n  const onSelectNode = (node) => {\n    setSelectedHolon(node);\n  };\n\n  return (\n    <div className=\"app-container\">\n      <Tree lineWidth={\"2px\"} lineColor={\"blue\"} lineBorderRadius={\"5px\"}>\n        <Holon\n          node={nodes}\n          onAddChild={onAddChild}\n          onRemoveNode={onRemoveNode}\n          onSelectNode={setSelectedHolon}\n          isSelected={(node) => selectedHolon && node.id === selectedHolon.id}\n        />\n      </Tree>\n      {selectedHolon && (\n        <div className=\"holon-details\">\n          <h2>Holon Details</h2>\n          <p>Name: {selectedHolon.name}</p>\n          <p>Description: {selectedHolon.description}</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}