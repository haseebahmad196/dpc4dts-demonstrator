{"ast":null,"code":"var _jsxFileName = \"C:\\\\Documents for a job\\\\Certifications\\\\Meta Frontend\\\\my-react-app\\\\src\\\\CommunicationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Tree, TreeNode } from 'react-organizational-chart';\nimport Modal from 'react-bootstrap/Modal';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Holon = ({\n  node,\n  onSelectNode,\n  isSelected,\n  setSelectedHolon\n}) => {\n  const handleNodeClick = () => {\n    setSelectedHolon(node);\n    onSelectNode(node);\n  };\n  const handleAddClick = e => {\n    e.stopPropagation();\n    setSelectedHolon(node);\n    node.isOrigin = true; // Mark the holon as origin\n  };\n  const selected = isSelected(node);\n  const isOrigin = node.isOrigin || false; // Check if the node is marked as origin\n\n  return /*#__PURE__*/_jsxDEV(TreeNode, {\n    label: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `tree-label ${selected ? 'selected' : ''} ${isOrigin ? 'origin' : ''}`,\n      onClick: handleNodeClick,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"name\",\n        children: node.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"add-button\",\n          onClick: handleAddClick,\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faPlus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this),\n    children: node.children && node.children.map(child => /*#__PURE__*/_jsxDEV(Holon, {\n      node: child,\n      onSelectNode: onSelectNode,\n      isSelected: isSelected,\n      setSelectedHolon: setSelectedHolon\n    }, child.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this);\n};\n_c = Holon;\nconst CommunicationPage = () => {\n  _s();\n  const initialNodes = {\n    id: 'root',\n    name: 'Information System',\n    description: 'An information system is an organized combination of people, hardware, software, communication networks, and data resources that collects, transforms, and disseminates information in an organization.',\n    informationFlows: ['Flow 1', 'Flow 2', 'Flow 3'],\n    children: [{\n      id: 'Stakeholder',\n      name: 'Stakeholder',\n      description: 'A stakeholder refers to any individual, group, or organization that has an interest or concern in the system, its development, implementation, or outcomes. These stakeholders can be internal or external to the organization implementing the information system. Understanding and managing stakeholders is crucial for the success of an information system project.',\n      children: []\n    }, {\n      id: 'Infrastructure',\n      name: 'Infrastructure',\n      description: 'Infrastructure in the context of information systems refers to the fundamental physical and organizational structures, facilities, and services required for the operation of an information system. This includes hardware, software, networking components, data centers, and the personnel that maintain and manage the system. Effective infrastructure supports the smooth and efficient collection, storage, processing, and dissemination of information.',\n      children: []\n    }]\n  };\n  const [nodes, setNodes] = useState(initialNodes);\n  const [selectedHolon, setSelectedHolon] = useState(null);\n  const [showModal, setShowModal] = useState(false);\n  const [modalStep, setModalStep] = useState(1);\n  const [nodeType, setNodeType] = useState('');\n  const [nodeName, setNodeName] = useState('');\n  const handleModalClose = () => {\n    setShowModal(false);\n    setModalStep(1);\n    setNodeName('');\n  };\n  const handleModalShow = () => {\n    setShowModal(true);\n  };\n  const onAddChild = parentNode => {\n    setSelectedHolon(parentNode);\n    handleModalShow();\n  };\n  const onRemoveNode = nodeId => {\n    const removeNode = (nodes, nodeIdToRemove) => {\n      if (nodes.id === nodeIdToRemove) {\n        return null;\n      }\n      nodes.children = nodes.children.filter(child => child.id !== nodeIdToRemove);\n      nodes.children.forEach(child => removeNode(child, nodeIdToRemove));\n      return nodes;\n    };\n    const newNodes = removeNode({\n      ...nodes\n    }, nodeId);\n    setNodes(newNodes);\n    setSelectedHolon(null);\n  };\n  const addNewRoot = () => {\n    setSelectedHolon({\n      id: 'root',\n      name: '',\n      children: [nodes]\n    });\n    setNodeType('parent');\n    handleModalShow();\n  };\n  const handleNodeTypeSelection = type => {\n    setNodeType(type);\n    setModalStep(2);\n  };\n  const handleSubmit = () => {\n    const newNode = {\n      id: `${selectedHolon.id}-${Math.random()}`,\n      name: nodeName,\n      children: []\n    };\n    if (nodeType === 'child') {\n      const addNode = (nodes, parentId) => {\n        if (nodes.id === parentId) {\n          nodes.children.push(newNode);\n          return;\n        }\n        nodes.children.forEach(child => addNode(child, parentId));\n      };\n      const newNodes = {\n        ...nodes\n      };\n      addNode(newNodes, selectedHolon.id);\n      setNodes(newNodes);\n    } else if (nodeType === 'parent') {\n      const newParent = {\n        id: `root-${Math.random()}`,\n        name: nodeName,\n        children: [selectedHolon]\n      };\n      setNodes(newParent);\n    }\n    handleModalClose();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-area\",\n      children: [/*#__PURE__*/_jsxDEV(Tree, {\n        lineWidth: \"2px\",\n        lineColor: \"blue\",\n        lineBorderRadius: \"5px\",\n        lineStyle: \"dashed\",\n        children: /*#__PURE__*/_jsxDEV(Holon, {\n          node: nodes,\n          onAddChild: onAddChild,\n          onRemoveNode: onRemoveNode,\n          onSelectNode: node => setSelectedHolon(node),\n          isSelected: node => selectedHolon && node.id === selectedHolon.id,\n          addNewRoot: addNewRoot,\n          setSelectedHolon: setSelectedHolon\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal, {\n        show: showModal,\n        onHide: handleModalClose,\n        children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n          closeButton: true,\n          children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n            children: modalStep === 1 ? 'Select Node Type' : 'Enter Node Name'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n          children: modalStep === 1 ? /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              textAlign: 'center'\n            },\n            children: \"Select a button below to add the node you need\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 29\n          }, this) : /*#__PURE__*/_jsxDEV(Form, {\n            children: /*#__PURE__*/_jsxDEV(Form.Group, {\n              controlId: \"formNodeName\",\n              children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n                children: \"Enter the name for the Node\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n                type: \"text\",\n                placeholder: \"Node name\",\n                value: nodeName,\n                onChange: e => setNodeName(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 181,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n          children: modalStep === 1 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Button, {\n              variant: \"secondary\",\n              onClick: () => handleNodeTypeSelection('child'),\n              children: \"Child-Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 189,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              variant: \"primary\",\n              onClick: () => handleNodeTypeSelection('parent'),\n              children: \"Parent-Node\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true) : /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"primary\",\n            onClick: handleSubmit,\n            children: \"Save Changes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 9\n  }, this);\n};\n_s(CommunicationPage, \"P2tezXhB04G3zLATswtfokaGkow=\");\n_c2 = CommunicationPage;\nexport default CommunicationPage;\nvar _c, _c2;\n$RefreshReg$(_c, \"Holon\");\n$RefreshReg$(_c2, \"CommunicationPage\");","map":{"version":3,"names":["React","useState","Tree","TreeNode","Modal","Button","Form","FontAwesomeIcon","faPlus","faTrash","jsxDEV","_jsxDEV","Fragment","_Fragment","Holon","node","onSelectNode","isSelected","setSelectedHolon","handleNodeClick","handleAddClick","e","stopPropagation","isOrigin","selected","label","className","onClick","children","name","fileName","_jsxFileName","lineNumber","columnNumber","icon","map","child","id","_c","CommunicationPage","_s","initialNodes","description","informationFlows","nodes","setNodes","selectedHolon","showModal","setShowModal","modalStep","setModalStep","nodeType","setNodeType","nodeName","setNodeName","handleModalClose","handleModalShow","onAddChild","parentNode","onRemoveNode","nodeId","removeNode","nodeIdToRemove","filter","forEach","newNodes","addNewRoot","handleNodeTypeSelection","type","handleSubmit","newNode","Math","random","addNode","parentId","push","newParent","lineWidth","lineColor","lineBorderRadius","lineStyle","show","onHide","Header","closeButton","Title","Body","style","textAlign","Group","controlId","Label","Control","placeholder","value","onChange","target","Footer","variant","_c2","$RefreshReg$"],"sources":["C:/Documents for a job/Certifications/Meta Frontend/my-react-app/src/CommunicationPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Tree, TreeNode } from 'react-organizational-chart';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Form from 'react-bootstrap/Form';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus, faTrash } from '@fortawesome/free-solid-svg-icons';\r\nimport './styles.css';\r\n\r\nconst Holon = ({ node, onSelectNode, isSelected, setSelectedHolon }) => {\r\n    const handleNodeClick = () => {\r\n        setSelectedHolon(node);\r\n        onSelectNode(node);\r\n    };\r\n\r\n    const handleAddClick = (e) => {\r\n        e.stopPropagation();\r\n        setSelectedHolon(node);\r\n        node.isOrigin = true; // Mark the holon as origin\r\n    };\r\n\r\n    const selected = isSelected(node);\r\n    const isOrigin = node.isOrigin || false; // Check if the node is marked as origin\r\n\r\n    return (\r\n        <TreeNode label={\r\n            <div className={`tree-label ${selected ? 'selected' : ''} ${isOrigin ? 'origin' : ''}`} onClick={handleNodeClick}>\r\n                <div className=\"name\">{node.name}</div>\r\n                <div className=\"buttons\">\r\n                    <button className=\"add-button\" onClick={handleAddClick}>\r\n                        <FontAwesomeIcon icon={faPlus} />\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        }>\r\n            {node.children && node.children.map(child => (\r\n                <Holon\r\n                    key={child.id}\r\n                    node={child}\r\n                    onSelectNode={onSelectNode}\r\n                    isSelected={isSelected}\r\n                    setSelectedHolon={setSelectedHolon}\r\n                />\r\n            ))}\r\n        </TreeNode>\r\n    );\r\n};\r\n\r\n\r\n\r\nconst CommunicationPage = () => {\r\n    const initialNodes = {\r\n        id: 'root',\r\n        name: 'Information System',\r\n        description: 'An information system is an organized combination of people, hardware, software, communication networks, and data resources that collects, transforms, and disseminates information in an organization.',\r\n        informationFlows: [\r\n            'Flow 1',\r\n            'Flow 2',\r\n            'Flow 3'\r\n        ],\r\n        children: [\r\n            {\r\n                id: 'Stakeholder',\r\n                name: 'Stakeholder',\r\n                description: 'A stakeholder refers to any individual, group, or organization that has an interest or concern in the system, its development, implementation, or outcomes. These stakeholders can be internal or external to the organization implementing the information system. Understanding and managing stakeholders is crucial for the success of an information system project.',\r\n                children: [],\r\n            },\r\n            {\r\n                id: 'Infrastructure',\r\n                name: 'Infrastructure',\r\n                description: 'Infrastructure in the context of information systems refers to the fundamental physical and organizational structures, facilities, and services required for the operation of an information system. This includes hardware, software, networking components, data centers, and the personnel that maintain and manage the system. Effective infrastructure supports the smooth and efficient collection, storage, processing, and dissemination of information.',\r\n                children: [],\r\n            }\r\n        ],\r\n    };\r\n\r\n    const [nodes, setNodes] = useState(initialNodes);\r\n    const [selectedHolon, setSelectedHolon] = useState(null);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [modalStep, setModalStep] = useState(1);\r\n    const [nodeType, setNodeType] = useState('');\r\n    const [nodeName, setNodeName] = useState('');\r\n\r\n    const handleModalClose = () => {\r\n        setShowModal(false);\r\n        setModalStep(1);\r\n        setNodeName('');\r\n    };\r\n\r\n    const handleModalShow = () => {\r\n        setShowModal(true);\r\n    };\r\n\r\n    const onAddChild = (parentNode) => {\r\n        setSelectedHolon(parentNode);\r\n        handleModalShow();\r\n    };\r\n\r\n    const onRemoveNode = (nodeId) => {\r\n        const removeNode = (nodes, nodeIdToRemove) => {\r\n            if (nodes.id === nodeIdToRemove) {\r\n                return null;\r\n            }\r\n            nodes.children = nodes.children.filter(child => child.id !== nodeIdToRemove);\r\n            nodes.children.forEach(child => removeNode(child, nodeIdToRemove));\r\n            return nodes;\r\n        };\r\n\r\n        const newNodes = removeNode({ ...nodes }, nodeId);\r\n        setNodes(newNodes);\r\n        setSelectedHolon(null);\r\n    };\r\n\r\n    const addNewRoot = () => {\r\n        setSelectedHolon({ id: 'root', name: '', children: [nodes] });\r\n        setNodeType('parent');\r\n        handleModalShow();\r\n    };\r\n\r\n    const handleNodeTypeSelection = (type) => {\r\n        setNodeType(type);\r\n        setModalStep(2);\r\n    };\r\n\r\n    const handleSubmit = () => {\r\n        const newNode = {\r\n            id: `${selectedHolon.id}-${Math.random()}`,\r\n            name: nodeName,\r\n            children: []\r\n        };\r\n        if (nodeType === 'child') {\r\n            const addNode = (nodes, parentId) => {\r\n                if (nodes.id === parentId) {\r\n                    nodes.children.push(newNode);\r\n                    return;\r\n                }\r\n                nodes.children.forEach(child => addNode(child, parentId));\r\n            };\r\n\r\n            const newNodes = { ...nodes };\r\n            addNode(newNodes, selectedHolon.id);\r\n            setNodes(newNodes);\r\n        } else if (nodeType === 'parent') {\r\n            const newParent = {\r\n                id: `root-${Math.random()}`,\r\n                name: nodeName,\r\n                children: [selectedHolon]\r\n            };\r\n            setNodes(newParent);\r\n        }\r\n        handleModalClose();\r\n    };\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <div className=\"content-area\">\r\n                <Tree lineWidth={\"2px\"} lineColor={\"blue\"} lineBorderRadius={\"5px\"} lineStyle={\"dashed\"}>\r\n                    <Holon\r\n                        node={nodes}\r\n                        onAddChild={onAddChild}\r\n                        onRemoveNode={onRemoveNode}\r\n                        onSelectNode={(node) => setSelectedHolon(node)}\r\n                        isSelected={(node) => selectedHolon && node.id === selectedHolon.id}\r\n                        addNewRoot={addNewRoot}\r\n                        setSelectedHolon={setSelectedHolon}\r\n                    />\r\n                </Tree>\r\n                <Modal show={showModal} onHide={handleModalClose}>\r\n                    <Modal.Header closeButton>\r\n                        <Modal.Title>{modalStep === 1 ? 'Select Node Type' : 'Enter Node Name'}</Modal.Title>\r\n                    </Modal.Header>\r\n                    <Modal.Body>\r\n                        {modalStep === 1 ? (\r\n                            <p style={{ textAlign: 'center' }}>\r\n                                Select a button below to add the node you need\r\n                            </p>\r\n                        ) : (\r\n                            <Form>\r\n                                <Form.Group controlId=\"formNodeName\">\r\n                                    <Form.Label>Enter the name for the Node</Form.Label>\r\n                                    <Form.Control type=\"text\" placeholder=\"Node name\" value={nodeName} onChange={(e) => setNodeName(e.target.value)} />\r\n                                </Form.Group>\r\n                            </Form>\r\n                        )}\r\n                    </Modal.Body>\r\n                    <Modal.Footer>\r\n                        {modalStep === 1 ? (\r\n                            <>\r\n                                <Button variant=\"secondary\" onClick={() => handleNodeTypeSelection('child')}>Child-Node</Button>\r\n                                <Button variant=\"primary\" onClick={() => handleNodeTypeSelection('parent')}>Parent-Node</Button>\r\n                            </>\r\n                        ) : (\r\n                            <Button variant=\"primary\" onClick={handleSubmit}>\r\n                                Save Changes\r\n                            </Button>\r\n                        )}\r\n                    </Modal.Footer>\r\n                </Modal>\r\n                {/* Move the holon details inside the selectedHolon condition */}\r\n               \r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CommunicationPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}