{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  var _selectedInformationF;\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [informationFlows, setInformationFlows] = useState([]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n\n  // useEffect(() => {\n  //   console.log(sourceNode);\n  //   informationFlows.push([sourceNode, destinationNode]);\n  //   setSourceNode(null);\n  //   console.log(informationFlows);\n  // }, [sourceNode]);\n\n  // / Export the information flows as a JSON file\n  const exportInformationFlows = () => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(informationFlows));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n\n  // Import the information flows from a JSON file\n  const importInformationFlows = event => {\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      try {\n        const importedFlows = JSON.parse(e.target.result);\n        if (Array.isArray(importedFlows)) {\n          console.log(importedFlows);\n          console.log(informationFlows);\n          debugger;\n          // Convert the imported flows into nodes and update the state\n          setInformationFlows(importedFlows.map(([sourceNode, destinationNode]) => {\n            return [nodes.find(node => node.id === sourceNode.id) || sourceNode, nodes.find(node => node.id === destinationNode.id) || destinationNode];\n          }));\n          alert(\"Information Flows loaded successfully.\");\n        } else {\n          alert(\"Invalid JSON format.\");\n        }\n      } catch (error) {\n        alert(\"Failed to load the JSON file. Please check the file format.\");\n      }\n    };\n    if (event.target.files.length > 0) {\n      fileReader.readAsText(event.target.files[0]);\n    }\n  };\n  const findPath = (sourceId, targetId) => {\n    const visited = new Set();\n    const queue = [[sourceId]];\n    while (queue.length > 0) {\n      const path = queue.shift();\n      const node = path[path.length - 1];\n      if (node === targetId) {\n        return path;\n      }\n      if (!visited.has(node)) {\n        visited.add(node);\n        edges.filter(edge => edge.source === node || edge.target === node).forEach(edge => {\n          const nextNode = edge.source === node ? edge.target : edge.source;\n          queue.push([...path, nextNode]);\n        });\n      }\n    }\n    return [];\n  };\n  const handleNodeClick = (event, nodeData) => {\n    var _informationFlows$fin;\n    const id = nodeData.id;\n    const node = nodes.find(n => n.id === id);\n    setSelectedNode(node);\n    const selectedInformationFlow = informationFlows === null || informationFlows === void 0 ? void 0 : (_informationFlows$fin = informationFlows.find(flow => flow.find(flowId => (flowId === null || flowId === void 0 ? void 0 : flowId.id) == nodeData.id))) === null || _informationFlows$fin === void 0 ? void 0 : _informationFlows$fin.find(infoFlow => (infoFlow === null || infoFlow === void 0 ? void 0 : infoFlow.id) == (nodeData === null || nodeData === void 0 ? void 0 : nodeData.id));\n    setSelectedInformationFlow(selectedInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(false);\n      if (!sourceNode) {\n        setSourceNode(node);\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid blue\"\n          }\n        } : n));\n      } else if (sourceNode.id !== id) {\n        // setDestinationNodes((prevDestinations) => {\n        //   if (!prevDestinations.some((dest) => dest.id === node.id)) {\n        //     // const newDestinations = [...prevDestinations, node];\n        //     // newDestinations.forEach((destination) => {\n\n        //     // });\n        //     return newDestinations;\n        //   }\n        //   return prevDestinations;\n        // });\n        const path = findPath(sourceNode.id, node.id);\n        setEdges(eds => eds.map(edge => {\n          var _edge$style, _edge$style2, _edge$style3;\n          console.log(edge);\n          const isInPath = path.includes(edge.source) && path.includes(edge.target);\n          return {\n            ...edge,\n            animated: (edge === null || edge === void 0 ? void 0 : (_edge$style = edge.style) === null || _edge$style === void 0 ? void 0 : _edge$style.stroke) == \"green\" || isInPath ? true : false,\n            style: {\n              stroke: (edge === null || edge === void 0 ? void 0 : (_edge$style2 = edge.style) === null || _edge$style2 === void 0 ? void 0 : _edge$style2.stroke) == \"green\" ? \"green\" : isInPath ? \"green\" : \"black\"\n            },\n            markerEnd: {\n              type: (edge === null || edge === void 0 ? void 0 : (_edge$style3 = edge.style) === null || _edge$style3 === void 0 ? void 0 : _edge$style3.stroke) == \"green\" || isInPath ? MarkerType.ArrowClosed : null,\n              color: \"green\",\n              width: 20,\n              height: 20\n            }\n          };\n        }));\n        setDestinationNode(node);\n        let informationFl = [...informationFlows];\n\n        // Check if the source-destination pair already exists\n        const isDuplicate = informationFl.some(flow => flow[0].id === sourceNode.id && flow[1].id === node.id);\n\n        // Only add the flow if it doesn't already exist\n        if (!isDuplicate) {\n          informationFl.push([sourceNode, node]);\n          setInformationFlows(informationFl);\n        }\n        //information flow is added here [s]\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid green\"\n          }\n        } : n));\n        setTimeout(resetSelection, 1000);\n        // resetSelection();\n      }\n    }\n  };\n  const showSelectedHolonFlows = () => {\n    if (!selectedNode) {\n      alert(\"No holon selected!\");\n      return;\n    }\n    if (!informationFlows || informationFlows.length === 0) {\n      console.error(\"No information flows available.\");\n      return;\n    }\n\n    // Filter information flows for the selected holon\n    const selectedFlows = informationFlows.filter(([source, destination]) => (source === null || source === void 0 ? void 0 : source.id) === (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.id) || (destination === null || destination === void 0 ? void 0 : destination.id) === (selectedNode === null || selectedNode === void 0 ? void 0 : selectedNode.id));\n    if (!selectedFlows || selectedFlows.length === 0) {\n      console.error(\"No flows found for the selected holon.\");\n      return;\n    }\n\n    // Highlight flows on the graph\n    selectedFlows.forEach(([sourceNode, destinationNode]) => {\n      if (sourceNode && destinationNode) {\n        showOneFlowOnGraph(sourceNode, destinationNode);\n      }\n    });\n\n    // Update nodes and edges with validation\n    setNodes(nds => nds.map(node => selectedFlows.some(([source, destination]) => (source === null || source === void 0 ? void 0 : source.id) === (node === null || node === void 0 ? void 0 : node.id) || (destination === null || destination === void 0 ? void 0 : destination.id) === (node === null || node === void 0 ? void 0 : node.id)) ? node : {\n      ...node,\n      style: {\n        border: \"none\"\n      }\n    }));\n    setEdges(eds => eds.map(edge => {\n      const isInSelectedFlow = selectedFlows.some(([source, destination]) => edge.source === (source === null || source === void 0 ? void 0 : source.id) && edge.target === (destination === null || destination === void 0 ? void 0 : destination.id) || edge.target === (source === null || source === void 0 ? void 0 : source.id) && edge.source === (destination === null || destination === void 0 ? void 0 : destination.id));\n      return {\n        ...edge,\n        animated: isInSelectedFlow,\n        style: {\n          stroke: isInSelectedFlow ? \"green\" : \"black\"\n        },\n        markerEnd: isInSelectedFlow ? {\n          type: MarkerType.ArrowClosed,\n          color: \"green\"\n        } : null\n      };\n    }));\n  };\n  const showInformationFlowOnTheGraphs = () => {\n    // write the code to use the information flows 2d array,\n    // iterate through the information flow 2d array one by one,\n    // read the source node and destination node which will be 1 array, source node is the 0th index element and destination node is 1st index element\n    // the source node color should be blue and destination source node should be green and the edge color will be green and dash animation.\n    informationFlows.forEach(flow => {\n      const [sourceNode, destinationNode] = flow;\n      showOneFlowOnGraph(sourceNode, destinationNode);\n    });\n  };\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\n    // Reset the graph to clear any existing styles\n    // resetGraphs();\n\n    // Update the nodes to show the selected source and destination colors\n    setNodes(nds => nds.map(n => n.id === sourceNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid blue\"\n      }\n    } : n.id === destinationNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid green\"\n      }\n    } : n));\n\n    // Find the path from sourceNode to destinationNode\n    const path = findPath(sourceNode.id, destinationNode.id);\n    if (!path || path.length === 0) {\n      console.error(\"No path found between the selected nodes.\");\n      return;\n    }\n\n    // Update edges with green color, dashed animation, and correct arrow direction\n    setEdges(eds => eds.map(edge => {\n      var _edge$style4, _edge$style5;\n      const isInPath = path.includes(edge.source) && path.includes(edge.target);\n\n      // Determine if the edge is in the forward or backward direction\n      const isForwardDirection = edge.source === path[0] && edge.target === path[1];\n      const isBackwardDirection = edge.target === path[0] && edge.source === path[1];\n\n      // Ensure edge.style and markerEnd are initialized\n      return {\n        ...edge,\n        animated: isInPath ? true : edge.animated,\n        style: {\n          ...edge.style,\n          // Merge existing styles\n          stroke: isInPath ? \"green\" : (_edge$style4 = edge.style) === null || _edge$style4 === void 0 ? void 0 : _edge$style4.stroke,\n          strokeDasharray: isInPath ? \"5,5\" : (_edge$style5 = edge.style) === null || _edge$style5 === void 0 ? void 0 : _edge$style5.strokeDasharray\n        },\n        markerEnd: isInPath ? {\n          type: MarkerType.ArrowClosed,\n          color: \"green\",\n          orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\"\n        } : edge.markerEnd\n      };\n    }));\n  };\n  const resetSelection = () => {\n    setEnableInformationFlow(!enableInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(true);\n      setSourceNode(null);\n      setDestinationNode(null);\n      // setSelectedNode(null);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          border: \"none\"\n        }\n      })));\n      setEdges(eds => eds.map(edge => ({\n        ...edge,\n        animated: false,\n        style: {\n          stroke: \"black\"\n        }\n      })));\n    }\n  };\n  const resetGraphs = () => {\n    setNodes(nds => nds.map(n => ({\n      ...n,\n      style: {\n        border: \"none\"\n      }\n    })));\n    setEdges(eds => eds.map(edge => ({\n      ...edge,\n      animated: false,\n      style: {\n        stroke: \"black\"\n      }\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: '100vw'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-9\",\n      style: {\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-3\",\n        style: {\n          position: 'absolute',\n          top: -88,\n          right: '-23vw'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: resetSelection,\n          children: \"Add Information Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary ml-2\",\n          onClick: exportInformationFlows,\n          children: \"Export Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importInformationFlows,\n          style: {\n            display: \"none\"\n          },\n          id: \"uploadFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 396,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"uploadFile\",\n          className: \"btn btn-secondary ml-2 mt-2\",\n          children: \"Import Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes.map(node => ({\n          ...node,\n          data: {\n            ...node.data,\n            disable: disableAdd\n          }\n        })),\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: handleNodeClick,\n        onPaneClick: () => setSelectedNode(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 408,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), sourceNode && destinationNode == null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Destination Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 9\n    }, this) : \"\", resetFlow & enableInformationFlow ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Source Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-3\",\n      style: {\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mr-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Holon Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 450,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          style: {\n            borderBottom: \"1px solid #ccc\",\n            paddingBottom: \"10px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nameofNode\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 453,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nameofNode\",\n              className: \"form-control\",\n              value: selectedNode.data.label,\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  label: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 454,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 452,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeDescription\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 474,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"nodeDescription\",\n              className: \"form-control\",\n              style: {\n                height: \"200px\",\n                width: \"100%\"\n              },\n              placeholder: \"An example description...\",\n              value: selectedNode.data.description || \"\",\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  description: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 475,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 451,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeInfoFlows\",\n              children: \"Flows Linked to this Holon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 500,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              children: informationFlows.filter(([source, destination]) => source.id === selectedNode.id || destination.id === selectedNode.id).map(([source, destination], index) => /*#__PURE__*/_jsxDEV(\"li\", {\n                children: [source.data.label, \" \\u2192 \", destination.data.label]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 508,\n                columnNumber: 17\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 499,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeInfoFlowsDescription\",\n              children: \"Information Flow Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 515,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              id: \"nodeInfoFlowsDescription\",\n              className: \"form-control\",\n              style: {\n                height: \"100px\",\n                width: \"100%\"\n              },\n              value: informationFlows.length > 0 ? (selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF = selectedInformationFlow.data) === null || _selectedInformationF === void 0 ? void 0 : _selectedInformationF.description) || \"No description available\" : selectedNode.data.description || \"\",\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 516,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 514,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: () => showInformationFlowOnTheGraphs(),\n              children: \"Show All Flows\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 530,\n              columnNumber: 11\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: () => showSelectedHolonFlows(),\n              children: \"Show Selected Holon Flows\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 536,\n              columnNumber: 11\n            }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary mx-1\",\n              onClick: resetGraphs,\n              children: \"Reset Flows\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 543,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 498,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 449,\n        columnNumber: 5\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title\",\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 560,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: () => setIsModalOpen(false),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 566,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 559,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"newNodeLabel\",\n            children: \"New Node Label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 571,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"newNodeLabel\",\n            className: \"form-control\",\n            placeholder: \"New Node Label\",\n            value: newNodeLabel,\n            onChange: e => setNewNodeLabel(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 572,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: () => setIsModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: () => {\n            setNodes(nds => [...nds, {\n              id: `${nds.length + 1}`,\n              type: \"customNode\",\n              data: {\n                label: newNodeLabel\n              },\n              position: {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              }\n            }]);\n            setIsModalOpen(false);\n            setNewNodeLabel(\"\");\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 590,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 582,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 364,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"JdoYFV1TICMQ29sM8XqCJ/1977I=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","jsxDEV","_jsxDEV","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","_selectedInformationF","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","selectedInformationFlow","setSelectedInformationFlow","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","setDisableAdd","resetFlow","setResetFlow","informationFlows","setInformationFlows","onConnect","params","eds","exportInformationFlows","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","importInformationFlows","event","fileReader","FileReader","onload","e","importedFlows","parse","target","result","Array","isArray","console","log","map","find","node","id","alert","error","files","length","readAsText","findPath","sourceId","targetId","visited","Set","queue","path","shift","has","add","filter","edge","source","forEach","nextNode","push","handleNodeClick","nodeData","_informationFlows$fin","n","flow","flowId","infoFlow","nds","style","border","_edge$style","_edge$style2","_edge$style3","isInPath","includes","animated","stroke","markerEnd","type","ArrowClosed","color","width","height","informationFl","isDuplicate","some","setTimeout","resetSelection","showSelectedHolonFlows","selectedFlows","destination","showOneFlowOnGraph","isInSelectedFlow","showInformationFlowOnTheGraphs","_edge$style4","_edge$style5","isForwardDirection","isBackwardDirection","strokeDasharray","orient","resetGraphs","className","display","children","position","top","right","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","htmlFor","data","disable","fitView","onNodeClick","onPaneClick","left","borderLeft","borderBottom","paddingBottom","value","label","placeholder","description","index","readOnly","isOpen","onRequestClose","x","Math","random","y","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd, setDisableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   console.log(sourceNode);\r\n  //   informationFlows.push([sourceNode, destinationNode]);\r\n  //   setSourceNode(null);\r\n  //   console.log(informationFlows);\r\n  // }, [sourceNode]);\r\n\r\n  // / Export the information flows as a JSON file\r\n  const exportInformationFlows = () => {\r\n    const dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(informationFlows));\r\n    const downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\r\n    document.body.appendChild(downloadAnchorNode);\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  };\r\n\r\n  // Import the information flows from a JSON file\r\n  const importInformationFlows = (event) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = (e) => {\r\n      try {\r\n        const importedFlows = JSON.parse(e.target.result);\r\n\r\n        if (Array.isArray(importedFlows)) {\r\n          console.log(importedFlows);\r\n          console.log(informationFlows);\r\n          debugger;\r\n          // Convert the imported flows into nodes and update the state\r\n          setInformationFlows(\r\n            importedFlows.map(([sourceNode, destinationNode]) => {\r\n              return [\r\n                nodes.find((node) => node.id === sourceNode.id) || sourceNode,\r\n                nodes.find((node) => node.id === destinationNode.id) ||\r\n                destinationNode,\r\n              ];\r\n            })\r\n          );\r\n          alert(\"Information Flows loaded successfully.\");\r\n        } else {\r\n          alert(\"Invalid JSON format.\");\r\n        }\r\n      } catch (error) {\r\n        alert(\"Failed to load the JSON file. Please check the file format.\");\r\n      }\r\n    };\r\n\r\n    if (event.target.files.length > 0) {\r\n      fileReader.readAsText(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const findPath = (sourceId, targetId) => {\r\n    const visited = new Set();\r\n    const queue = [[sourceId]];\r\n\r\n    while (queue.length > 0) {\r\n      const path = queue.shift();\r\n      const node = path[path.length - 1];\r\n\r\n      if (node === targetId) {\r\n        return path;\r\n      }\r\n\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        edges\r\n          .filter((edge) => edge.source === node || edge.target === node)\r\n          .forEach((edge) => {\r\n            const nextNode = edge.source === node ? edge.target : edge.source;\r\n            queue.push([...path, nextNode]);\r\n          });\r\n      }\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const handleNodeClick = (event, nodeData) => {\r\n    const id = nodeData.id;\r\n    const node = nodes.find((n) => n.id === id);\r\n    setSelectedNode(node);\r\n    const selectedInformationFlow = informationFlows?.find(flow => flow.find(flowId => flowId?.id == nodeData.id))?.find(infoFlow => infoFlow?.id == nodeData?.id)\r\n    setSelectedInformationFlow(selectedInformationFlow)\r\n\r\n    if (enableInformationFlow) {\r\n      setResetFlow(false);\r\n      if (!sourceNode) {\r\n        setSourceNode(node);\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id ? { ...n, style: { border: \"2px solid blue\" } } : n\r\n          )\r\n        );\r\n      } else if (sourceNode.id !== id) {\r\n        // setDestinationNodes((prevDestinations) => {\r\n        //   if (!prevDestinations.some((dest) => dest.id === node.id)) {\r\n        //     // const newDestinations = [...prevDestinations, node];\r\n        //     // newDestinations.forEach((destination) => {\r\n\r\n        //     // });\r\n        //     return newDestinations;\r\n        //   }\r\n        //   return prevDestinations;\r\n        // });\r\n        const path = findPath(sourceNode.id, node.id);\r\n        setEdges((eds) =>\r\n          eds.map((edge) => {\r\n            console.log(edge);\r\n            const isInPath =\r\n              path.includes(edge.source) && path.includes(edge.target);\r\n            return {\r\n              ...edge,\r\n              animated:\r\n                edge?.style?.stroke == \"green\" || isInPath ? true : false,\r\n              style: {\r\n                stroke:\r\n                  edge?.style?.stroke == \"green\"\r\n                    ? \"green\"\r\n                    : isInPath\r\n                      ? \"green\"\r\n                      : \"black\",\r\n              },\r\n              markerEnd: {\r\n                type:\r\n                  edge?.style?.stroke == \"green\" || isInPath\r\n                    ? MarkerType.ArrowClosed\r\n                    : null,\r\n                color: \"green\",\r\n                width: 20,\r\n                height: 20,\r\n              },\r\n            };\r\n          })\r\n        );\r\n\r\n        setDestinationNode(node);\r\n        let informationFl = [...informationFlows];\r\n\r\n        // Check if the source-destination pair already exists\r\n        const isDuplicate = informationFl.some(\r\n          (flow) => flow[0].id === sourceNode.id && flow[1].id === node.id\r\n        );\r\n\r\n        // Only add the flow if it doesn't already exist\r\n        if (!isDuplicate) {\r\n          informationFl.push([sourceNode, node]);\r\n          setInformationFlows(informationFl);\r\n        }\r\n        //information flow is added here [s]\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id\r\n              ? { ...n, style: { border: \"2px solid green\" } }\r\n              : n\r\n          )\r\n        );\r\n        setTimeout(resetSelection, 1000);\r\n        // resetSelection();\r\n      }\r\n    }\r\n  };\r\n\r\n  const showSelectedHolonFlows = () => {\r\n    if (!selectedNode) {\r\n      alert(\"No holon selected!\");\r\n      return;\r\n    }\r\n  \r\n    if (!informationFlows || informationFlows.length === 0) {\r\n      console.error(\"No information flows available.\");\r\n      return;\r\n    }\r\n  \r\n    // Filter information flows for the selected holon\r\n    const selectedFlows = informationFlows.filter(\r\n      ([source, destination]) =>\r\n        source?.id === selectedNode?.id || destination?.id === selectedNode?.id\r\n    );\r\n  \r\n    if (!selectedFlows || selectedFlows.length === 0) {\r\n      console.error(\"No flows found for the selected holon.\");\r\n      return;\r\n    }\r\n  \r\n    // Highlight flows on the graph\r\n    selectedFlows.forEach(([sourceNode, destinationNode]) => {\r\n      if (sourceNode && destinationNode) {\r\n        showOneFlowOnGraph(sourceNode, destinationNode);\r\n      }\r\n    });\r\n  \r\n    // Update nodes and edges with validation\r\n    setNodes((nds) =>\r\n      nds.map((node) =>\r\n        selectedFlows.some(([source, destination]) => \r\n          source?.id === node?.id || destination?.id === node?.id\r\n        )\r\n          ? node\r\n          : { ...node, style: { border: \"none\" } }\r\n      )\r\n    );\r\n  \r\n    setEdges((eds) =>\r\n      eds.map((edge) => {\r\n        const isInSelectedFlow = selectedFlows.some(\r\n          ([source, destination]) =>\r\n            (edge.source === source?.id && edge.target === destination?.id) ||\r\n            (edge.target === source?.id && edge.source === destination?.id)\r\n        );\r\n  \r\n        return {\r\n          ...edge,\r\n          animated: isInSelectedFlow,\r\n          style: { stroke: isInSelectedFlow ? \"green\" : \"black\" },\r\n          markerEnd: isInSelectedFlow\r\n            ? { type: MarkerType.ArrowClosed, color: \"green\" }\r\n            : null,\r\n        };\r\n      })\r\n    );\r\n  };\r\n  \r\n  \r\n\r\n  const showInformationFlowOnTheGraphs = () => {\r\n    // write the code to use the information flows 2d array,\r\n    // iterate through the information flow 2d array one by one,\r\n    // read the source node and destination node which will be 1 array, source node is the 0th index element and destination node is 1st index element\r\n    // the source node color should be blue and destination source node should be green and the edge color will be green and dash animation.\r\n    informationFlows.forEach((flow) => {\r\n      const [sourceNode, destinationNode] = flow;\r\n      showOneFlowOnGraph(sourceNode, destinationNode);\r\n    });\r\n  };\r\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\r\n    // Reset the graph to clear any existing styles\r\n    // resetGraphs();\r\n\r\n    // Update the nodes to show the selected source and destination colors\r\n    setNodes((nds) =>\r\n      nds.map((n) =>\r\n        n.id === sourceNode.id\r\n          ? { ...n, style: { border: \"2px solid blue\" } }\r\n          : n.id === destinationNode.id\r\n            ? { ...n, style: { border: \"2px solid green\" } }\r\n            : n\r\n      )\r\n    );\r\n\r\n    // Find the path from sourceNode to destinationNode\r\n    const path = findPath(sourceNode.id, destinationNode.id);\r\n\r\n    if (!path || path.length === 0) {\r\n      console.error(\"No path found between the selected nodes.\");\r\n      return;\r\n    }\r\n\r\n    // Update edges with green color, dashed animation, and correct arrow direction\r\n    setEdges((eds) =>\r\n      eds.map((edge) => {\r\n        const isInPath =\r\n          path.includes(edge.source) && path.includes(edge.target);\r\n\r\n        // Determine if the edge is in the forward or backward direction\r\n        const isForwardDirection =\r\n          edge.source === path[0] && edge.target === path[1];\r\n        const isBackwardDirection =\r\n          edge.target === path[0] && edge.source === path[1];\r\n\r\n        // Ensure edge.style and markerEnd are initialized\r\n        return {\r\n          ...edge,\r\n          animated: isInPath ? true : edge.animated,\r\n          style: {\r\n            ...edge.style, // Merge existing styles\r\n            stroke: isInPath ? \"green\" : edge.style?.stroke,\r\n            strokeDasharray: isInPath ? \"5,5\" : edge.style?.strokeDasharray,\r\n          },\r\n          markerEnd: isInPath\r\n            ? {\r\n              type: MarkerType.ArrowClosed,\r\n              color: \"green\",\r\n              orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\",\r\n            }\r\n            : edge.markerEnd,\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  const resetSelection = () => {\r\n    setEnableInformationFlow(!enableInformationFlow);\r\n    if (enableInformationFlow) {\r\n      setResetFlow(true);\r\n      setSourceNode(null);\r\n      setDestinationNode(null);\r\n      // setSelectedNode(null);\r\n      setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n      setEdges((eds) =>\r\n        eds.map((edge) => ({\r\n          ...edge,\r\n          animated: false,\r\n          style: { stroke: \"black\" },\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const resetGraphs = () => {\r\n    setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n    setEdges((eds) =>\r\n      eds.map((edge) => ({\r\n        ...edge,\r\n        animated: false,\r\n        style: { stroke: \"black\" },\r\n      }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"container-fluid\"\r\n      style={{ display: \"flex\", height: \"100vh\", width: '100vw', }}\r\n    >\r\n      <div className=\"col-9\" style={{ height: \"100%\" }}>\r\n        <div className=\"d-flex justify-content-between align-items-center mb-3\" style={{ position: 'absolute', top: -88, right: '-23vw' }}>\r\n          {/* <h3>Add Node</h3> */}\r\n          <button\r\n            className={\r\n              \"btn btn-success\"\r\n            }\r\n            onClick={resetSelection}\r\n          >\r\n            Add Information Flow\r\n          </button>\r\n          {/* {informationFlows.length > 0 && (\r\n            <button\r\n              className={\"btn btn-success\"}\r\n              onClick={showInformationFlowOnTheGraphs}\r\n            >\r\n              Show Information Flows\r\n            </button>\r\n          )} */}\r\n          {informationFlows.length > 0 && (\r\n            <button\r\n              className={\"btn btn-primary ml-2\"}\r\n              onClick={exportInformationFlows}\r\n            >\r\n              Export Information Flows\r\n            </button>\r\n          )}\r\n\r\n          <input\r\n            type=\"file\"\r\n            accept=\".json\"\r\n            onChange={importInformationFlows}\r\n            style={{ display: \"none\", }}\r\n            id=\"uploadFile\"\r\n          />\r\n          <label htmlFor=\"uploadFile\" className=\"btn btn-secondary ml-2 mt-2\">\r\n            Import Information Flows\r\n          </label>\r\n        </div>\r\n\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes.map((node) => ({\r\n            ...node,\r\n            data: {\r\n              ...node.data,\r\n              disable: disableAdd,\r\n            },\r\n          }))}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={handleNodeClick}\r\n          onPaneClick={() => setSelectedNode(null)}\r\n        />\r\n      </div>\r\n      {sourceNode && destinationNode == null ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">\r\n            Select the Destination Node\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {resetFlow & enableInformationFlow ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">Select the Source Node</div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div\r\n  className=\"col-3\"\r\n  style={{ padding: \"10px\", borderLeft: \"1px solid #ccc\" }}\r\n>\r\n  {selectedNode ? (\r\n    <div className=\"mr-3\">\r\n      <h3>Holon Details</h3>\r\n      <div className=\"mb-4\" style={{ borderBottom: \"1px solid #ccc\", paddingBottom: \"10px\" }}>\r\n        <div className=\"form-group mb-3\">\r\n          <label htmlFor=\"nameofNode\">Name</label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"nameofNode\"\r\n            className=\"form-control\"\r\n            value={selectedNode.data.label}\r\n            onChange={(e) =>\r\n              setNodes((nds) =>\r\n                nds.map((node) =>\r\n                  node.id === selectedNode.id\r\n                    ? {\r\n                        ...node,\r\n                        data: { ...node.data, label: e.target.value },\r\n                      }\r\n                    : node\r\n                )\r\n              )\r\n            }\r\n          />\r\n        </div>\r\n        <div className=\"form-group mb-3\">\r\n          <label htmlFor=\"nodeDescription\">Description</label>\r\n          <textarea\r\n            id=\"nodeDescription\"\r\n            className=\"form-control\"\r\n            style={{ height: \"200px\", width: \"100%\" }}\r\n            placeholder=\"An example description...\"\r\n            value={selectedNode.data.description || \"\"}\r\n            onChange={(e) =>\r\n              setNodes((nds) =>\r\n                nds.map((node) =>\r\n                  node.id === selectedNode.id\r\n                    ? {\r\n                        ...node,\r\n                        data: { ...node.data, description: e.target.value },\r\n                      }\r\n                    : node\r\n                )\r\n              )\r\n            }\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <h3>Information Flows</h3>\r\n      <div>\r\n        <div className=\"form-group mb-3\">\r\n          <label htmlFor=\"nodeInfoFlows\">Flows Linked to this Holon</label>\r\n          <ul>\r\n            {informationFlows\r\n              .filter(\r\n                ([source, destination]) =>\r\n                  source.id === selectedNode.id || destination.id === selectedNode.id\r\n              )\r\n              .map(([source, destination], index) => (\r\n                <li key={index}>\r\n                  {source.data.label} → {destination.data.label}\r\n                </li>\r\n              ))}\r\n          </ul>\r\n        </div>\r\n        <div className=\"form-group mb-3\">\r\n          <label htmlFor=\"nodeInfoFlowsDescription\">Information Flow Description</label>\r\n          <textarea\r\n            type=\"text\"\r\n            id=\"nodeInfoFlowsDescription\"\r\n            className=\"form-control\"\r\n            style={{ height: \"100px\", width: \"100%\" }}\r\n            value={\r\n              informationFlows.length > 0\r\n                ? selectedInformationFlow?.data?.description || \"No description available\"\r\n                : selectedNode.data.description || \"\"\r\n            }\r\n            readOnly\r\n          />\r\n        </div>\r\n        <div>\r\n          <button\r\n            className={\"btn btn-success mx-1\"}\r\n            onClick={() => showInformationFlowOnTheGraphs()}\r\n          >\r\n            Show All Flows\r\n          </button>\r\n          <button\r\n            className={\"btn btn-success mx-1\"}\r\n            onClick={() => showSelectedHolonFlows()}\r\n          >\r\n            Show Selected Holon Flows\r\n          </button>\r\n          {informationFlows.length > 0 && (\r\n            <button\r\n              className={\"btn btn-primary mx-1\"}\r\n              onClick={resetGraphs}\r\n            >\r\n              Reset Flows\r\n            </button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  ) : (\r\n    <div>No Selection</div>\r\n  )}\r\n</div>\r\n\r\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title\">Add Node</h5>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            <span>&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <div className=\"form-group mb-3\">\r\n            <label htmlFor=\"newNodeLabel\">New Node Label</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"newNodeLabel\"\r\n              className=\"form-control\"\r\n              placeholder=\"New Node Label\"\r\n              value={newNodeLabel}\r\n              onChange={(e) => setNewNodeLabel(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            Close\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              setNodes((nds) => [\r\n                ...nds,\r\n                {\r\n                  id: `${nds.length + 1}`,\r\n                  type: \"customNode\",\r\n                  data: { label: newNodeLabel },\r\n                  position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n                },\r\n              ]);\r\n              setIsModalOpen(false);\r\n              setNewNodeLabel(\"\");\r\n            }}\r\n          >\r\n            Add Node\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}