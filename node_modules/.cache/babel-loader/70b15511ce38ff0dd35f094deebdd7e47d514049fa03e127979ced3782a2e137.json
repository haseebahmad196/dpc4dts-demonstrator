{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [informationFlows, setInformationFlows] = useState([]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n\n  // useEffect(() => {\n  //   console.log(sourceNode);\n  //   informationFlows.push([sourceNode, destinationNode]);\n  //   setSourceNode(null);\n  //   console.log(informationFlows);\n  // }, [sourceNode]);\n\n  // / Export the information flows as a JSON file\n  const exportInformationFlows = () => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(informationFlows));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n\n  // Import the information flows from a JSON file\n  const importInformationFlows = event => {\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      try {\n        const importedFlows = JSON.parse(e.target.result);\n        if (Array.isArray(importedFlows)) {\n          console.log(importedFlows);\n          console.log(informationFlows);\n          debugger;\n          // Convert the imported flows into nodes and update the state\n          setInformationFlows(importedFlows.map(([sourceNode, destinationNode]) => {\n            return [nodes.find(node => node.id === sourceNode.id) || sourceNode, nodes.find(node => node.id === destinationNode.id) || destinationNode];\n          }));\n          alert(\"Information Flows loaded successfully.\");\n        } else {\n          alert(\"Invalid JSON format.\");\n        }\n      } catch (error) {\n        alert(\"Failed to load the JSON file. Please check the file format.\");\n      }\n    };\n    if (event.target.files.length > 0) {\n      fileReader.readAsText(event.target.files[0]);\n    }\n  };\n  const findPath = (sourceId, targetId) => {\n    const visited = new Set();\n    const queue = [[sourceId]];\n    while (queue.length > 0) {\n      const path = queue.shift();\n      const node = path[path.length - 1];\n      if (node === targetId) {\n        return path;\n      }\n      if (!visited.has(node)) {\n        visited.add(node);\n        edges.filter(edge => edge.source === node || edge.target === node).forEach(edge => {\n          const nextNode = edge.source === node ? edge.target : edge.source;\n          queue.push([...path, nextNode]);\n        });\n      }\n    }\n    return [];\n  };\n  const handleNodeClick = (event, nodeData) => {\n    const id = nodeData.id;\n    const node = nodes.find(n => n.id === id);\n    setSelectedNode(node);\n    if (enableInformationFlow) {\n      setResetFlow(false);\n      if (!sourceNode) {\n        setSourceNode(node);\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid blue\"\n          }\n        } : n));\n      } else if (sourceNode.id !== id) {\n        // setDestinationNodes((prevDestinations) => {\n        //   if (!prevDestinations.some((dest) => dest.id === node.id)) {\n        //     // const newDestinations = [...prevDestinations, node];\n        //     // newDestinations.forEach((destination) => {\n\n        //     // });\n        //     return newDestinations;\n        //   }\n        //   return prevDestinations;\n        // });\n        const path = findPath(sourceNode.id, node.id);\n        setEdges(eds => eds.map(edge => {\n          var _edge$style, _edge$style2, _edge$style3;\n          console.log(edge);\n          const isInPath = path.includes(edge.source) && path.includes(edge.target);\n          return {\n            ...edge,\n            animated: (edge === null || edge === void 0 ? void 0 : (_edge$style = edge.style) === null || _edge$style === void 0 ? void 0 : _edge$style.stroke) == \"green\" || isInPath ? true : false,\n            style: {\n              stroke: (edge === null || edge === void 0 ? void 0 : (_edge$style2 = edge.style) === null || _edge$style2 === void 0 ? void 0 : _edge$style2.stroke) == \"green\" ? \"green\" : isInPath ? \"green\" : \"black\"\n            },\n            markerEnd: {\n              type: (edge === null || edge === void 0 ? void 0 : (_edge$style3 = edge.style) === null || _edge$style3 === void 0 ? void 0 : _edge$style3.stroke) == \"green\" || isInPath ? MarkerType.ArrowClosed : null,\n              color: \"green\",\n              width: 20,\n              height: 20\n            }\n          };\n        }));\n        setDestinationNode(node);\n        let informationFl = [...informationFlows];\n\n        // Check if the source-destination pair already exists\n        const isDuplicate = informationFl.some(flow => flow[0].id === sourceNode.id && flow[1].id === node.id);\n\n        // Only add the flow if it doesn't already exist\n        if (!isDuplicate) {\n          informationFl.push([sourceNode, node]);\n          setInformationFlows(informationFl);\n        }\n        //information flow is added here [s]\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid green\"\n          }\n        } : n));\n        setTimeout(resetSelection, 1000);\n        // resetSelection();\n      }\n    }\n  };\n  const showInformationFlowOnTheGraphs = () => {\n    // write the code to use the information flows 2d array,\n    // iterate through the information flow 2d array one by one,\n    // read the source node and destination node which will be 1 array, source node is the 0th index element and destination node is 1st index element\n    // the source node color should be blue and destination source node should be green and the edge color will be green and dash animation.\n    informationFlows.forEach(flow => {\n      const [sourceNode, destinationNode] = flow;\n      showOneFlowOnGraph(sourceNode, destinationNode);\n    });\n  };\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\n    // Reset the graph to clear any existing styles\n    // resetGraphs();\n\n    // Update the nodes to show the selected source and destination colors\n    setNodes(nds => nds.map(n => n.id === sourceNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid blue\"\n      }\n    } : n.id === destinationNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid green\"\n      }\n    } : n));\n\n    // Find the path from sourceNode to destinationNode\n    const path = findPath(sourceNode.id, destinationNode.id);\n    if (!path || path.length === 0) {\n      console.error(\"No path found between the selected nodes.\");\n      return;\n    }\n\n    // Update edges with green color, dashed animation, and correct arrow direction\n    setEdges(eds => eds.map(edge => {\n      var _edge$style4, _edge$style5;\n      const isInPath = path.includes(edge.source) && path.includes(edge.target);\n\n      // Determine if the edge is in the forward or backward direction\n      const isForwardDirection = edge.source === path[0] && edge.target === path[1];\n      const isBackwardDirection = edge.target === path[0] && edge.source === path[1];\n\n      // Ensure edge.style and markerEnd are initialized\n      return {\n        ...edge,\n        animated: isInPath ? true : edge.animated,\n        style: {\n          ...edge.style,\n          // Merge existing styles\n          stroke: isInPath ? \"green\" : (_edge$style4 = edge.style) === null || _edge$style4 === void 0 ? void 0 : _edge$style4.stroke,\n          strokeDasharray: isInPath ? \"5,5\" : (_edge$style5 = edge.style) === null || _edge$style5 === void 0 ? void 0 : _edge$style5.strokeDasharray\n        },\n        markerEnd: isInPath ? {\n          type: MarkerType.ArrowClosed,\n          color: \"green\",\n          orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\"\n        } : edge.markerEnd\n      };\n    }));\n  };\n  const resetSelection = () => {\n    setEnableInformationFlow(!enableInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(true);\n      setSourceNode(null);\n      setDestinationNode(null);\n      setSelectedNode(null);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          border: \"none\"\n        }\n      })));\n      setEdges(eds => eds.map(edge => ({\n        ...edge,\n        animated: false,\n        style: {\n          stroke: \"black\"\n        }\n      })));\n    }\n  };\n  const resetGraphs = () => {\n    setNodes(nds => nds.map(n => ({\n      ...n,\n      style: {\n        border: \"none\"\n      }\n    })));\n    setEdges(eds => eds.map(edge => ({\n      ...edge,\n      animated: false,\n      style: {\n        stroke: \"black\"\n      }\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-9\",\n      style: {\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: !enableInformationFlow ? \"btn btn-danger\" : \"btn btn-success\",\n          onClick: resetSelection,\n          children: \"Add Information Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 11\n        }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success ml-2\",\n          onClick: exportInformationFlows,\n          children: \"Export Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importInformationFlows,\n          style: {\n            display: \"none\"\n          },\n          id: \"uploadFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"uploadFile\",\n          className: \"btn btn-primary ml-2\",\n          children: \"Import Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes.map(node => ({\n          ...node,\n          data: {\n            ...node.data,\n            disable: disableAdd\n          }\n        })),\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: handleNodeClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this), sourceNode && destinationNode == null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Destination Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }, this) : \"\", resetFlow & enableInformationFlow ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Source Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-3\",\n      style: {\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Holon Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nameofNode\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"nameofNode\",\n            className: \"form-control\",\n            value: selectedNode.data.label,\n            onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n              ...node,\n              data: {\n                ...node.data,\n                label: e.target.value\n              }\n            } : node))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 387,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nodeDescription\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"nodeDescription\",\n            className: \"form-control\",\n            style: {\n              height: \"200px\",\n              width: \"400px\"\n            },\n            placeholder: \"An example description...\",\n            value: selectedNode.data.description || \"\",\n            onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n              ...node,\n              data: {\n                ...node.data,\n                description: e.target.value\n              }\n            } : node))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 408,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 406,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nodeInfoFlows\",\n            children: \"Information Flows\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"nodeInfoFlows\",\n            className: \"form-control\",\n            value: selectedNode.data.label,\n            readOnly: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 428,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: enableInformationFlow && /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"lead\",\n            children: \"Selected Information Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 443,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 441,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => showInformationFlowOnTheGraphs(),\n            children: \"Show All Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 447,\n            columnNumber: 15\n          }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-primary mx-2\",\n            onClick: resetGraphs,\n            children: \"Reset Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 454,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 446,\n          columnNumber: 13\n        }, this), informationFlows.map(nodePair => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-3 alert alert-success\",\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 465,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n              children: \"Show Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 464,\n            columnNumber: 17\n          }, this);\n        })]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title\",\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: () => setIsModalOpen(false),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"newNodeLabel\",\n            children: \"New Node Label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 507,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"newNodeLabel\",\n            className: \"form-control\",\n            placeholder: \"New Node Label\",\n            value: newNodeLabel,\n            onChange: e => setNewNodeLabel(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 508,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 506,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: () => setIsModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 519,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: () => {\n            setNodes(nds => [...nds, {\n              id: `${nds.length + 1}`,\n              type: \"customNode\",\n              data: {\n                label: newNodeLabel\n              },\n              position: {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              }\n            }]);\n            setIsModalOpen(false);\n            setNewNodeLabel(\"\");\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 526,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 518,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"2auUFt5vECNAIJ6IxhZjWmTCX+c=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","jsxDEV","_jsxDEV","Fragment","_Fragment","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","setDisableAdd","resetFlow","setResetFlow","informationFlows","setInformationFlows","onConnect","params","eds","exportInformationFlows","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","importInformationFlows","event","fileReader","FileReader","onload","e","importedFlows","parse","target","result","Array","isArray","console","log","map","find","node","id","alert","error","files","length","readAsText","findPath","sourceId","targetId","visited","Set","queue","path","shift","has","add","filter","edge","source","forEach","nextNode","push","handleNodeClick","nodeData","n","nds","style","border","_edge$style","_edge$style2","_edge$style3","isInPath","includes","animated","stroke","markerEnd","type","ArrowClosed","color","width","height","informationFl","isDuplicate","some","flow","setTimeout","resetSelection","showInformationFlowOnTheGraphs","showOneFlowOnGraph","_edge$style4","_edge$style5","isForwardDirection","isBackwardDirection","strokeDasharray","orient","resetGraphs","className","display","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","htmlFor","data","disable","fitView","onNodeClick","position","top","left","borderLeft","value","label","placeholder","description","readOnly","nodePair","isOpen","onRequestClose","x","Math","random","y","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd, setDisableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n\r\n  // useEffect(() => {\r\n  //   console.log(sourceNode);\r\n  //   informationFlows.push([sourceNode, destinationNode]);\r\n  //   setSourceNode(null);\r\n  //   console.log(informationFlows);\r\n  // }, [sourceNode]);\r\n\r\n  // / Export the information flows as a JSON file\r\n  const exportInformationFlows = () => {\r\n    const dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(informationFlows));\r\n    const downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\r\n    document.body.appendChild(downloadAnchorNode);\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  };\r\n\r\n  // Import the information flows from a JSON file\r\n  const importInformationFlows = (event) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = (e) => {\r\n      try {\r\n        const importedFlows = JSON.parse(e.target.result);\r\n\r\n        if (Array.isArray(importedFlows)) {\r\n          console.log(importedFlows);\r\n          console.log(informationFlows);\r\n          debugger;\r\n          // Convert the imported flows into nodes and update the state\r\n          setInformationFlows(\r\n            importedFlows.map(([sourceNode, destinationNode]) => {\r\n              return [\r\n                nodes.find((node) => node.id === sourceNode.id) || sourceNode,\r\n                nodes.find((node) => node.id === destinationNode.id) ||\r\n                  destinationNode,\r\n              ];\r\n            })\r\n          );\r\n          alert(\"Information Flows loaded successfully.\");\r\n        } else {\r\n          alert(\"Invalid JSON format.\");\r\n        }\r\n      } catch (error) {\r\n        alert(\"Failed to load the JSON file. Please check the file format.\");\r\n      }\r\n    };\r\n\r\n    if (event.target.files.length > 0) {\r\n      fileReader.readAsText(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const findPath = (sourceId, targetId) => {\r\n    const visited = new Set();\r\n    const queue = [[sourceId]];\r\n\r\n    while (queue.length > 0) {\r\n      const path = queue.shift();\r\n      const node = path[path.length - 1];\r\n\r\n      if (node === targetId) {\r\n        return path;\r\n      }\r\n\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        edges\r\n          .filter((edge) => edge.source === node || edge.target === node)\r\n          .forEach((edge) => {\r\n            const nextNode = edge.source === node ? edge.target : edge.source;\r\n            queue.push([...path, nextNode]);\r\n          });\r\n      }\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const handleNodeClick = (event, nodeData) => {\r\n    const id = nodeData.id;\r\n    const node = nodes.find((n) => n.id === id);\r\n    setSelectedNode(node);\r\n\r\n    if (enableInformationFlow) {\r\n      setResetFlow(false);\r\n      if (!sourceNode) {\r\n        setSourceNode(node);\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id ? { ...n, style: { border: \"2px solid blue\" } } : n\r\n          )\r\n        );\r\n      } else if (sourceNode.id !== id) {\r\n        // setDestinationNodes((prevDestinations) => {\r\n        //   if (!prevDestinations.some((dest) => dest.id === node.id)) {\r\n        //     // const newDestinations = [...prevDestinations, node];\r\n        //     // newDestinations.forEach((destination) => {\r\n\r\n        //     // });\r\n        //     return newDestinations;\r\n        //   }\r\n        //   return prevDestinations;\r\n        // });\r\n        const path = findPath(sourceNode.id, node.id);\r\n        setEdges((eds) =>\r\n          eds.map((edge) => {\r\n            console.log(edge);\r\n            const isInPath =\r\n              path.includes(edge.source) && path.includes(edge.target);\r\n            return {\r\n              ...edge,\r\n              animated:\r\n                edge?.style?.stroke == \"green\" || isInPath ? true : false,\r\n              style: {\r\n                stroke:\r\n                  edge?.style?.stroke == \"green\"\r\n                    ? \"green\"\r\n                    : isInPath\r\n                    ? \"green\"\r\n                    : \"black\",\r\n              },\r\n              markerEnd: {\r\n                type:\r\n                  edge?.style?.stroke == \"green\" || isInPath\r\n                    ? MarkerType.ArrowClosed\r\n                    : null,\r\n                color: \"green\",\r\n                width: 20,\r\n                height: 20,\r\n              },\r\n            };\r\n          })\r\n        );\r\n\r\n        setDestinationNode(node);\r\n        let informationFl = [...informationFlows];\r\n\r\n        // Check if the source-destination pair already exists\r\n        const isDuplicate = informationFl.some(\r\n          (flow) => flow[0].id === sourceNode.id && flow[1].id === node.id\r\n        );\r\n\r\n        // Only add the flow if it doesn't already exist\r\n        if (!isDuplicate) {\r\n          informationFl.push([sourceNode, node]);\r\n          setInformationFlows(informationFl);\r\n        }\r\n        //information flow is added here [s]\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id\r\n              ? { ...n, style: { border: \"2px solid green\" } }\r\n              : n\r\n          )\r\n        );\r\n        setTimeout(resetSelection, 1000);\r\n        // resetSelection();\r\n      }\r\n    }\r\n  };\r\n\r\n  const showInformationFlowOnTheGraphs = () => {\r\n    // write the code to use the information flows 2d array,\r\n    // iterate through the information flow 2d array one by one,\r\n    // read the source node and destination node which will be 1 array, source node is the 0th index element and destination node is 1st index element\r\n    // the source node color should be blue and destination source node should be green and the edge color will be green and dash animation.\r\n    informationFlows.forEach((flow) => {\r\n      const [sourceNode, destinationNode] = flow;\r\n      showOneFlowOnGraph(sourceNode, destinationNode);\r\n    });\r\n  };\r\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\r\n    // Reset the graph to clear any existing styles\r\n    // resetGraphs();\r\n\r\n    // Update the nodes to show the selected source and destination colors\r\n    setNodes((nds) =>\r\n      nds.map((n) =>\r\n        n.id === sourceNode.id\r\n          ? { ...n, style: { border: \"2px solid blue\" } }\r\n          : n.id === destinationNode.id\r\n          ? { ...n, style: { border: \"2px solid green\" } }\r\n          : n\r\n      )\r\n    );\r\n\r\n    // Find the path from sourceNode to destinationNode\r\n    const path = findPath(sourceNode.id, destinationNode.id);\r\n\r\n    if (!path || path.length === 0) {\r\n      console.error(\"No path found between the selected nodes.\");\r\n      return;\r\n    }\r\n\r\n    // Update edges with green color, dashed animation, and correct arrow direction\r\n    setEdges((eds) =>\r\n      eds.map((edge) => {\r\n        const isInPath =\r\n          path.includes(edge.source) && path.includes(edge.target);\r\n\r\n        // Determine if the edge is in the forward or backward direction\r\n        const isForwardDirection =\r\n          edge.source === path[0] && edge.target === path[1];\r\n        const isBackwardDirection =\r\n          edge.target === path[0] && edge.source === path[1];\r\n\r\n        // Ensure edge.style and markerEnd are initialized\r\n        return {\r\n          ...edge,\r\n          animated: isInPath ? true : edge.animated,\r\n          style: {\r\n            ...edge.style, // Merge existing styles\r\n            stroke: isInPath ? \"green\" : edge.style?.stroke,\r\n            strokeDasharray: isInPath ? \"5,5\" : edge.style?.strokeDasharray,\r\n          },\r\n          markerEnd: isInPath\r\n            ? {\r\n                type: MarkerType.ArrowClosed,\r\n                color: \"green\",\r\n                orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\",\r\n              }\r\n            : edge.markerEnd,\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  const resetSelection = () => {\r\n    setEnableInformationFlow(!enableInformationFlow);\r\n    if (enableInformationFlow) {\r\n      setResetFlow(true);\r\n      setSourceNode(null);\r\n      setDestinationNode(null);\r\n      setSelectedNode(null);\r\n      setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n      setEdges((eds) =>\r\n        eds.map((edge) => ({\r\n          ...edge,\r\n          animated: false,\r\n          style: { stroke: \"black\" },\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const resetGraphs = () => {\r\n    setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n    setEdges((eds) =>\r\n      eds.map((edge) => ({\r\n        ...edge,\r\n        animated: false,\r\n        style: { stroke: \"black\" },\r\n      }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"container-fluid\"\r\n      style={{ display: \"flex\", height: \"100vh\" }}\r\n    >\r\n      <div className=\"col-9\" style={{ height: \"100%\" }}>\r\n        <div className=\"d-flex justify-content-between align-items-center mb-3\">\r\n         \r\n          <button\r\n            className={\r\n              !enableInformationFlow ? \"btn btn-danger\" : \"btn btn-success\"\r\n            }\r\n            onClick={resetSelection}\r\n          >\r\n            Add Information Flow\r\n          </button>\r\n          {/* {informationFlows.length > 0 && (\r\n            <button\r\n              className={\"btn btn-success\"}\r\n              onClick={showInformationFlowOnTheGraphs}\r\n            >\r\n              Show Information Flows\r\n            </button>\r\n          )} */}\r\n          {informationFlows.length > 0 && (\r\n            <button\r\n              className={\"btn btn-success ml-2\"}\r\n              onClick={exportInformationFlows}\r\n            >\r\n              Export Information Flows\r\n            </button>\r\n          )}\r\n\r\n          <input\r\n            type=\"file\"\r\n            accept=\".json\"\r\n            onChange={importInformationFlows}\r\n            style={{ display: \"none\" }}\r\n            id=\"uploadFile\"\r\n          />\r\n          <label htmlFor=\"uploadFile\" className=\"btn btn-primary ml-2\">\r\n            Import Information Flows\r\n          </label>\r\n        </div>\r\n\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes.map((node) => ({\r\n            ...node,\r\n            data: {\r\n              ...node.data,\r\n              disable: disableAdd,\r\n            },\r\n          }))}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={handleNodeClick}\r\n        />\r\n      </div>\r\n      {sourceNode && destinationNode == null ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">\r\n            Select the Destination Node\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {resetFlow & enableInformationFlow ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">Select the Source Node</div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div\r\n        className=\"col-3\"\r\n        style={{ padding: \"10px\", borderLeft: \"1px solid #ccc\" }}\r\n      >\r\n        {selectedNode ? (\r\n          <>\r\n            <h3>Holon Details</h3>\r\n            <div className=\"form-group mb-3\">\r\n              <label htmlFor=\"nameofNode\">Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"nameofNode\"\r\n                className=\"form-control\"\r\n                value={selectedNode.data.label}\r\n                onChange={(e) =>\r\n                  setNodes((nds) =>\r\n                    nds.map((node) =>\r\n                      node.id === selectedNode.id\r\n                        ? {\r\n                            ...node,\r\n                            data: { ...node.data, label: e.target.value },\r\n                          }\r\n                        : node\r\n                    )\r\n                  )\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label htmlFor=\"nodeDescription\">Description</label>\r\n              <textarea\r\n                id=\"nodeDescription\"\r\n                className=\"form-control\"\r\n                style={{ height: \"200px\", width: \"400px\" }}\r\n                placeholder=\"An example description...\"\r\n                value={selectedNode.data.description || \"\"}\r\n                onChange={(e) =>\r\n                  setNodes((nds) =>\r\n                    nds.map((node) =>\r\n                      node.id === selectedNode.id\r\n                        ? {\r\n                            ...node,\r\n                            data: { ...node.data, description: e.target.value },\r\n                          }\r\n                        : node\r\n                    )\r\n                  )\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label htmlFor=\"nodeInfoFlows\">Information Flows</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"nodeInfoFlows\"\r\n                className=\"form-control\"\r\n                value={selectedNode.data.label}\r\n                readOnly\r\n              />\r\n            </div>\r\n            {/* <div className=\"mt-3 alert alert-info\">\r\n              <strong>Node Selected:</strong> {selectedNode.data.label}\r\n            </div> */}\r\n            <div>\r\n              {enableInformationFlow && (\r\n                <p className=\"lead\">Selected Information Flow</p>\r\n              )}\r\n            </div>\r\n            <div>\r\n              <button\r\n                className={\"btn btn-success\"}\r\n                onClick={() => showInformationFlowOnTheGraphs()}\r\n              >\r\n                Show All Flow\r\n              </button>\r\n              {informationFlows.length > 0 && (\r\n                <button\r\n                  className={\"btn btn-primary mx-2\"}\r\n                  onClick={resetGraphs}\r\n                >\r\n                  Reset Flow\r\n                </button>\r\n              )}\r\n            </div>\r\n            {informationFlows.map((nodePair) => {\r\n              return (\r\n                <div className=\"mt-3 alert alert-success\">\r\n                  <strong>\r\n                    {nodePair[0].data.label} {\"-->\"} {nodePair[1].data.label}\r\n                  </strong>\r\n                  <button\r\n                    className={\"btn btn-success\"}\r\n                    onClick={() => showOneFlowOnGraph(nodePair[0], nodePair[1])}\r\n                  >\r\n                    Show Flow\r\n                  </button>\r\n                </div>\r\n              );\r\n            })}\r\n            {/* {enableInformationFlow &&\r\n              sourceNode &&\r\n              destinationNode &&\r\n              destinationNode.map((element) => {\r\n                return (\r\n                  <div className=\"mt-3 alert alert-success\">\r\n                    <strong>\r\n                      {sourceNode.data.label} {\"-->\"} {element.data.label}\r\n                    </strong>\r\n                  </div>\r\n                );\r\n              })} */}\r\n          </>\r\n        ) : (\r\n          <div>No Selection</div>\r\n        )}\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title\">Add Node</h5>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            <span>&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <div className=\"form-group mb-3\">\r\n            <label htmlFor=\"newNodeLabel\">New Node Label</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"newNodeLabel\"\r\n              className=\"form-control\"\r\n              placeholder=\"New Node Label\"\r\n              value={newNodeLabel}\r\n              onChange={(e) => setNewNodeLabel(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            Close\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              setNodes((nds) => [\r\n                ...nds,\r\n                {\r\n                  id: `${nds.length + 1}`,\r\n                  type: \"customNode\",\r\n                  data: { label: newNodeLabel },\r\n                  position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n                },\r\n              ]);\r\n              setIsModalOpen(false);\r\n              setNewNodeLabel(\"\");\r\n            }}\r\n          >\r\n            Add Node\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}