{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\ReactFlow\\\\src\\\\CommunicationPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Tree, TreeNode } from 'react-organizational-chart';\nimport Button from 'react-bootstrap/Button';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Alert = ({\n  message\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"alert\",\n    children: message\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 9\n  }, this);\n};\n_c = Alert;\nconst Holon = ({\n  node,\n  onSelectNode,\n  isSelected,\n  setSelectedHolonIds,\n  hoveredHolonId,\n  setHoveredHolonId,\n  showAddSign,\n  setShowAddSign,\n  toggleAddMessage,\n  handleAddClick,\n  connections\n}) => {\n  const handleNodeClick = () => {\n    onSelectNode(node);\n    setShowAddSign(true);\n    toggleAddMessage(false); // This line toggles the add message display off when a node is clicked.\n  };\n  const handleMouseEnter = () => {\n    setHoveredHolonId(node.id);\n  };\n  const handleMouseLeave = () => {\n    setHoveredHolonId(null);\n  };\n  const selected = isSelected(node);\n  const isHovered = hoveredHolonId === node.id && !selected;\n  return /*#__PURE__*/_jsxDEV(TreeNode, {\n    label: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `tree-label ${selected ? 'selected' : ''} ${isHovered ? 'hovered' : ''}`,\n      onClick: handleNodeClick,\n      onMouseEnter: handleMouseEnter,\n      onMouseLeave: handleMouseLeave,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"name\",\n        children: node.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this), showAddSign && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"buttons\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"primary\",\n          size: \"sm\",\n          onClick: e => handleAddClick(e, node),\n          children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n            icon: faPlus\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 17\n    }, this),\n    children: node.children && node.children.map(child => /*#__PURE__*/_jsxDEV(Holon, {\n      node: child,\n      onSelectNode: onSelectNode,\n      isSelected: isSelected,\n      setSelectedHolonIds: setSelectedHolonIds,\n      hoveredHolonId: hoveredHolonId,\n      setHoveredHolonId: setHoveredHolonId,\n      showAddSign: showAddSign,\n      setShowAddSign: setShowAddSign,\n      toggleAddMessage: toggleAddMessage,\n      handleAddClick: handleAddClick,\n      connections: connections\n    }, child.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 21\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n};\n_c2 = Holon;\nconst CommunicationPage = () => {\n  _s();\n  const initialNodes = {\n    id: 'root',\n    name: 'Information System',\n    description: 'An organized combination of people, hardware, software, communication networks, and data resources that collects, transforms, and disseminates information in an organization.',\n    children: [{\n      id: 'Stakeholder',\n      name: 'Stakeholder',\n      description: 'Refers to any individual, group, or organization that has an interest or concern in the system, its development, implementation, or outcomes.',\n      children: []\n    }, {\n      id: 'Infrastructure',\n      name: 'Infrastructure',\n      description: 'Refers to the fundamental physical and organizational structures, facilities, and services required for the operation of an information system.',\n      children: []\n    }]\n  };\n  const [nodes, setNodes] = useState(initialNodes);\n  const [selectedHolonIds, setSelectedHolonIds] = useState([]);\n  const [hoveredHolonId, setHoveredHolonId] = useState(null);\n  const [showAddSign, setShowAddSign] = useState(true);\n  const [showAddMessage, setShowAddMessage] = useState(false);\n  const [connections, setConnections] = useState([]);\n  const toggleAddMessage = value => {\n    setShowAddMessage(value);\n  };\n  const handleSelectNode = node => {\n    setSelectedHolonIds([node.id]);\n    setShowAddSign(true);\n    setShowAddMessage(false); // This line hides the message when any node is selected.\n  };\n  const isSelected = node => selectedHolonIds.includes(node.id);\n  const handleAddClick = (e, node) => {\n    e.stopPropagation();\n    if (!connections.some(conn => conn.from === node)) {\n      toggleAddMessage(true);\n      setShowAddSign(false);\n    } else {\n      toggleAddMessage(false);\n      setShowAddSign(true);\n    }\n    setConnections([...connections, {\n      from: node\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"content-area\",\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        lineWidth: \"2px\",\n        lineColor: \"blue\",\n        lineBorderRadius: \"5px\",\n        lineStyle: \"dashed\",\n        children: /*#__PURE__*/_jsxDEV(Holon, {\n          node: nodes,\n          onSelectNode: handleSelectNode,\n          isSelected: isSelected,\n          setSelectedHolonIds: setSelectedHolonIds,\n          hoveredHolonId: hoveredHolonId,\n          setHoveredHolonId: setHoveredHolonId,\n          showAddSign: showAddSign,\n          setShowAddSign: setShowAddSign,\n          toggleAddMessage: toggleAddMessage,\n          handleAddClick: handleAddClick,\n          connections: connections\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this), showAddMessage && /*#__PURE__*/_jsxDEV(Alert, {\n      message: \"Click another holon to add an information flow.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 32\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n_s(CommunicationPage, \"8xIIhXK0UAr4DUEERk2PeKV6KtY=\");\n_c3 = CommunicationPage;\nexport default CommunicationPage;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Alert\");\n$RefreshReg$(_c2, \"Holon\");\n$RefreshReg$(_c3, \"CommunicationPage\");","map":{"version":3,"names":["React","useState","Tree","TreeNode","Button","FontAwesomeIcon","faPlus","jsxDEV","_jsxDEV","Alert","message","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","Holon","node","onSelectNode","isSelected","setSelectedHolonIds","hoveredHolonId","setHoveredHolonId","showAddSign","setShowAddSign","toggleAddMessage","handleAddClick","connections","handleNodeClick","handleMouseEnter","id","handleMouseLeave","selected","isHovered","label","onClick","onMouseEnter","onMouseLeave","name","variant","size","e","icon","map","child","_c2","CommunicationPage","_s","initialNodes","description","nodes","setNodes","selectedHolonIds","showAddMessage","setShowAddMessage","setConnections","value","handleSelectNode","includes","stopPropagation","some","conn","from","lineWidth","lineColor","lineBorderRadius","lineStyle","_c3","$RefreshReg$"],"sources":["C:/Em1/ReactFlow/src/CommunicationPage.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Tree, TreeNode } from 'react-organizational-chart';\r\nimport Button from 'react-bootstrap/Button';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport './styles.css';\r\n\r\nconst Alert = ({ message }) => {\r\n    return (\r\n        <div className=\"alert\">\r\n            {message}\r\n        </div>\r\n    );\r\n};\r\n\r\nconst Holon = ({\r\n    node,\r\n    onSelectNode,\r\n    isSelected,\r\n    setSelectedHolonIds,\r\n    hoveredHolonId,\r\n    setHoveredHolonId,\r\n    showAddSign,\r\n    setShowAddSign,\r\n    toggleAddMessage,\r\n    handleAddClick,\r\n    connections\r\n}) => {\r\n    const handleNodeClick = () => {\r\n        onSelectNode(node);\r\n        setShowAddSign(true);\r\n        toggleAddMessage(false); // This line toggles the add message display off when a node is clicked.\r\n    };\r\n\r\n    const handleMouseEnter = () => {\r\n        setHoveredHolonId(node.id);\r\n    };\r\n\r\n    const handleMouseLeave = () => {\r\n        setHoveredHolonId(null);\r\n    };\r\n\r\n    const selected = isSelected(node);\r\n    const isHovered = hoveredHolonId === node.id && !selected;\r\n\r\n    return (\r\n        <TreeNode\r\n            label={\r\n                <div\r\n                    className={`tree-label ${selected ? 'selected' : ''} ${isHovered ? 'hovered' : ''}`}\r\n                    onClick={handleNodeClick}\r\n                    onMouseEnter={handleMouseEnter}\r\n                    onMouseLeave={handleMouseLeave}\r\n                >\r\n                    <div className=\"name\">{node.name}</div>\r\n                    {showAddSign && (\r\n                        <div className=\"buttons\">\r\n                            <Button variant=\"primary\" size=\"sm\" onClick={(e) => handleAddClick(e, node)}>\r\n                                <FontAwesomeIcon icon={faPlus} />\r\n                            </Button>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n            }\r\n        >\r\n            {node.children &&\r\n                node.children.map((child) => (\r\n                    <Holon\r\n                        key={child.id}\r\n                        node={child}\r\n                        onSelectNode={onSelectNode}\r\n                        isSelected={isSelected}\r\n                        setSelectedHolonIds={setSelectedHolonIds}\r\n                        hoveredHolonId={hoveredHolonId}\r\n                        setHoveredHolonId={setHoveredHolonId}\r\n                        showAddSign={showAddSign}\r\n                        setShowAddSign={setShowAddSign}\r\n                        toggleAddMessage={toggleAddMessage}\r\n                        handleAddClick={handleAddClick}\r\n                        connections={connections}\r\n                    />\r\n                ))}\r\n        </TreeNode>\r\n    );\r\n};\r\n\r\nconst CommunicationPage = () => {\r\n    const initialNodes = {\r\n        id: 'root',\r\n        name: 'Information System',\r\n        description: 'An organized combination of people, hardware, software, communication networks, and data resources that collects, transforms, and disseminates information in an organization.',\r\n        children: [\r\n            {\r\n                id: 'Stakeholder',\r\n                name: 'Stakeholder',\r\n                description: 'Refers to any individual, group, or organization that has an interest or concern in the system, its development, implementation, or outcomes.',\r\n                children: [],\r\n            },\r\n            {\r\n                id: 'Infrastructure',\r\n                name: 'Infrastructure',\r\n                description: 'Refers to the fundamental physical and organizational structures, facilities, and services required for the operation of an information system.',\r\n                children: [],\r\n            }\r\n        ],\r\n    };\r\n\r\n    const [nodes, setNodes] = useState(initialNodes);\r\n    const [selectedHolonIds, setSelectedHolonIds] = useState([]);\r\n    const [hoveredHolonId, setHoveredHolonId] = useState(null);\r\n    const [showAddSign, setShowAddSign] = useState(true);\r\n    const [showAddMessage, setShowAddMessage] = useState(false);\r\n    const [connections, setConnections] = useState([]);\r\n\r\n    const toggleAddMessage = (value) => {\r\n        setShowAddMessage(value);\r\n    };\r\n\r\n    const handleSelectNode = (node) => {\r\n        setSelectedHolonIds([node.id]);\r\n        setShowAddSign(true);\r\n        setShowAddMessage(false); // This line hides the message when any node is selected.\r\n    };\r\n\r\n    const isSelected = (node) => selectedHolonIds.includes(node.id);\r\n\r\n    const handleAddClick = (e, node) => {\r\n        e.stopPropagation();\r\n        if (!connections.some(conn => conn.from === node)) {\r\n            toggleAddMessage(true);\r\n            setShowAddSign(false);\r\n        } else {\r\n            toggleAddMessage(false);\r\n            setShowAddSign(true);\r\n        }\r\n        setConnections([...connections, { from: node }]);\r\n    };\r\n\r\n    return (\r\n        <div className=\"app-container\">\r\n            <div className=\"content-area\">\r\n                <Tree lineWidth={\"2px\"} lineColor={\"blue\"} lineBorderRadius={\"5px\"} lineStyle={\"dashed\"}>\r\n                    <Holon\r\n                        node={nodes}\r\n                        onSelectNode={handleSelectNode}\r\n                        isSelected={isSelected}\r\n                        setSelectedHolonIds={setSelectedHolonIds}\r\n                        hoveredHolonId={hoveredHolonId}\r\n                        setHoveredHolonId={setHoveredHolonId}\r\n                        showAddSign={showAddSign}\r\n                        setShowAddSign={setShowAddSign}\r\n                        toggleAddMessage={toggleAddMessage}\r\n                        handleAddClick={handleAddClick}\r\n                        connections={connections}\r\n                    />\r\n                </Tree>\r\n            </div>\r\n            {showAddMessage && <Alert message=\"Click another holon to add an information flow.\" />}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CommunicationPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}