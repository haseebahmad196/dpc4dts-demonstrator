{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState(null);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [informationFlows, setInformationFlows] = useState([]);\n  const [filteredFlows, setFilteredFlows] = useState([]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  useEffect(() => {\n    if (selectedNode) {\n      // Show only flows related to the selected holon\n      setFilteredFlows(informationFlows.filter(([source, destination]) => source.id === selectedNode.id || destination.id === selectedNode.id));\n    } else {\n      // Show all flows\n      setFilteredFlows(informationFlows);\n    }\n  }, [selectedNode, informationFlows]);\n  const exportInformationFlows = () => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(informationFlows));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n  const importInformationFlows = event => {\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      try {\n        const importedFlows = JSON.parse(e.target.result);\n        if (Array.isArray(importedFlows)) {\n          setInformationFlows(importedFlows.map(([sourceNode, destinationNode]) => [nodes.find(node => node.id === sourceNode.id) || sourceNode, nodes.find(node => node.id === destinationNode.id) || destinationNode]));\n          alert(\"Information Flows loaded successfully.\");\n        } else {\n          alert(\"Invalid JSON format.\");\n        }\n      } catch (error) {\n        alert(\"Failed to load the JSON file. Please check the file format.\");\n      }\n    };\n    if (event.target.files.length > 0) {\n      fileReader.readAsText(event.target.files[0]);\n    }\n  };\n  const findPath = (sourceId, targetId) => {\n    const visited = new Set();\n    const queue = [[sourceId]];\n    while (queue.length > 0) {\n      const path = queue.shift();\n      const node = path[path.length - 1];\n      if (node === targetId) {\n        return path;\n      }\n      if (!visited.has(node)) {\n        visited.add(node);\n        edges.filter(edge => edge.source === node || edge.target === node).forEach(edge => {\n          const nextNode = edge.source === node ? edge.target : edge.source;\n          queue.push([...path, nextNode]);\n        });\n      }\n    }\n    return [];\n  };\n  const showInformationFlowOnTheGraphs = () => {\n    informationFlows.forEach(([sourceNode, destinationNode]) => showOneFlowOnGraph(sourceNode, destinationNode));\n  };\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\n    setNodes(nds => nds.map(n => n.id === sourceNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid blue\"\n      }\n    } : n.id === destinationNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid green\"\n      }\n    } : n));\n    const path = findPath(sourceNode.id, destinationNode.id);\n    setEdges(eds => eds.map(edge => ({\n      ...edge,\n      animated: path.includes(edge.source) && path.includes(edge.target),\n      style: {\n        stroke: path.includes(edge.source) && path.includes(edge.target) ? \"green\" : \"black\",\n        strokeDasharray: path.includes(edge.source) && path.includes(edge.target) ? \"5,5\" : undefined\n      },\n      markerEnd: path.includes(edge.source) && path.includes(edge.target) ? {\n        type: MarkerType.ArrowClosed,\n        color: \"green\"\n      } : null\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-9\",\n      children: /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        onNodeClick: (event, nodeData) => setSelectedNode(nodeData)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: showInformationFlowOnTheGraphs,\n        children: \"All Flows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: () => setFilteredFlows(filteredFlows),\n        children: \"Selected Holon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 9\n      }, this), filteredFlows.map(([source, destination]) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3\",\n        children: [source.data.label, \" \\u2192 \", destination.data.label]\n      }, `${source.id}-${destination.id}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 159,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"BpMZzYe45OzBgV3OrHboooOBIMc=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","jsxDEV","_jsxDEV","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","selectedInformationFlow","setSelectedInformationFlow","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","setDisableAdd","resetFlow","setResetFlow","informationFlows","setInformationFlows","filteredFlows","setFilteredFlows","onConnect","params","eds","filter","source","destination","id","exportInformationFlows","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","importInformationFlows","event","fileReader","FileReader","onload","e","importedFlows","parse","target","result","Array","isArray","map","find","node","alert","error","files","length","readAsText","findPath","sourceId","targetId","visited","Set","queue","path","shift","has","add","edge","forEach","nextNode","push","showInformationFlowOnTheGraphs","showOneFlowOnGraph","nds","n","style","border","animated","includes","stroke","strokeDasharray","undefined","markerEnd","type","ArrowClosed","color","className","display","height","children","fitView","onNodeClick","nodeData","fileName","_jsxFileName","lineNumber","columnNumber","onClick","data","label","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState(null);\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd, setDisableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n  const [filteredFlows, setFilteredFlows] = useState([]);\r\n\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n  useEffect(() => {\r\n    if (selectedNode) {\r\n      // Show only flows related to the selected holon\r\n      setFilteredFlows(\r\n        informationFlows.filter(\r\n          ([source, destination]) =>\r\n            source.id === selectedNode.id || destination.id === selectedNode.id\r\n        )\r\n      );\r\n    } else {\r\n      // Show all flows\r\n      setFilteredFlows(informationFlows);\r\n    }\r\n  }, [selectedNode, informationFlows]);\r\n\r\n  const exportInformationFlows = () => {\r\n    const dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(informationFlows));\r\n    const downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\r\n    document.body.appendChild(downloadAnchorNode);\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  };\r\n\r\n  const importInformationFlows = (event) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = (e) => {\r\n      try {\r\n        const importedFlows = JSON.parse(e.target.result);\r\n        if (Array.isArray(importedFlows)) {\r\n          setInformationFlows(\r\n            importedFlows.map(([sourceNode, destinationNode]) => [\r\n              nodes.find((node) => node.id === sourceNode.id) || sourceNode,\r\n              nodes.find((node) => node.id === destinationNode.id) ||\r\n                destinationNode,\r\n            ])\r\n          );\r\n          alert(\"Information Flows loaded successfully.\");\r\n        } else {\r\n          alert(\"Invalid JSON format.\");\r\n        }\r\n      } catch (error) {\r\n        alert(\"Failed to load the JSON file. Please check the file format.\");\r\n      }\r\n    };\r\n\r\n    if (event.target.files.length > 0) {\r\n      fileReader.readAsText(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const findPath = (sourceId, targetId) => {\r\n    const visited = new Set();\r\n    const queue = [[sourceId]];\r\n\r\n    while (queue.length > 0) {\r\n      const path = queue.shift();\r\n      const node = path[path.length - 1];\r\n\r\n      if (node === targetId) {\r\n        return path;\r\n      }\r\n\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        edges\r\n          .filter((edge) => edge.source === node || edge.target === node)\r\n          .forEach((edge) => {\r\n            const nextNode = edge.source === node ? edge.target : edge.source;\r\n            queue.push([...path, nextNode]);\r\n          });\r\n      }\r\n    }\r\n    return [];\r\n  };\r\n  const showInformationFlowOnTheGraphs = () => {\r\n    informationFlows.forEach(([sourceNode, destinationNode]) =>\r\n      showOneFlowOnGraph(sourceNode, destinationNode)\r\n    );\r\n  };\r\n\r\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\r\n    setNodes((nds) =>\r\n      nds.map((n) =>\r\n        n.id === sourceNode.id\r\n          ? { ...n, style: { border: \"2px solid blue\" } }\r\n          : n.id === destinationNode.id\r\n          ? { ...n, style: { border: \"2px solid green\" } }\r\n          : n\r\n      )\r\n    );\r\n\r\n    const path = findPath(sourceNode.id, destinationNode.id);\r\n\r\n    setEdges((eds) =>\r\n      eds.map((edge) => ({\r\n        ...edge,\r\n        animated: path.includes(edge.source) && path.includes(edge.target),\r\n        style: {\r\n          stroke: path.includes(edge.source) && path.includes(edge.target)\r\n            ? \"green\"\r\n            : \"black\",\r\n          strokeDasharray: path.includes(edge.source) &&\r\n          path.includes(edge.target)\r\n            ? \"5,5\"\r\n            : undefined,\r\n        },\r\n        markerEnd: path.includes(edge.source) && path.includes(edge.target)\r\n          ? { type: MarkerType.ArrowClosed, color: \"green\" }\r\n          : null,\r\n      }))\r\n    );\r\n  };\r\n  return (\r\n    <div className=\"container-fluid\" style={{ display: \"flex\", height: \"100vh\" }}>\r\n      <div className=\"col-9\">\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          onNodeClick={(event, nodeData) => setSelectedNode(nodeData)}\r\n        />\r\n      </div>\r\n      <div className=\"col-3\">\r\n        <button className=\"btn btn-success\" onClick={showInformationFlowOnTheGraphs}>\r\n          All Flows\r\n        </button>\r\n        <button\r\n          className=\"btn btn-success\"\r\n          onClick={() => setFilteredFlows(filteredFlows)}\r\n        >\r\n          Selected Holon\r\n        </button>\r\n        {filteredFlows.map(([source, destination]) => (\r\n          <div key={`${source.id}-${destination.id}`} className=\"mt-3\">\r\n            {source.data.label} → {destination.data.label}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}