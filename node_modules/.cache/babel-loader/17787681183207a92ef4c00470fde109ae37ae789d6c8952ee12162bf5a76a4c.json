{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [informationFlows, setInformationFlows] = useState([]);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n\n  // Calculate levels for each node based on hierarchy\n  const calculateNodeLevels = nodes => {\n    const nodeLevels = {};\n    const rootNodes = nodes.filter(node => !node.parentId);\n    const traverseLevels = (currentNode, level = 0) => {\n      nodeLevels[currentNode.id] = level;\n      const children = nodes.filter(node => node.parentId === currentNode.id);\n      children.forEach(child => traverseLevels(child, level + 1));\n    };\n    rootNodes.forEach(node => traverseLevels(node));\n    return nodeLevels;\n  };\n  const [nodeLevels, setNodeLevels] = useState(() => calculateNodeLevels(props.nodes));\n\n  // Export and Import functionality\n  const exportInformationFlows = () => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(informationFlows));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n  const importInformationFlows = event => {\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      try {\n        const importedFlows = JSON.parse(e.target.result);\n        if (Array.isArray(importedFlows)) {\n          setInformationFlows(importedFlows.map(([sourceNode, destinationNode]) => {\n            return [nodes.find(node => node.id === sourceNode.id) || sourceNode, nodes.find(node => node.id === destinationNode.id) || destinationNode];\n          }));\n          alert(\"Information Flows loaded successfully.\");\n        } else {\n          alert(\"Invalid JSON format.\");\n        }\n      } catch (error) {\n        alert(\"Failed to load the JSON file. Please check the file format.\");\n      }\n    };\n    if (event.target.files.length > 0) {\n      fileReader.readAsText(event.target.files[0]);\n    }\n  };\n  const findPath = (sourceId, targetId) => {\n    const visited = new Set();\n    const queue = [[sourceId]];\n    while (queue.length > 0) {\n      const path = queue.shift();\n      const node = path[path.length - 1];\n      if (node === targetId) {\n        return path;\n      }\n      if (!visited.has(node)) {\n        visited.add(node);\n        edges.filter(edge => edge.source === node || edge.target === node).forEach(edge => {\n          const nextNode = edge.source === node ? edge.target : edge.source;\n          queue.push([...path, nextNode]);\n        });\n      }\n    }\n    return [];\n  };\n  const handleNodeClick = (event, nodeData) => {\n    const id = nodeData.id;\n    const node = nodes.find(n => n.id === id);\n    setSelectedNode(node);\n    if (enableInformationFlow) {\n      setResetFlow(false);\n      if (!sourceNode) {\n        setSourceNode(node);\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid blue\"\n          }\n        } : n));\n      } else if (sourceNode.id !== id) {\n        const path = findPath(sourceNode.id, node.id);\n        setEdges(eds => eds.map(edge => {\n          const isInPath = path.includes(edge.source) && path.includes(edge.target);\n          return {\n            ...edge,\n            animated: isInPath,\n            style: {\n              stroke: isInPath ? \"green\" : \"black\"\n            },\n            markerEnd: isInPath ? {\n              type: MarkerType.ArrowClosed,\n              color: \"green\"\n            } : null\n          };\n        }));\n        setDestinationNode(node);\n        const isDuplicate = informationFlows.some(flow => flow[0].id === sourceNode.id && flow[1].id === node.id);\n        if (!isDuplicate) {\n          setInformationFlows([...informationFlows, [sourceNode, node]]);\n        }\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid green\"\n          }\n        } : n));\n        setTimeout(resetSelection, 1000);\n      }\n    }\n  };\n  const showInformationFlowOnTheGraphs = () => {\n    informationFlows.forEach(flow => {\n      const [sourceNode, destinationNode] = flow;\n      if (nodeLevels[sourceNode.id] === nodeLevels[destinationNode.id]) {\n        showOneFlowOnGraph(sourceNode, destinationNode);\n      }\n    });\n  };\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\n    setNodes(nds => nds.map(n => n.id === sourceNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid blue\"\n      }\n    } : n.id === destinationNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid green\"\n      }\n    } : n));\n    const path = findPath(sourceNode.id, destinationNode.id);\n    setEdges(eds => eds.map(edge => {\n      var _edge$style;\n      const isInPath = path.includes(edge.source) && path.includes(edge.target);\n      return {\n        ...edge,\n        animated: isInPath,\n        style: {\n          stroke: isInPath ? \"green\" : (_edge$style = edge.style) === null || _edge$style === void 0 ? void 0 : _edge$style.stroke,\n          strokeDasharray: isInPath ? \"5,5\" : undefined\n        },\n        markerEnd: isInPath ? {\n          type: MarkerType.ArrowClosed,\n          color: \"green\"\n        } : null\n      };\n    }));\n  };\n  const resetSelection = () => {\n    setEnableInformationFlow(!enableInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(true);\n      setSourceNode(null);\n      setDestinationNode(null);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          border: \"none\"\n        }\n      })));\n      setEdges(eds => eds.map(edge => ({\n        ...edge,\n        animated: false,\n        style: {\n          stroke: \"black\"\n        }\n      })));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-9\",\n      style: {\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success\",\n        onClick: resetSelection,\n        children: \"Add Information Flow\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary ml-2\",\n        onClick: exportInformationFlows,\n        children: \"Export Information Flows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \".json\",\n        onChange: importInformationFlows,\n        style: {\n          display: \"none\"\n        },\n        id: \"uploadFile\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"uploadFile\",\n        className: \"btn btn-secondary ml-2 mt-2\",\n        children: \"Import Information Flows\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: handleNodeClick,\n        onPaneClick: () => setSelectedNode(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-3\",\n      style: {\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Node Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"form-control\",\n          value: selectedNode.data.label,\n          readOnly: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success mt-3\",\n          onClick: showInformationFlowOnTheGraphs,\n          children: \"Show Same Level Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 220,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"8NF9EKyJs3zTylRg4FIk8pcz46M=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","jsxDEV","_jsxDEV","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","setDisableAdd","resetFlow","setResetFlow","informationFlows","setInformationFlows","onConnect","params","eds","calculateNodeLevels","nodeLevels","rootNodes","filter","node","parentId","traverseLevels","currentNode","level","id","children","forEach","child","setNodeLevels","exportInformationFlows","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","importInformationFlows","event","fileReader","FileReader","onload","e","importedFlows","parse","target","result","Array","isArray","map","find","alert","error","files","length","readAsText","findPath","sourceId","targetId","visited","Set","queue","path","shift","has","add","edge","source","nextNode","push","handleNodeClick","nodeData","n","nds","style","border","isInPath","includes","animated","stroke","markerEnd","type","ArrowClosed","color","isDuplicate","some","flow","setTimeout","resetSelection","showInformationFlowOnTheGraphs","showOneFlowOnGraph","_edge$style","strokeDasharray","undefined","className","display","height","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","htmlFor","fitView","width","onNodeClick","onPaneClick","borderLeft","value","data","label","readOnly","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd, setDisableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n\r\n  // Calculate levels for each node based on hierarchy\r\n  const calculateNodeLevels = (nodes) => {\r\n    const nodeLevels = {};\r\n    const rootNodes = nodes.filter((node) => !node.parentId);\r\n\r\n    const traverseLevels = (currentNode, level = 0) => {\r\n      nodeLevels[currentNode.id] = level;\r\n      const children = nodes.filter((node) => node.parentId === currentNode.id);\r\n      children.forEach((child) => traverseLevels(child, level + 1));\r\n    };\r\n\r\n    rootNodes.forEach((node) => traverseLevels(node));\r\n    return nodeLevels;\r\n  };\r\n\r\n  const [nodeLevels, setNodeLevels] = useState(() => calculateNodeLevels(props.nodes));\r\n\r\n  // Export and Import functionality\r\n  const exportInformationFlows = () => {\r\n    const dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(informationFlows));\r\n    const downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\r\n    document.body.appendChild(downloadAnchorNode);\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  };\r\n\r\n  const importInformationFlows = (event) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = (e) => {\r\n      try {\r\n        const importedFlows = JSON.parse(e.target.result);\r\n\r\n        if (Array.isArray(importedFlows)) {\r\n          setInformationFlows(\r\n            importedFlows.map(([sourceNode, destinationNode]) => {\r\n              return [\r\n                nodes.find((node) => node.id === sourceNode.id) || sourceNode,\r\n                nodes.find((node) => node.id === destinationNode.id) || destinationNode,\r\n              ];\r\n            })\r\n          );\r\n          alert(\"Information Flows loaded successfully.\");\r\n        } else {\r\n          alert(\"Invalid JSON format.\");\r\n        }\r\n      } catch (error) {\r\n        alert(\"Failed to load the JSON file. Please check the file format.\");\r\n      }\r\n    };\r\n\r\n    if (event.target.files.length > 0) {\r\n      fileReader.readAsText(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const findPath = (sourceId, targetId) => {\r\n    const visited = new Set();\r\n    const queue = [[sourceId]];\r\n\r\n    while (queue.length > 0) {\r\n      const path = queue.shift();\r\n      const node = path[path.length - 1];\r\n\r\n      if (node === targetId) {\r\n        return path;\r\n      }\r\n\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        edges\r\n          .filter((edge) => edge.source === node || edge.target === node)\r\n          .forEach((edge) => {\r\n            const nextNode = edge.source === node ? edge.target : edge.source;\r\n            queue.push([...path, nextNode]);\r\n          });\r\n      }\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const handleNodeClick = (event, nodeData) => {\r\n    const id = nodeData.id;\r\n    const node = nodes.find((n) => n.id === id);\r\n    setSelectedNode(node);\r\n\r\n    if (enableInformationFlow) {\r\n      setResetFlow(false);\r\n      if (!sourceNode) {\r\n        setSourceNode(node);\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id ? { ...n, style: { border: \"2px solid blue\" } } : n\r\n          )\r\n        );\r\n      } else if (sourceNode.id !== id) {\r\n        const path = findPath(sourceNode.id, node.id);\r\n        setEdges((eds) =>\r\n          eds.map((edge) => {\r\n            const isInPath = path.includes(edge.source) && path.includes(edge.target);\r\n            return {\r\n              ...edge,\r\n              animated: isInPath,\r\n              style: { stroke: isInPath ? \"green\" : \"black\" },\r\n              markerEnd: isInPath\r\n                ? { type: MarkerType.ArrowClosed, color: \"green\" }\r\n                : null,\r\n            };\r\n          })\r\n        );\r\n\r\n        setDestinationNode(node);\r\n        const isDuplicate = informationFlows.some(\r\n          (flow) => flow[0].id === sourceNode.id && flow[1].id === node.id\r\n        );\r\n        if (!isDuplicate) {\r\n          setInformationFlows([...informationFlows, [sourceNode, node]]);\r\n        }\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id\r\n              ? { ...n, style: { border: \"2px solid green\" } }\r\n              : n\r\n          )\r\n        );\r\n        setTimeout(resetSelection, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const showInformationFlowOnTheGraphs = () => {\r\n    informationFlows.forEach((flow) => {\r\n      const [sourceNode, destinationNode] = flow;\r\n      if (nodeLevels[sourceNode.id] === nodeLevels[destinationNode.id]) {\r\n        showOneFlowOnGraph(sourceNode, destinationNode);\r\n      }\r\n    });\r\n  };\r\n\r\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\r\n    setNodes((nds) =>\r\n      nds.map((n) =>\r\n        n.id === sourceNode.id\r\n          ? { ...n, style: { border: \"2px solid blue\" } }\r\n          : n.id === destinationNode.id\r\n          ? { ...n, style: { border: \"2px solid green\" } }\r\n          : n\r\n      )\r\n    );\r\n\r\n    const path = findPath(sourceNode.id, destinationNode.id);\r\n    setEdges((eds) =>\r\n      eds.map((edge) => {\r\n        const isInPath = path.includes(edge.source) && path.includes(edge.target);\r\n        return {\r\n          ...edge,\r\n          animated: isInPath,\r\n          style: { stroke: isInPath ? \"green\" : edge.style?.stroke, strokeDasharray: isInPath ? \"5,5\" : undefined },\r\n          markerEnd: isInPath ? { type: MarkerType.ArrowClosed, color: \"green\" } : null,\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  const resetSelection = () => {\r\n    setEnableInformationFlow(!enableInformationFlow);\r\n    if (enableInformationFlow) {\r\n      setResetFlow(true);\r\n      setSourceNode(null);\r\n      setDestinationNode(null);\r\n      setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n      setEdges((eds) => eds.map((edge) => ({ ...edge, animated: false, style: { stroke: \"black\" } })));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\" style={{ display: \"flex\", height: \"100vh\" }}>\r\n      <div className=\"col-9\" style={{ height: \"100%\" }}>\r\n        <button className=\"btn btn-success\" onClick={resetSelection}>\r\n          Add Information Flow\r\n        </button>\r\n        {informationFlows.length > 0 && (\r\n          <button className=\"btn btn-primary ml-2\" onClick={exportInformationFlows}>\r\n            Export Information Flows\r\n          </button>\r\n        )}\r\n        <input\r\n          type=\"file\"\r\n          accept=\".json\"\r\n          onChange={importInformationFlows}\r\n          style={{ display: \"none\" }}\r\n          id=\"uploadFile\"\r\n        />\r\n        <label htmlFor=\"uploadFile\" className=\"btn btn-secondary ml-2 mt-2\">\r\n          Import Information Flows\r\n        </label>\r\n\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={handleNodeClick}\r\n          onPaneClick={() => setSelectedNode(null)}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"col-3\" style={{ padding: \"10px\", borderLeft: \"1px solid #ccc\" }}>\r\n        {selectedNode ? (\r\n          <div>\r\n            <h3>Node Details</h3>\r\n            <input\r\n              type=\"text\"\r\n              className=\"form-control\"\r\n              value={selectedNode.data.label}\r\n              readOnly\r\n            />\r\n            <button className=\"btn btn-success mt-3\" onClick={showInformationFlowOnTheGraphs}>\r\n              Show Same Level Flows\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div>No Selection</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}