{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\"; // used for the Add Node modal\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\n// Import Bootstrap Modal and Button for the error alert\nimport { Modal as BootstrapModal, Button as BootstrapButton } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  var _selectedInformationF;\n  // React Flow state variables\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [informationFlows, setInformationFlows] = useState([]);\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\n  // New state to show/hide the sameâ€‘level error alert\n  const [showLevelError, setShowLevelError] = useState(false);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n\n  // Updated nodeTypes: Wrap the custom node with a clickable container.\n  // This ensures that clicking anywhere in the node triggers the onNodeClick event.\n  const nodeTypes = {\n    customNode: nodeProps => /*#__PURE__*/_jsxDEV(\"div\", {\n      onClick: e => nodeProps.onClick && nodeProps.onClick(e, nodeProps),\n      children: /*#__PURE__*/_jsxDEV(CustomNodeFlow, {\n        ...nodeProps,\n        setNodes: setNodes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  };\n\n  // Export the information flows as a JSON file\n  const exportInformationFlows = () => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(informationFlows));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n\n  // Import the information flows from a JSON file\n  const importInformationFlows = event => {\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      try {\n        const importedFlows = JSON.parse(e.target.result);\n        if (Array.isArray(importedFlows)) {\n          setInformationFlows(importedFlows.map(([src, dest]) => {\n            return [nodes.find(node => node.id === src.id) || src, nodes.find(node => node.id === dest.id) || dest];\n          }));\n          alert(\"Information Flows loaded successfully.\");\n        } else {\n          alert(\"Invalid JSON format.\");\n        }\n      } catch (error) {\n        alert(\"Failed to load the JSON file. Please check the file format.\");\n      }\n    };\n    if (event.target.files.length > 0) {\n      fileReader.readAsText(event.target.files[0]);\n    }\n  };\n  const findPath = (sourceId, targetId) => {\n    const visited = new Set();\n    const queue = [[sourceId]];\n    while (queue.length > 0) {\n      const path = queue.shift();\n      const node = path[path.length - 1];\n      if (node === targetId) {\n        return path;\n      }\n      if (!visited.has(node)) {\n        visited.add(node);\n        edges.filter(edge => edge.source === node || edge.target === node).forEach(edge => {\n          const nextNode = edge.source === node ? edge.target : edge.source;\n          queue.push([...path, nextNode]);\n        });\n      }\n    }\n    return [];\n  };\n  const handleNodeClick = (event, nodeData) => {\n    var _informationFlows$fin;\n    const clickedNode = nodes.find(n => n.id === nodeData.id) || nodeData;\n    setSelectedNode(clickedNode);\n    const selectedInfoFlow = informationFlows === null || informationFlows === void 0 ? void 0 : (_informationFlows$fin = informationFlows.find(flow => flow.find(item => (item === null || item === void 0 ? void 0 : item.id) === nodeData.id))) === null || _informationFlows$fin === void 0 ? void 0 : _informationFlows$fin.find(info => (info === null || info === void 0 ? void 0 : info.id) === nodeData.id);\n    setSelectedInformationFlow(selectedInfoFlow);\n    if (enableInformationFlow) {\n      setResetFlow(false);\n      if (!sourceNode) {\n        // First click sets the source node\n        setSourceNode(clickedNode);\n        setNodes(nds => nds.map(n => n.id === clickedNode.id ? {\n          ...n,\n          style: {\n            border: \"2px solid blue\"\n          }\n        } : n));\n      } else if (sourceNode.id !== clickedNode.id) {\n        // Check that source and destination nodes are on the same level (y position within tolerance)\n        const levelTolerance = 15;\n        if (Math.abs(sourceNode.position.y - clickedNode.position.y) > levelTolerance) {\n          setShowLevelError(true);\n          return;\n        }\n        const path = findPath(sourceNode.id, clickedNode.id);\n        setEdges(eds => eds.map(edge => {\n          var _edge$style, _edge$style2, _edge$style3;\n          const isInPath = path.includes(edge.source) && path.includes(edge.target);\n          return {\n            ...edge,\n            animated: isInPath || (edge === null || edge === void 0 ? void 0 : (_edge$style = edge.style) === null || _edge$style === void 0 ? void 0 : _edge$style.stroke) === \"green\",\n            style: {\n              stroke: (edge === null || edge === void 0 ? void 0 : (_edge$style2 = edge.style) === null || _edge$style2 === void 0 ? void 0 : _edge$style2.stroke) === \"green\" ? \"green\" : isInPath ? \"green\" : \"black\"\n            },\n            markerEnd: {\n              type: (edge === null || edge === void 0 ? void 0 : (_edge$style3 = edge.style) === null || _edge$style3 === void 0 ? void 0 : _edge$style3.stroke) === \"green\" || isInPath ? MarkerType.ArrowClosed : null,\n              color: \"green\",\n              width: 20,\n              height: 20\n            }\n          };\n        }));\n        setDestinationNode(clickedNode);\n        let infoFlows = [...informationFlows];\n        // Check for duplicate source-destination pair\n        const isDuplicate = infoFlows.some(flow => flow[0].id === sourceNode.id && flow[1].id === clickedNode.id);\n        if (!isDuplicate) {\n          infoFlows.push([sourceNode, clickedNode]);\n          setInformationFlows(infoFlows);\n        }\n        setNodes(nds => nds.map(n => n.id === clickedNode.id ? {\n          ...n,\n          style: {\n            border: \"2px solid green\"\n          }\n        } : n));\n        setTimeout(resetSelection, 1000);\n      }\n    }\n  };\n  const showInformationFlowOnTheGraphs = () => {\n    informationFlows.forEach(flow => {\n      const [src, dest] = flow;\n      showOneFlowOnGraph(src, dest);\n    });\n    setSelectedFlowShow(false);\n  };\n  const showSelectedHolonFlowOnTheGraphs = () => {\n    var _selectedNode$data;\n    resetGraphs();\n    let selectedLabel = selectedNode === null || selectedNode === void 0 ? void 0 : (_selectedNode$data = selectedNode.data) === null || _selectedNode$data === void 0 ? void 0 : _selectedNode$data.label;\n    informationFlows.forEach(flow => {\n      var _flow$0$data, _flow$1$data;\n      let lbl0 = (_flow$0$data = flow[0].data) === null || _flow$0$data === void 0 ? void 0 : _flow$0$data.label;\n      let lbl1 = (_flow$1$data = flow[1].data) === null || _flow$1$data === void 0 ? void 0 : _flow$1$data.label;\n      if (lbl0 === selectedLabel || lbl1 === selectedLabel) {\n        const [src, dest] = flow;\n        showOneFlowOnGraph(src, dest);\n      }\n    });\n    let newFlows = [];\n    informationFlows.forEach(flow => {\n      var _flow$0$data2, _flow$1$data2;\n      let lbl0 = (_flow$0$data2 = flow[0].data) === null || _flow$0$data2 === void 0 ? void 0 : _flow$0$data2.label;\n      let lbl1 = (_flow$1$data2 = flow[1].data) === null || _flow$1$data2 === void 0 ? void 0 : _flow$1$data2.label;\n      if (lbl0 === selectedLabel || lbl1 === selectedLabel) {\n        newFlows.push(flow);\n      }\n    });\n    setSelectedInformationFlows(newFlows);\n    setSelectedFlowShow(true);\n  };\n  const showOneFlowOnGraph = (src, dest) => {\n    setNodes(nds => nds.map(n => n.id === src.id ? {\n      ...n,\n      style: {\n        border: \"2px solid blue\"\n      }\n    } : n.id === dest.id ? {\n      ...n,\n      style: {\n        border: \"2px solid green\"\n      }\n    } : n));\n    const path = findPath(src.id, dest.id);\n    if (!path || path.length === 0) {\n      console.error(\"No path found between the selected nodes.\");\n      return;\n    }\n    setEdges(eds => eds.map(edge => {\n      var _edge$style4, _edge$style5;\n      const isInPath = path.includes(edge.source) && path.includes(edge.target);\n      const isForward = edge.source === path[0] && edge.target === path[1];\n      return {\n        ...edge,\n        animated: isInPath,\n        style: {\n          ...edge.style,\n          stroke: isInPath ? \"green\" : (_edge$style4 = edge.style) === null || _edge$style4 === void 0 ? void 0 : _edge$style4.stroke,\n          strokeDasharray: isInPath ? \"5,5\" : (_edge$style5 = edge.style) === null || _edge$style5 === void 0 ? void 0 : _edge$style5.strokeDasharray\n        },\n        markerEnd: isInPath ? {\n          type: MarkerType.ArrowClosed,\n          color: \"green\",\n          orient: isForward ? \"auto\" : \"auto-start-reverse\"\n        } : edge.markerEnd\n      };\n    }));\n  };\n  const resetSelection = () => {\n    setEnableInformationFlow(!enableInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(true);\n      setSourceNode(null);\n      setDestinationNode(null);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          border: \"none\"\n        }\n      })));\n      setEdges(eds => eds.map(edge => ({\n        ...edge,\n        animated: false,\n        style: {\n          stroke: \"black\"\n        }\n      })));\n    }\n  };\n  const resetGraphs = () => {\n    setNodes(nds => nds.map(n => ({\n      ...n,\n      style: {\n        border: \"none\"\n      }\n    })));\n    setEdges(eds => eds.map(edge => ({\n      ...edge,\n      animated: false,\n      style: {\n        stroke: \"black\"\n      }\n    })));\n    setSelectedFlowShow(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"98vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-8\",\n      style: {\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-3\",\n        style: {\n          position: \"absolute\",\n          top: -88,\n          right: \"-23vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: resetSelection,\n          children: \"Add Information Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary ml-2\",\n          onClick: exportInformationFlows,\n          children: \"Export Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importInformationFlows,\n          style: {\n            display: \"none\"\n          },\n          id: \"uploadFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 313,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"uploadFile\",\n          className: \"btn btn-secondary ml-2 mt-2\",\n          children: \"Import Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes.map(node => ({\n          ...node,\n          data: {\n            ...node.data,\n            disable: disableAdd\n          }\n        })),\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: {\n          padding: 0.5\n        },\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: handleNodeClick,\n        onPaneClick: () => setSelectedNode(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), sourceNode && !destinationNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Destination Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 9\n    }, this), resetFlow && enableInformationFlow && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Source Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-4\",\n      style: {\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mr-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Holon Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 358,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nameofNode\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 360,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nameofNode\",\n              className: \"form-control\",\n              value: selectedNode.data.label,\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  label: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 361,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 359,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeDescription\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"nodeDescription\",\n              className: \"form-control\",\n              style: {\n                height: \"200px\",\n                width: \"100%\"\n              },\n              placeholder: \"An example description...\",\n              value: selectedNode.description || \"\",\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                description: e.target.value\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4 my-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"mb-3\",\n              children: \"Information Flows\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              value: informationFlows.length > 0 ? selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF = selectedInformationFlow.data) === null || _selectedInformationF === void 0 ? void 0 : _selectedInformationF.label : selectedNode.data.label,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 401,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 399,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeInfoFlows\",\n              children: \"Information Flows Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              style: {\n                height: \"100px\",\n                width: \"100%\"\n              },\n              value: informationFlows.length > 0 ? (selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : selectedInformationFlow.description) || \"\" : selectedNode.description || \"\",\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 415,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 413,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: enableInformationFlow && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"lead\",\n              children: \"Selected Information Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 428,\n              columnNumber: 43\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 427,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: showInformationFlowOnTheGraphs,\n              children: \"Show All Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 431,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: showSelectedHolonFlowOnTheGraphs,\n              children: \"Selected Holon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 434,\n              columnNumber: 17\n            }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary mx-2\",\n              onClick: resetGraphs,\n              children: \"Reset Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this), !selectedFlowShow && informationFlows.map(nodePair => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-3 alert alert-success\",\n            style: {\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 451,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 450,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                gap: 20\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                children: \"Show Flow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 456,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-danger\",\n                onClick: () => {\n                  const nodeId1 = nodePair[0].id;\n                  const nodeId2 = nodePair[1].id;\n                  setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                  resetGraphs();\n                },\n                children: \"Delete Information Flow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 459,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 455,\n              columnNumber: 21\n            }, this)]\n          }, `${nodePair[0].id}-${nodePair[1].id}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 445,\n            columnNumber: 19\n          }, this)), selectedFlowShow && selectedInformationFlows.map(nodePair => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"mt-3 alert alert-success\",\n            style: {\n              display: \"flex\",\n              justifyContent: \"space-between\",\n              alignItems: \"center\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 483,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 482,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                gap: 20\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-success\",\n                onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                children: \"Show Flow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 488,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"btn btn-danger\",\n                onClick: () => {\n                  const nodeId1 = nodePair[0].id;\n                  const nodeId2 = nodePair[1].id;\n                  setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                  resetGraphs();\n                },\n                children: \"Delete Information Flow\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 491,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 487,\n              columnNumber: 21\n            }, this)]\n          }, `${nodePair[0].id}-${nodePair[1].id}`, true, {\n            fileName: _jsxFileName,\n            lineNumber: 477,\n            columnNumber: 19\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 398,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title\",\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: () => setIsModalOpen(false),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 518,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 517,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 515,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"newNodeLabel\",\n            children: \"New Node Label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 523,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"newNodeLabel\",\n            className: \"form-control\",\n            placeholder: \"New Node Label\",\n            value: newNodeLabel,\n            onChange: e => setNewNodeLabel(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 524,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 522,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: () => setIsModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 535,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: () => {\n            setNodes(nds => [...nds, {\n              id: `${nds.length + 1}`,\n              type: \"customNode\",\n              data: {\n                label: newNodeLabel\n              },\n              // New nodes added via the modal do not include a description initially.\n              position: {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              }\n            }]);\n            setIsModalOpen(false);\n            setNewNodeLabel(\"\");\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 538,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 534,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BootstrapModal, {\n      show: showLevelError,\n      onHide: () => setShowLevelError(false),\n      children: [/*#__PURE__*/_jsxDEV(BootstrapModal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(BootstrapModal.Title, {\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 564,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 563,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BootstrapModal.Body, {\n        children: \"Source and destination nodes must be on the same level.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 566,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BootstrapModal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(BootstrapButton, {\n          variant: \"primary\",\n          onClick: () => setShowLevelError(false),\n          children: \"OK\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 562,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 299,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"nT8Moh2XzMGVnHBG2OMXjhxRDkI=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","BootstrapModal","Button","BootstrapButton","jsxDEV","_jsxDEV","setAppElement","CommunicationReactFlow","props","_s","_selectedInformationF","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","selectedInformationFlow","setSelectedInformationFlow","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","setDisableAdd","resetFlow","setResetFlow","informationFlows","setInformationFlows","selectedInformationFlows","setSelectedInformationFlows","selectedFlowShow","setSelectedFlowShow","showLevelError","setShowLevelError","onConnect","params","eds","nodeTypes","customNode","nodeProps","onClick","e","children","fileName","_jsxFileName","lineNumber","columnNumber","exportInformationFlows","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","importInformationFlows","event","fileReader","FileReader","onload","importedFlows","parse","target","result","Array","isArray","map","src","dest","find","node","id","alert","error","files","length","readAsText","findPath","sourceId","targetId","visited","Set","queue","path","shift","has","add","filter","edge","source","forEach","nextNode","push","handleNodeClick","nodeData","_informationFlows$fin","clickedNode","n","selectedInfoFlow","flow","item","info","nds","style","border","levelTolerance","Math","abs","position","y","_edge$style","_edge$style2","_edge$style3","isInPath","includes","animated","stroke","markerEnd","type","ArrowClosed","color","width","height","infoFlows","isDuplicate","some","setTimeout","resetSelection","showInformationFlowOnTheGraphs","showOneFlowOnGraph","showSelectedHolonFlowOnTheGraphs","_selectedNode$data","resetGraphs","selectedLabel","data","label","_flow$0$data","_flow$1$data","lbl0","lbl1","newFlows","_flow$0$data2","_flow$1$data2","console","_edge$style4","_edge$style5","isForward","strokeDasharray","orient","className","display","top","right","accept","onChange","htmlFor","disable","fitView","fitViewOptions","padding","onNodeClick","onPaneClick","left","borderLeft","value","placeholder","description","readOnly","nodePair","justifyContent","alignItems","gap","nodeId1","nodeId2","flows","pair","isOpen","onRequestClose","x","random","show","onHide","Header","closeButton","Title","Body","Footer","variant","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\"; // used for the Add Node modal\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n// Import Bootstrap Modal and Button for the error alert\r\nimport { Modal as BootstrapModal, Button as BootstrapButton } from \"react-bootstrap\";\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  // React Flow state variables\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd, setDisableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\r\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\r\n  // New state to show/hide the sameâ€‘level error alert\r\n  const [showLevelError, setShowLevelError] = useState(false);\r\n\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n\r\n  // Updated nodeTypes: Wrap the custom node with a clickable container.\r\n  // This ensures that clicking anywhere in the node triggers the onNodeClick event.\r\n  const nodeTypes = {\r\n    customNode: (nodeProps) => (\r\n      <div onClick={(e) => nodeProps.onClick && nodeProps.onClick(e, nodeProps)}>\r\n        <CustomNodeFlow {...nodeProps} setNodes={setNodes} />\r\n      </div>\r\n    ),\r\n  };\r\n\r\n  // Export the information flows as a JSON file\r\n  const exportInformationFlows = () => {\r\n    const dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(informationFlows));\r\n    const downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\r\n    document.body.appendChild(downloadAnchorNode);\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  };\r\n\r\n  // Import the information flows from a JSON file\r\n  const importInformationFlows = (event) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = (e) => {\r\n      try {\r\n        const importedFlows = JSON.parse(e.target.result);\r\n        if (Array.isArray(importedFlows)) {\r\n          setInformationFlows(\r\n            importedFlows.map(([src, dest]) => {\r\n              return [\r\n                nodes.find((node) => node.id === src.id) || src,\r\n                nodes.find((node) => node.id === dest.id) || dest,\r\n              ];\r\n            })\r\n          );\r\n          alert(\"Information Flows loaded successfully.\");\r\n        } else {\r\n          alert(\"Invalid JSON format.\");\r\n        }\r\n      } catch (error) {\r\n        alert(\"Failed to load the JSON file. Please check the file format.\");\r\n      }\r\n    };\r\n    if (event.target.files.length > 0) {\r\n      fileReader.readAsText(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const findPath = (sourceId, targetId) => {\r\n    const visited = new Set();\r\n    const queue = [[sourceId]];\r\n    while (queue.length > 0) {\r\n      const path = queue.shift();\r\n      const node = path[path.length - 1];\r\n      if (node === targetId) {\r\n        return path;\r\n      }\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        edges\r\n          .filter((edge) => edge.source === node || edge.target === node)\r\n          .forEach((edge) => {\r\n            const nextNode = edge.source === node ? edge.target : edge.source;\r\n            queue.push([...path, nextNode]);\r\n          });\r\n      }\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const handleNodeClick = (event, nodeData) => {\r\n    const clickedNode = nodes.find((n) => n.id === nodeData.id) || nodeData;\r\n    setSelectedNode(clickedNode);\r\n    const selectedInfoFlow = informationFlows\r\n      ?.find((flow) => flow.find((item) => item?.id === nodeData.id))\r\n      ?.find((info) => info?.id === nodeData.id);\r\n    setSelectedInformationFlow(selectedInfoFlow);\r\n\r\n    if (enableInformationFlow) {\r\n      setResetFlow(false);\r\n      if (!sourceNode) {\r\n        // First click sets the source node\r\n        setSourceNode(clickedNode);\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === clickedNode.id\r\n              ? { ...n, style: { border: \"2px solid blue\" } }\r\n              : n\r\n          )\r\n        );\r\n      } else if (sourceNode.id !== clickedNode.id) {\r\n        // Check that source and destination nodes are on the same level (y position within tolerance)\r\n        const levelTolerance = 15;\r\n        if (\r\n          Math.abs(sourceNode.position.y - clickedNode.position.y) >\r\n          levelTolerance\r\n        ) {\r\n          setShowLevelError(true);\r\n          return;\r\n        }\r\n\r\n        const path = findPath(sourceNode.id, clickedNode.id);\r\n        setEdges((eds) =>\r\n          eds.map((edge) => {\r\n            const isInPath =\r\n              path.includes(edge.source) && path.includes(edge.target);\r\n            return {\r\n              ...edge,\r\n              animated: isInPath || edge?.style?.stroke === \"green\",\r\n              style: {\r\n                stroke:\r\n                  edge?.style?.stroke === \"green\"\r\n                    ? \"green\"\r\n                    : isInPath\r\n                    ? \"green\"\r\n                    : \"black\",\r\n              },\r\n              markerEnd: {\r\n                type:\r\n                  edge?.style?.stroke === \"green\" || isInPath\r\n                    ? MarkerType.ArrowClosed\r\n                    : null,\r\n                color: \"green\",\r\n                width: 20,\r\n                height: 20,\r\n              },\r\n            };\r\n          })\r\n        );\r\n        setDestinationNode(clickedNode);\r\n        let infoFlows = [...informationFlows];\r\n        // Check for duplicate source-destination pair\r\n        const isDuplicate = infoFlows.some(\r\n          (flow) =>\r\n            flow[0].id === sourceNode.id && flow[1].id === clickedNode.id\r\n        );\r\n        if (!isDuplicate) {\r\n          infoFlows.push([sourceNode, clickedNode]);\r\n          setInformationFlows(infoFlows);\r\n        }\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === clickedNode.id\r\n              ? { ...n, style: { border: \"2px solid green\" } }\r\n              : n\r\n          )\r\n        );\r\n        setTimeout(resetSelection, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const showInformationFlowOnTheGraphs = () => {\r\n    informationFlows.forEach((flow) => {\r\n      const [src, dest] = flow;\r\n      showOneFlowOnGraph(src, dest);\r\n    });\r\n    setSelectedFlowShow(false);\r\n  };\r\n\r\n  const showSelectedHolonFlowOnTheGraphs = () => {\r\n    resetGraphs();\r\n    let selectedLabel = selectedNode?.data?.label;\r\n    informationFlows.forEach((flow) => {\r\n      let lbl0 = flow[0].data?.label;\r\n      let lbl1 = flow[1].data?.label;\r\n      if (lbl0 === selectedLabel || lbl1 === selectedLabel) {\r\n        const [src, dest] = flow;\r\n        showOneFlowOnGraph(src, dest);\r\n      }\r\n    });\r\n    let newFlows = [];\r\n    informationFlows.forEach((flow) => {\r\n      let lbl0 = flow[0].data?.label;\r\n      let lbl1 = flow[1].data?.label;\r\n      if (lbl0 === selectedLabel || lbl1 === selectedLabel) {\r\n        newFlows.push(flow);\r\n      }\r\n    });\r\n    setSelectedInformationFlows(newFlows);\r\n    setSelectedFlowShow(true);\r\n  };\r\n\r\n  const showOneFlowOnGraph = (src, dest) => {\r\n    setNodes((nds) =>\r\n      nds.map((n) =>\r\n        n.id === src.id\r\n          ? { ...n, style: { border: \"2px solid blue\" } }\r\n          : n.id === dest.id\r\n          ? { ...n, style: { border: \"2px solid green\" } }\r\n          : n\r\n      )\r\n    );\r\n    const path = findPath(src.id, dest.id);\r\n    if (!path || path.length === 0) {\r\n      console.error(\"No path found between the selected nodes.\");\r\n      return;\r\n    }\r\n    setEdges((eds) =>\r\n      eds.map((edge) => {\r\n        const isInPath =\r\n          path.includes(edge.source) && path.includes(edge.target);\r\n        const isForward =\r\n          edge.source === path[0] && edge.target === path[1];\r\n        return {\r\n          ...edge,\r\n          animated: isInPath,\r\n          style: {\r\n            ...edge.style,\r\n            stroke: isInPath ? \"green\" : edge.style?.stroke,\r\n            strokeDasharray: isInPath ? \"5,5\" : edge.style?.strokeDasharray,\r\n          },\r\n          markerEnd: isInPath\r\n            ? {\r\n                type: MarkerType.ArrowClosed,\r\n                color: \"green\",\r\n                orient: isForward ? \"auto\" : \"auto-start-reverse\",\r\n              }\r\n            : edge.markerEnd,\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  const resetSelection = () => {\r\n    setEnableInformationFlow(!enableInformationFlow);\r\n    if (enableInformationFlow) {\r\n      setResetFlow(true);\r\n      setSourceNode(null);\r\n      setDestinationNode(null);\r\n      setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n      setEdges((eds) =>\r\n        eds.map((edge) => ({\r\n          ...edge,\r\n          animated: false,\r\n          style: { stroke: \"black\" },\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const resetGraphs = () => {\r\n    setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n    setEdges((eds) =>\r\n      eds.map((edge) => ({\r\n        ...edge,\r\n        animated: false,\r\n        style: { stroke: \"black\" },\r\n      }))\r\n    );\r\n    setSelectedFlowShow(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\" style={{ display: \"flex\", height: \"100vh\", width: \"98vw\" }}>\r\n      <div className=\"col-8\" style={{ height: \"100%\" }}>\r\n        <div\r\n          className=\"d-flex justify-content-between align-items-center mb-3\"\r\n          style={{ position: \"absolute\", top: -88, right: \"-23vw\" }}\r\n        >\r\n          <button className=\"btn btn-success\" onClick={resetSelection}>\r\n            Add Information Flow\r\n          </button>\r\n          {informationFlows.length > 0 && (\r\n            <button className=\"btn btn-primary ml-2\" onClick={exportInformationFlows}>\r\n              Export Information Flows\r\n            </button>\r\n          )}\r\n          <input\r\n            type=\"file\"\r\n            accept=\".json\"\r\n            onChange={importInformationFlows}\r\n            style={{ display: \"none\" }}\r\n            id=\"uploadFile\"\r\n          />\r\n          <label htmlFor=\"uploadFile\" className=\"btn btn-secondary ml-2 mt-2\">\r\n            Import Information Flows\r\n          </label>\r\n        </div>\r\n\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes.map((node) => ({\r\n            ...node,\r\n            data: { ...node.data, disable: disableAdd },\r\n          }))}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={{ padding: 0.5 }}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={handleNodeClick}\r\n          onPaneClick={() => setSelectedNode(null)}\r\n        />\r\n      </div>\r\n\r\n      {sourceNode && !destinationNode && (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">Select the Destination Node</div>\r\n        </div>\r\n      )}\r\n      {resetFlow && enableInformationFlow && (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">Select the Source Node</div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"col-4\" style={{ padding: \"10px\", borderLeft: \"1px solid #ccc\" }}>\r\n        {selectedNode ? (\r\n          <div className=\"mr-3\">\r\n            <div className=\"border border-dark p-4\">\r\n              <h4>Holon Details</h4>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nameofNode\">Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nameofNode\"\r\n                  className=\"form-control\"\r\n                  value={selectedNode.data.label}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? { ...node, data: { ...node.data, label: e.target.value } }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeDescription\">Description</label>\r\n                <textarea\r\n                  id=\"nodeDescription\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"200px\", width: \"100%\" }}\r\n                  placeholder=\"An example description...\"\r\n                  value={selectedNode.description || \"\"}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? { ...node, description: e.target.value }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"border border-dark p-4 my-2\">\r\n              <div className=\"form-group mb-3\">\r\n                <h4 className=\"mb-3\">Information Flows</h4>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.data?.label\r\n                      : selectedNode.data.label\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeInfoFlows\">Information Flows Description</label>\r\n                <textarea\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"100px\", width: \"100%\" }}\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.description || \"\"\r\n                      : selectedNode.description || \"\"\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n              <div>\r\n                {enableInformationFlow && <p className=\"lead\">Selected Information Flow</p>}\r\n              </div>\r\n              <div>\r\n                <button className=\"btn btn-success mx-1\" onClick={showInformationFlowOnTheGraphs}>\r\n                  Show All Flow\r\n                </button>\r\n                <button className=\"btn btn-success mx-1\" onClick={showSelectedHolonFlowOnTheGraphs}>\r\n                  Selected Holon\r\n                </button>\r\n                {informationFlows.length > 0 && (\r\n                  <button className=\"btn btn-primary mx-2\" onClick={resetGraphs}>\r\n                    Reset Flow\r\n                  </button>\r\n                )}\r\n              </div>\r\n              {!selectedFlowShow &&\r\n                informationFlows.map((nodePair) => (\r\n                  <div\r\n                    className=\"mt-3 alert alert-success\"\r\n                    style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}\r\n                    key={`${nodePair[0].id}-${nodePair[1].id}`}\r\n                  >\r\n                    <div>\r\n                      <strong>\r\n                        {nodePair[0].data.label} {\"-->\"} {nodePair[1].data.label}\r\n                      </strong>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", gap: 20 }}>\r\n                      <button className=\"btn btn-success\" onClick={() => showOneFlowOnGraph(nodePair[0], nodePair[1])}>\r\n                        Show Flow\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => {\r\n                          const nodeId1 = nodePair[0].id;\r\n                          const nodeId2 = nodePair[1].id;\r\n                          setInformationFlows((flows) =>\r\n                            flows.filter((pair) => !(pair[0].id === nodeId1 && pair[1].id === nodeId2))\r\n                          );\r\n                          resetGraphs();\r\n                        }}\r\n                      >\r\n                        Delete Information Flow\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              {selectedFlowShow &&\r\n                selectedInformationFlows.map((nodePair) => (\r\n                  <div\r\n                    className=\"mt-3 alert alert-success\"\r\n                    style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}\r\n                    key={`${nodePair[0].id}-${nodePair[1].id}`}\r\n                  >\r\n                    <div>\r\n                      <strong>\r\n                        {nodePair[0].data.label} {\"-->\"} {nodePair[1].data.label}\r\n                      </strong>\r\n                    </div>\r\n                    <div style={{ display: \"flex\", gap: 20 }}>\r\n                      <button className=\"btn btn-success\" onClick={() => showOneFlowOnGraph(nodePair[0], nodePair[1])}>\r\n                        Show Flow\r\n                      </button>\r\n                      <button\r\n                        className=\"btn btn-danger\"\r\n                        onClick={() => {\r\n                          const nodeId1 = nodePair[0].id;\r\n                          const nodeId2 = nodePair[1].id;\r\n                          setInformationFlows((flows) =>\r\n                            flows.filter((pair) => !(pair[0].id === nodeId1 && pair[1].id === nodeId2))\r\n                          );\r\n                          resetGraphs();\r\n                        }}\r\n                      >\r\n                        Delete Information Flow\r\n                      </button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>No Selection</div>\r\n        )}\r\n      </div>\r\n\r\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title\">Add Node</h5>\r\n          <button type=\"button\" className=\"close\" onClick={() => setIsModalOpen(false)}>\r\n            <span>&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <div className=\"form-group mb-3\">\r\n            <label htmlFor=\"newNodeLabel\">New Node Label</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"newNodeLabel\"\r\n              className=\"form-control\"\r\n              placeholder=\"New Node Label\"\r\n              value={newNodeLabel}\r\n              onChange={(e) => setNewNodeLabel(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button type=\"button\" className=\"btn btn-secondary\" onClick={() => setIsModalOpen(false)}>\r\n            Close\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              setNodes((nds) => [\r\n                ...nds,\r\n                {\r\n                  id: `${nds.length + 1}`,\r\n                  type: \"customNode\",\r\n                  data: { label: newNodeLabel },\r\n                  // New nodes added via the modal do not include a description initially.\r\n                  position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n                },\r\n              ]);\r\n              setIsModalOpen(false);\r\n              setNewNodeLabel(\"\");\r\n            }}\r\n          >\r\n            Add Node\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n\r\n      {/* Bootstrap modal for same-level error alert */}\r\n      <BootstrapModal show={showLevelError} onHide={() => setShowLevelError(false)}>\r\n        <BootstrapModal.Header closeButton>\r\n          <BootstrapModal.Title>Error</BootstrapModal.Title>\r\n        </BootstrapModal.Header>\r\n        <BootstrapModal.Body>\r\n          Source and destination nodes must be on the same level.\r\n        </BootstrapModal.Body>\r\n        <BootstrapModal.Footer>\r\n          <BootstrapButton variant=\"primary\" onClick={() => setShowLevelError(false)}>\r\n            OK\r\n          </BootstrapButton>\r\n        </BootstrapModal.Footer>\r\n      </BootstrapModal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}