{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  var _selectedInformationF, _selectedInformationF2;\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [isAlertModalOpen, setIsAlertModalOpen] = useState(false); // State for alert modal visibility\n  const [alertMessage, setAlertMessage] = useState(\"\"); // State for alert message\n\n  const [informationFlows, setInformationFlows] = useState([]);\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const handleNodeClick = (event, nodeData) => {\n    const clickedNode = nodes.find(n => n.id === nodeData.id) || nodeData;\n    setSelectedNode(clickedNode);\n    if (enableInformationFlow) {\n      setResetFlow(false);\n      if (!sourceNode) {\n        setSourceNode(clickedNode);\n        setNodes(nds => nds.map(n => n.id === clickedNode.id ? {\n          ...n,\n          style: {\n            border: \"2px solid blue\"\n          }\n        } : n));\n      } else if (sourceNode.id !== clickedNode.id) {\n        const levelTolerance = 15;\n        if (Math.abs(sourceNode.position.y - clickedNode.position.y) > levelTolerance) {\n          // Show Bootstrap-styled alert modal\n          setAlertMessage(\"Source and destination nodes must be on the same level.\");\n          setIsAlertModalOpen(true);\n          return;\n        }\n\n        // Continue with the original flowâ€“adding logic.\n        const path = findPath(sourceNode.id, clickedNode.id);\n        setEdges(eds => eds.map(edge => {\n          var _edge$style, _edge$style2, _edge$style3;\n          const isInPath = path.includes(edge.source) && path.includes(edge.target);\n          return {\n            ...edge,\n            animated: (edge === null || edge === void 0 ? void 0 : (_edge$style = edge.style) === null || _edge$style === void 0 ? void 0 : _edge$style.stroke) === \"green\" || isInPath ? true : false,\n            style: {\n              stroke: (edge === null || edge === void 0 ? void 0 : (_edge$style2 = edge.style) === null || _edge$style2 === void 0 ? void 0 : _edge$style2.stroke) === \"green\" ? \"green\" : isInPath ? \"green\" : \"black\"\n            },\n            markerEnd: {\n              type: (edge === null || edge === void 0 ? void 0 : (_edge$style3 = edge.style) === null || _edge$style3 === void 0 ? void 0 : _edge$style3.stroke) === \"green\" || isInPath ? MarkerType.ArrowClosed : null,\n              color: \"green\",\n              width: 20,\n              height: 20\n            }\n          };\n        }));\n        setDestinationNode(clickedNode);\n        let informationFl = [...informationFlows];\n\n        // Check if the source-destination pair already exists\n        const isDuplicate = informationFl.some(flow => flow[0].id === sourceNode.id && flow[1].id === clickedNode.id);\n\n        // Only add the flow if it doesn't already exist\n        if (!isDuplicate) {\n          informationFl.push([sourceNode, clickedNode]);\n          setInformationFlows(informationFl);\n        }\n        // Update the clicked (destination) node's border style to green.\n        setNodes(nds => nds.map(n => n.id === clickedNode.id ? {\n          ...n,\n          style: {\n            border: \"2px solid green\"\n          }\n        } : n));\n        setTimeout(resetSelection, 1000);\n      }\n    }\n  };\n  const showInformationFlowOnTheGraphs = () => {\n    informationFlows.forEach(flow => {\n      const [sourceNode, destinationNode] = flow;\n      showOneFlowOnGraph(sourceNode, destinationNode);\n    });\n    setSelectedFlowShow(false);\n  };\n  const showSelectedHolonFlowOnTheGraphs = () => {\n    var _selectedNode$data;\n    resetGraphs();\n    let selectedLabel = selectedNode === null || selectedNode === void 0 ? void 0 : (_selectedNode$data = selectedNode.data) === null || _selectedNode$data === void 0 ? void 0 : _selectedNode$data.label;\n    informationFlows.forEach(flow => {\n      var _flow$0$data, _flow$1$data;\n      let flowLabel0 = (_flow$0$data = flow[0].data) === null || _flow$0$data === void 0 ? void 0 : _flow$0$data.label;\n      let flowLabel1 = (_flow$1$data = flow[1].data) === null || _flow$1$data === void 0 ? void 0 : _flow$1$data.label;\n      if (flowLabel0 === selectedLabel || flowLabel1 === selectedLabel) {\n        const [sourceNode, destinationNode] = flow;\n        showOneFlowOnGraph(sourceNode, destinationNode);\n      }\n    });\n    let newInformationFlows = [];\n    informationFlows.forEach(flow => {\n      var _flow$0$data2, _flow$1$data2;\n      let flowLabel0 = (_flow$0$data2 = flow[0].data) === null || _flow$0$data2 === void 0 ? void 0 : _flow$0$data2.label;\n      let flowLabel1 = (_flow$1$data2 = flow[1].data) === null || _flow$1$data2 === void 0 ? void 0 : _flow$1$data2.label;\n      if (flowLabel0 === selectedLabel || flowLabel1 === selectedLabel) {\n        newInformationFlows.push(flow);\n      }\n    });\n    setSelectedInformationFlows(newInformationFlows);\n    setSelectedFlowShow(true);\n  };\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\n    setNodes(nds => nds.map(n => n.id === sourceNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid blue\"\n      }\n    } : n.id === destinationNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid green\"\n      }\n    } : n));\n    const path = findPath(sourceNode.id, destinationNode.id);\n    if (!path || path.length === 0) {\n      console.error(\"No path found between the selected nodes.\");\n      return;\n    }\n    setEdges(eds => eds.map(edge => {\n      var _edge$style4, _edge$style5;\n      const isInPath = path.includes(edge.source) && path.includes(edge.target);\n      const isForwardDirection = edge.source === path[0] && edge.target === path[1];\n      const isBackwardDirection = edge.target === path[0] && edge.source === path[1];\n      return {\n        ...edge,\n        animated: isInPath ? true : edge.animated,\n        style: {\n          ...edge.style,\n          stroke: isInPath ? \"green\" : (_edge$style4 = edge.style) === null || _edge$style4 === void 0 ? void 0 : _edge$style4.stroke,\n          strokeDasharray: isInPath ? \"5,5\" : (_edge$style5 = edge.style) === null || _edge$style5 === void 0 ? void 0 : _edge$style5.strokeDasharray\n        },\n        markerEnd: isInPath ? {\n          type: MarkerType.ArrowClosed,\n          color: \"green\",\n          orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\"\n        } : edge.markerEnd\n      };\n    }));\n  };\n  const resetSelection = () => {\n    setEnableInformationFlow(!enableInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(true);\n      setSourceNode(null);\n      setDestinationNode(null);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          border: \"none\"\n        }\n      })));\n      setEdges(eds => eds.map(edge => ({\n        ...edge,\n        animated: false,\n        style: {\n          stroke: \"black\"\n        }\n      })));\n    }\n  };\n  const resetGraphs = () => {\n    setNodes(nds => nds.map(n => ({\n      ...n,\n      style: {\n        border: \"none\"\n      }\n    })));\n    setEdges(eds => eds.map(edge => ({\n      ...edge,\n      animated: false,\n      style: {\n        stroke: \"black\"\n      }\n    })));\n    setSelectedFlowShow(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"98vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-8\",\n      style: {\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-3\",\n        style: {\n          position: \"absolute\",\n          top: -88,\n          right: \"-23vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: resetSelection,\n          children: \"Add Information Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary ml-2\",\n          onClick: exportInformationFlows,\n          children: \"Export Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importInformationFlows,\n          style: {\n            display: \"none\"\n          },\n          id: \"uploadFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"uploadFile\",\n          className: \"btn btn-secondary ml-2 mt-2\",\n          children: \"Import Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes.map(node => ({\n          ...node,\n          data: {\n            ...node.data,\n            disable: disableAdd\n          }\n        })),\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: handleNodeClick,\n        onPaneClick: () => setSelectedNode(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 7\n    }, this), sourceNode && destinationNode == null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Destination Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 9\n    }, this) : \"\", resetFlow && enableInformationFlow ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 alert alert-danger\",\n        children: \"Select the Source Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-4\",\n      style: {\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mr-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Holon Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nameofNode\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 314,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nameofNode\",\n              className: \"form-control\",\n              value: selectedNode.data.label,\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  label: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 315,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeDescription\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 335,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"nodeDescription\",\n              className: \"form-control\",\n              style: {\n                height: \"200px\",\n                width: \"100%\"\n              },\n              placeholder: \"An example description...\",\n              value: selectedNode.data.description || \"\",\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  description: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 336,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4 my-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"mb-3\",\n              children: \"Information Flows\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 362,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              value: informationFlows.length > 0 ? selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF = selectedInformationFlow.data) === null || _selectedInformationF === void 0 ? void 0 : _selectedInformationF.label : selectedNode.data.label,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 363,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 361,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeInfoFlows\",\n              children: \"Information Flows Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              style: {\n                height: \"100px\",\n                width: \"100%\"\n              },\n              value: informationFlows.length > 0 ? selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF2 = selectedInformationFlow.data) === null || _selectedInformationF2 === void 0 ? void 0 : _selectedInformationF2.description : selectedNode.data.description,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 379,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: enableInformationFlow && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"lead\",\n              children: \"Selected Information Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 394,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 392,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: () => showInformationFlowOnTheGraphs(),\n              children: \"Show All Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 398,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: () => showSelectedHolonFlowOnTheGraphs(),\n              children: \"Selected Holon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 17\n            }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary mx-2\",\n              onClick: resetGraphs,\n              children: \"Reset Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 411,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 397,\n            columnNumber: 15\n          }, this), !selectedFlowShow && informationFlows.map(nodePair => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 alert alert-success\",\n              style: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 432,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 431,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  gap: 20\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-success\",\n                  onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                  children: \"Show Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 438,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-danger\",\n                  onClick: () => {\n                    const nodeId1 = nodePair[0].id;\n                    const nodeId2 = nodePair[1].id;\n                    setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                    resetGraphs();\n                  },\n                  children: \"Delete Information Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 446,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 437,\n                columnNumber: 23\n              }, this)]\n            }, `${nodePair[0].id}-${nodePair[1].id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 422,\n              columnNumber: 21\n            }, this);\n          }), selectedFlowShow && selectedInformationFlows.map(nodePair => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 alert alert-success\",\n              style: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 482,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 481,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  gap: 20\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-success\",\n                  onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                  children: \"Show Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 488,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-danger\",\n                  onClick: () => {\n                    const nodeId1 = nodePair[0].id;\n                    const nodeId2 = nodePair[1].id;\n                    setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                    resetGraphs();\n                  },\n                  children: \"Delete Information Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 496,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 487,\n                columnNumber: 23\n              }, this)]\n            }, `${nodePair[0].id}-${nodePair[1].id}`, true, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 21\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 305,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isAlertModalOpen,\n      onRequestClose: () => setIsAlertModalOpen(false),\n      style: {\n        overlay: {\n          backgroundColor: \"rgba(0, 0, 0, 0.5)\"\n        },\n        content: {\n          top: \"50%\",\n          left: \"50%\",\n          right: \"auto\",\n          bottom: \"auto\",\n          marginRight: \"-50%\",\n          transform: \"translate(-50%, -50%)\",\n          width: \"400px\",\n          height: \"auto\",\n          padding: \"20px\",\n          borderRadius: \"8px\",\n          boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\"\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title\",\n          children: \"Alert\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 548,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: () => setIsAlertModalOpen(false),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 554,\n            columnNumber: 7\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 549,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 547,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: alertMessage\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 557,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: () => setIsAlertModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 561,\n          columnNumber: 5\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 560,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 525,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"36bgwBpQVif1Yhdy648sl5QS/wI=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","jsxDEV","_jsxDEV","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","_selectedInformationF","_selectedInformationF2","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","selectedInformationFlow","setSelectedInformationFlow","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","setDisableAdd","resetFlow","setResetFlow","isAlertModalOpen","setIsAlertModalOpen","alertMessage","setAlertMessage","informationFlows","setInformationFlows","selectedInformationFlows","setSelectedInformationFlows","selectedFlowShow","setSelectedFlowShow","onConnect","params","eds","handleNodeClick","event","nodeData","clickedNode","find","n","id","nds","map","style","border","levelTolerance","Math","abs","position","y","path","findPath","edge","_edge$style","_edge$style2","_edge$style3","isInPath","includes","source","target","animated","stroke","markerEnd","type","ArrowClosed","color","width","height","informationFl","isDuplicate","some","flow","push","setTimeout","resetSelection","showInformationFlowOnTheGraphs","forEach","showOneFlowOnGraph","showSelectedHolonFlowOnTheGraphs","_selectedNode$data","resetGraphs","selectedLabel","data","label","_flow$0$data","_flow$1$data","flowLabel0","flowLabel1","newInformationFlows","_flow$0$data2","_flow$1$data2","length","console","error","_edge$style4","_edge$style5","isForwardDirection","isBackwardDirection","strokeDasharray","orient","className","display","children","top","right","onClick","fileName","_jsxFileName","lineNumber","columnNumber","exportInformationFlows","accept","onChange","importInformationFlows","htmlFor","node","disable","fitView","onNodeClick","onPaneClick","left","borderLeft","value","e","placeholder","description","readOnly","nodePair","justifyContent","alignItems","gap","nodeId1","nodeId2","flows","filter","pair","isOpen","onRequestClose","overlay","backgroundColor","content","bottom","marginRight","transform","borderRadius","boxShadow","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd, setDisableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n  const [isAlertModalOpen, setIsAlertModalOpen] = useState(false); // State for alert modal visibility\r\n  const [alertMessage, setAlertMessage] = useState(\"\"); // State for alert message\r\n\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\r\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\r\n\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n\r\n  const handleNodeClick = (event, nodeData) => {\r\n    const clickedNode = nodes.find((n) => n.id === nodeData.id) || nodeData;\r\n    setSelectedNode(clickedNode);\r\n\r\n    if (enableInformationFlow) {\r\n      setResetFlow(false);\r\n      if (!sourceNode) {\r\n        setSourceNode(clickedNode);\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === clickedNode.id ? { ...n, style: { border: \"2px solid blue\" } } : n\r\n          )\r\n        );\r\n      } else if (sourceNode.id !== clickedNode.id) {\r\n        const levelTolerance = 15;\r\n        if (Math.abs(sourceNode.position.y - clickedNode.position.y) > levelTolerance) {\r\n          // Show Bootstrap-styled alert modal\r\n          setAlertMessage(\"Source and destination nodes must be on the same level.\");\r\n          setIsAlertModalOpen(true);\r\n          return;\r\n        }\r\n\r\n        // Continue with the original flowâ€“adding logic.\r\n        const path = findPath(sourceNode.id, clickedNode.id);\r\n        setEdges((eds) =>\r\n          eds.map((edge) => {\r\n            const isInPath =\r\n              path.includes(edge.source) && path.includes(edge.target);\r\n            return {\r\n              ...edge,\r\n              animated:\r\n                edge?.style?.stroke === \"green\" || isInPath ? true : false,\r\n              style: {\r\n                stroke:\r\n                  edge?.style?.stroke === \"green\"\r\n                    ? \"green\"\r\n                    : isInPath\r\n                    ? \"green\"\r\n                    : \"black\",\r\n              },\r\n              markerEnd: {\r\n                type:\r\n                  edge?.style?.stroke === \"green\" || isInPath\r\n                    ? MarkerType.ArrowClosed\r\n                    : null,\r\n                color: \"green\",\r\n                width: 20,\r\n                height: 20,\r\n              },\r\n            };\r\n          })\r\n        );\r\n\r\n        setDestinationNode(clickedNode);\r\n        let informationFl = [...informationFlows];\r\n\r\n        // Check if the source-destination pair already exists\r\n        const isDuplicate = informationFl.some(\r\n          (flow) => flow[0].id === sourceNode.id && flow[1].id === clickedNode.id\r\n        );\r\n\r\n        // Only add the flow if it doesn't already exist\r\n        if (!isDuplicate) {\r\n          informationFl.push([sourceNode, clickedNode]);\r\n          setInformationFlows(informationFl);\r\n        }\r\n        // Update the clicked (destination) node's border style to green.\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === clickedNode.id\r\n              ? { ...n, style: { border: \"2px solid green\" } }\r\n              : n\r\n          )\r\n        );\r\n        setTimeout(resetSelection, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  const showInformationFlowOnTheGraphs = () => {\r\n    informationFlows.forEach((flow) => {\r\n      const [sourceNode, destinationNode] = flow;\r\n      showOneFlowOnGraph(sourceNode, destinationNode);\r\n    });\r\n\r\n    setSelectedFlowShow(false);\r\n  };\r\n\r\n  const showSelectedHolonFlowOnTheGraphs = () => {\r\n    resetGraphs();\r\n    let selectedLabel = selectedNode?.data?.label;\r\n    informationFlows.forEach((flow) => {\r\n      let flowLabel0 = flow[0].data?.label;\r\n      let flowLabel1 = flow[1].data?.label;\r\n      if (flowLabel0 === selectedLabel || flowLabel1 === selectedLabel) {\r\n        const [sourceNode, destinationNode] = flow;\r\n        showOneFlowOnGraph(sourceNode, destinationNode);\r\n      }\r\n    });\r\n    let newInformationFlows = [];\r\n    informationFlows.forEach((flow) => {\r\n      let flowLabel0 = flow[0].data?.label;\r\n      let flowLabel1 = flow[1].data?.label;\r\n      if (flowLabel0 === selectedLabel || flowLabel1 === selectedLabel) {\r\n        newInformationFlows.push(flow);\r\n      }\r\n    });\r\n    setSelectedInformationFlows(newInformationFlows);\r\n    setSelectedFlowShow(true);\r\n  };\r\n\r\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\r\n    setNodes((nds) =>\r\n      nds.map((n) =>\r\n        n.id === sourceNode.id\r\n          ? { ...n, style: { border: \"2px solid blue\" } }\r\n          : n.id === destinationNode.id\r\n          ? { ...n, style: { border: \"2px solid green\" } }\r\n          : n\r\n      )\r\n    );\r\n\r\n    const path = findPath(sourceNode.id, destinationNode.id);\r\n\r\n    if (!path || path.length === 0) {\r\n      console.error(\"No path found between the selected nodes.\");\r\n      return;\r\n    }\r\n\r\n    setEdges((eds) =>\r\n      eds.map((edge) => {\r\n        const isInPath =\r\n          path.includes(edge.source) && path.includes(edge.target);\r\n\r\n        const isForwardDirection =\r\n          edge.source === path[0] && edge.target === path[1];\r\n        const isBackwardDirection =\r\n          edge.target === path[0] && edge.source === path[1];\r\n\r\n        return {\r\n          ...edge,\r\n          animated: isInPath ? true : edge.animated,\r\n          style: {\r\n            ...edge.style,\r\n            stroke: isInPath ? \"green\" : edge.style?.stroke,\r\n            strokeDasharray: isInPath ? \"5,5\" : edge.style?.strokeDasharray,\r\n          },\r\n          markerEnd: isInPath\r\n            ? {\r\n                type: MarkerType.ArrowClosed,\r\n                color: \"green\",\r\n                orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\",\r\n              }\r\n            : edge.markerEnd,\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  const resetSelection = () => {\r\n    setEnableInformationFlow(!enableInformationFlow);\r\n    if (enableInformationFlow) {\r\n      setResetFlow(true);\r\n      setSourceNode(null);\r\n      setDestinationNode(null);\r\n      setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n      setEdges((eds) =>\r\n        eds.map((edge) => ({\r\n          ...edge,\r\n          animated: false,\r\n          style: { stroke: \"black\" },\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const resetGraphs = () => {\r\n    setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n    setEdges((eds) =>\r\n      eds.map((edge) => ({\r\n        ...edge,\r\n        animated: false,\r\n        style: { stroke: \"black\" },\r\n      }))\r\n    );\r\n\r\n    setSelectedFlowShow(false);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"container-fluid\"\r\n      style={{ display: \"flex\", height: \"100vh\", width: \"98vw\" }}\r\n    >\r\n      <div className=\"col-8\" style={{ height: \"100%\" }}>\r\n        <div\r\n          className=\"d-flex justify-content-between align-items-center mb-3\"\r\n          style={{ position: \"absolute\", top: -88, right: \"-23vw\" }}\r\n        >\r\n          <button className={\"btn btn-success\"} onClick={resetSelection}>\r\n            Add Information Flow\r\n          </button>\r\n          {informationFlows.length > 0 && (\r\n            <button\r\n              className={\"btn btn-primary ml-2\"}\r\n              onClick={exportInformationFlows}\r\n            >\r\n              Export Information Flows\r\n            </button>\r\n          )}\r\n\r\n          <input\r\n            type=\"file\"\r\n            accept=\".json\"\r\n            onChange={importInformationFlows}\r\n            style={{ display: \"none\" }}\r\n            id=\"uploadFile\"\r\n          />\r\n          <label htmlFor=\"uploadFile\" className=\"btn btn-secondary ml-2 mt-2\">\r\n            Import Information Flows\r\n          </label>\r\n        </div>\r\n\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes.map((node) => ({\r\n            ...node,\r\n            data: {\r\n              ...node.data,\r\n              disable: disableAdd,\r\n            },\r\n          }))}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={handleNodeClick}\r\n          onPaneClick={() => setSelectedNode(null)}\r\n        />\r\n      </div>\r\n      {sourceNode && destinationNode == null ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">\r\n            Select the Destination Node\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {resetFlow && enableInformationFlow ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"mt-3 alert alert-danger\">Select the Source Node</div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div\r\n        className=\"col-4\"\r\n        style={{ padding: \"10px\", borderLeft: \"1px solid #ccc\" }}\r\n      >\r\n        {selectedNode ? (\r\n          <div className=\"mr-3\">\r\n            <div className=\"border border-dark p-4\">\r\n              <h4>Holon Details</h4>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nameofNode\">Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nameofNode\"\r\n                  className=\"form-control\"\r\n                  value={selectedNode.data.label}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? {\r\n                              ...node,\r\n                              data: { ...node.data, label: e.target.value },\r\n                            }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeDescription\">Description</label>\r\n                <textarea\r\n                  id=\"nodeDescription\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"200px\", width: \"100%\" }}\r\n                  placeholder=\"An example description...\"\r\n                  value={selectedNode.data.description || \"\"}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? {\r\n                              ...node,\r\n                              data: {\r\n                                ...node.data,\r\n                                description: e.target.value,\r\n                              },\r\n                            }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"border border-dark p-4 my-2\">\r\n              <div className=\"form-group mb-3\">\r\n                <h4 className=\"mb-3\">Information Flows</h4>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.data?.label\r\n                      : selectedNode.data.label\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeInfoFlows\">\r\n                  Information Flows Description\r\n                </label>\r\n                <textarea\r\n                  type=\"text\"\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"100px\", width: \"100%\" }}\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.data?.description\r\n                      : selectedNode.data.description\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n              <div>\r\n                {enableInformationFlow && (\r\n                  <p className=\"lead\">Selected Information Flow</p>\r\n                )}\r\n              </div>\r\n              <div>\r\n                <button\r\n                  className={\"btn btn-success mx-1\"}\r\n                  onClick={() => showInformationFlowOnTheGraphs()}\r\n                >\r\n                  Show All Flow\r\n                </button>\r\n                <button\r\n                  className={\"btn btn-success mx-1\"}\r\n                  onClick={() => showSelectedHolonFlowOnTheGraphs()}\r\n                >\r\n                  Selected Holon\r\n                </button>\r\n                {informationFlows.length > 0 && (\r\n                  <button\r\n                    className={\"btn btn-primary mx-2\"}\r\n                    onClick={resetGraphs}\r\n                  >\r\n                    Reset Flow\r\n                  </button>\r\n                )}\r\n              </div>\r\n              {!selectedFlowShow &&\r\n                informationFlows.map((nodePair) => {\r\n                  return (\r\n                    <div\r\n                      className=\"mt-3 alert alert-success\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                      key={`${nodePair[0].id}-${nodePair[1].id}`}\r\n                    >\r\n                      <div>\r\n                        <strong>\r\n                          {nodePair[0].data.label} {\"-->\"}{\" \"}\r\n                          {nodePair[1].data.label}\r\n                        </strong>\r\n                      </div>\r\n                      <div style={{ display: \"flex\", gap: 20 }}>\r\n                        <button\r\n                          className={\"btn btn-success\"}\r\n                          onClick={() =>\r\n                            showOneFlowOnGraph(nodePair[0], nodePair[1])\r\n                          }\r\n                        >\r\n                          Show Flow\r\n                        </button>\r\n                        <button\r\n                          className={\"btn btn-danger\"}\r\n                          onClick={() => {\r\n                            const nodeId1 = nodePair[0].id;\r\n                            const nodeId2 = nodePair[1].id;\r\n                            setInformationFlows((flows) =>\r\n                              flows.filter(\r\n                                (pair) =>\r\n                                  !(\r\n                                    pair[0].id === nodeId1 &&\r\n                                    pair[1].id === nodeId2\r\n                                  )\r\n                              )\r\n                            );\r\n                            resetGraphs();\r\n                          }}\r\n                        >\r\n                          Delete Information Flow\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n              {selectedFlowShow &&\r\n                selectedInformationFlows.map((nodePair) => {\r\n                  return (\r\n                    <div\r\n                      className=\"mt-3 alert alert-success\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                      key={`${nodePair[0].id}-${nodePair[1].id}`}\r\n                    >\r\n                      <div>\r\n                        <strong>\r\n                          {nodePair[0].data.label} {\"-->\"}{\" \"}\r\n                          {nodePair[1].data.label}\r\n                        </strong>\r\n                      </div>\r\n                      <div style={{ display: \"flex\", gap: 20 }}>\r\n                        <button\r\n                          className={\"btn btn-success\"}\r\n                          onClick={() =>\r\n                            showOneFlowOnGraph(nodePair[0], nodePair[1])\r\n                          }\r\n                        >\r\n                          Show Flow\r\n                        </button>\r\n                        <button\r\n                          className={\"btn btn-danger\"}\r\n                          onClick={() => {\r\n                            const nodeId1 = nodePair[0].id;\r\n                            const nodeId2 = nodePair[1].id;\r\n                            setInformationFlows((flows) =>\r\n                              flows.filter(\r\n                                (pair) =>\r\n                                  !(\r\n                                    pair[0].id === nodeId1 &&\r\n                                    pair[1].id === nodeId2\r\n                                  )\r\n                              )\r\n                            );\r\n                            resetGraphs();\r\n                          }}\r\n                        >\r\n                          Delete Information Flow\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>No Selection</div>\r\n        )}\r\n      </div>\r\n      <Modal\r\n  isOpen={isAlertModalOpen}\r\n  onRequestClose={() => setIsAlertModalOpen(false)}\r\n  style={{\r\n    overlay: {\r\n      backgroundColor: \"rgba(0, 0, 0, 0.5)\",\r\n    },\r\n    content: {\r\n      top: \"50%\",\r\n      left: \"50%\",\r\n      right: \"auto\",\r\n      bottom: \"auto\",\r\n      marginRight: \"-50%\",\r\n      transform: \"translate(-50%, -50%)\",\r\n      width: \"400px\",\r\n      height: \"auto\",\r\n      padding: \"20px\",\r\n      borderRadius: \"8px\",\r\n      boxShadow: \"0 4px 8px rgba(0, 0, 0, 0.2)\",\r\n    },\r\n  }}\r\n>\r\n  <div className=\"modal-header\">\r\n    <h5 className=\"modal-title\">Alert</h5>\r\n    <button\r\n      type=\"button\"\r\n      className=\"close\"\r\n      onClick={() => setIsAlertModalOpen(false)}\r\n    >\r\n      <span>&times;</span>\r\n    </button>\r\n  </div>\r\n  <div className=\"modal-body\">\r\n    <p>{alertMessage}</p>\r\n  </div>\r\n  <div className=\"modal-footer\">\r\n    <button\r\n      type=\"button\"\r\n      className=\"btn btn-secondary\"\r\n      onClick={() => setIsAlertModalOpen(false)}\r\n    >\r\n      Close\r\n    </button>\r\n  </div>\r\n</Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}