{"ast":null,"code":"var _jsxFileName = \"C:\\\\Documents for a job\\\\Certifications\\\\Meta Frontend\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Tree } from 'react-d3-tree';\nimport './styles.css'; // Import the CSS file containing styles\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [treeData, setTreeData] = useState({\n    name: 'Information System',\n    children: [{\n      name: 'Stakeholder',\n      children: []\n    }, {\n      name: 'Infrastructure',\n      children: []\n    }]\n  });\n  const addChild = (parentId, childName) => {\n    const newNode = {\n      name: childName,\n      children: []\n    };\n    setTreeData(prevState => {\n      const updatedTreeData = JSON.parse(JSON.stringify(prevState)); // Deep copy the state\n      const parentNode = findNode(updatedTreeData, parentId);\n      if (parentNode) {\n        parentNode.children.push(newNode);\n      }\n      return updatedTreeData;\n    });\n  };\n  const findNode = (tree, id) => {\n    if (tree.name === id) {\n      return tree;\n    }\n    if (tree.children) {\n      for (let child of tree.children) {\n        const foundNode = findNode(child, id);\n        if (foundNode) {\n          return foundNode;\n        }\n      }\n    }\n    return null;\n  };\n  const removeChild = (parentId, childName) => {\n    setTreeData(prevState => {\n      const updatedTreeData = JSON.parse(JSON.stringify(prevState)); // Deep copy the state\n      const parentNode = findNode(updatedTreeData, parentId);\n      if (parentNode) {\n        parentNode.children = parentNode.children.filter(child => child.name !== childName);\n      }\n      return updatedTreeData;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tree-container\",\n      children: /*#__PURE__*/_jsxDEV(Tree, {\n        data: treeData,\n        orientation: \"vertical\",\n        translate: {\n          x: 300,\n          y: 50\n        },\n        nodeSvgShape: {\n          shape: 'circle',\n          shapeProps: {\n            r: 10,\n            fill: 'lightblue'\n          }\n        },\n        nodeLabelComponent: {\n          render: /*#__PURE__*/_jsxDEV(NodeLabel, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this),\n          foreignObjectWrapper: {\n            y: 24\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"i6lr9mH1vakdm6/SWjV3mhOy4Pk=\");\n_c = App;\nconst NodeLabel = ({\n  nodeData\n}) => /*#__PURE__*/_jsxDEV(\"text\", {\n  textAnchor: \"middle\",\n  dominantBaseline: \"central\",\n  children: nodeData.name\n}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 80,\n  columnNumber: 37\n}, this);\n_c2 = NodeLabel;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"NodeLabel\");","map":{"version":3,"names":["React","useState","Tree","jsxDEV","_jsxDEV","App","_s","treeData","setTreeData","name","children","addChild","parentId","childName","newNode","prevState","updatedTreeData","JSON","parse","stringify","parentNode","findNode","push","tree","id","child","foundNode","removeChild","filter","className","data","orientation","translate","x","y","nodeSvgShape","shape","shapeProps","r","fill","nodeLabelComponent","render","NodeLabel","fileName","_jsxFileName","lineNumber","columnNumber","foreignObjectWrapper","_c","nodeData","textAnchor","dominantBaseline","_c2","$RefreshReg$"],"sources":["C:/Documents for a job/Certifications/Meta Frontend/my-react-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Tree } from 'react-d3-tree';\nimport './styles.css'; // Import the CSS file containing styles\n\nconst App = () => {\n  const [treeData, setTreeData] = useState({\n    name: 'Information System',\n    children: [\n      {\n        name: 'Stakeholder',\n        children: [],\n      },\n      {\n        name: 'Infrastructure',\n        children: [],\n      },\n    ],\n  });\n\n  const addChild = (parentId, childName) => {\n    const newNode = {\n      name: childName,\n      children: [],\n    };\n\n    setTreeData((prevState) => {\n      const updatedTreeData = JSON.parse(JSON.stringify(prevState)); // Deep copy the state\n      const parentNode = findNode(updatedTreeData, parentId);\n      if (parentNode) {\n        parentNode.children.push(newNode);\n      }\n      return updatedTreeData;\n    });\n  };\n\n  const findNode = (tree, id) => {\n    if (tree.name === id) {\n      return tree;\n    }\n    if (tree.children) {\n      for (let child of tree.children) {\n        const foundNode = findNode(child, id);\n        if (foundNode) {\n          return foundNode;\n        }\n      }\n    }\n    return null;\n  };\n\n  const removeChild = (parentId, childName) => {\n    setTreeData((prevState) => {\n      const updatedTreeData = JSON.parse(JSON.stringify(prevState)); // Deep copy the state\n      const parentNode = findNode(updatedTreeData, parentId);\n      if (parentNode) {\n        parentNode.children = parentNode.children.filter((child) => child.name !== childName);\n      }\n      return updatedTreeData;\n    });\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"tree-container\">\n        <Tree\n          data={treeData}\n          orientation=\"vertical\"\n          translate={{ x: 300, y: 50 }}\n          nodeSvgShape={{ shape: 'circle', shapeProps: { r: 10, fill: 'lightblue' } }}\n          nodeLabelComponent={{\n            render: <NodeLabel />,\n            foreignObjectWrapper: { y: 24 },\n          }}\n        />\n      </div>\n    </div>\n  );\n};\n\nconst NodeLabel = ({ nodeData }) => <text textAnchor=\"middle\" dominantBaseline=\"central\">{nodeData.name}</text>;\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}