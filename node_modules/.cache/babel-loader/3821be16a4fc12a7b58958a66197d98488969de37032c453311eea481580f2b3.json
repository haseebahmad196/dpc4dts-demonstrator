{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  var _selectedInformationF, _selectedInformationF2;\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [informationFlows, setInformationFlows] = useState([]);\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n\n  // Function to check if two nodes are at the same level\n  const areSameLevel = (node1, node2) => {\n    return node1.data.level === node2.data.level;\n  };\n\n  // Function to find a path between two nodes\n  const findPath = (sourceId, targetId) => {\n    const visited = new Set();\n    const queue = [[sourceId]];\n    while (queue.length > 0) {\n      const path = queue.shift();\n      const node = path[path.length - 1];\n      if (node === targetId) {\n        return path;\n      }\n      if (!visited.has(node)) {\n        visited.add(node);\n        edges.filter(edge => edge.source === node || edge.target === node).forEach(edge => {\n          const nextNode = edge.source === node ? edge.target : edge.source;\n          queue.push([...path, nextNode]);\n        });\n      }\n    }\n    return [];\n  };\n\n  // Function to reset the selection of nodes and edges\n  const resetSelection = () => {\n    setEnableInformationFlow(!enableInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(true);\n      setSourceNode(null);\n      setDestinationNode(null);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          border: \"none\"\n        }\n      })));\n      setEdges(eds => eds.map(edge => ({\n        ...edge,\n        animated: false,\n        style: {\n          stroke: \"black\"\n        }\n      })));\n    }\n  };\n\n  // Function to reset the graph styles\n  const resetGraphs = () => {\n    setNodes(nds => nds.map(n => ({\n      ...n,\n      style: {\n        border: \"none\"\n      }\n    })));\n    setEdges(eds => eds.map(edge => ({\n      ...edge,\n      animated: false,\n      style: {\n        stroke: \"black\"\n      }\n    })));\n    setSelectedFlowShow(false);\n  };\n\n  // Function to show all information flows on the graph\n  const showInformationFlowOnTheGraphs = () => {\n    informationFlows.forEach(flow => {\n      const [sourceNode, destinationNode] = flow;\n      showOneFlowOnGraph(sourceNode, destinationNode);\n    });\n    setSelectedFlowShow(false);\n  };\n\n  // Function to show information flows for a selected holon\n  const showSelectedHolonFlowOnTheGraphs = () => {\n    var _selectedNode$data;\n    resetGraphs();\n    let selectedLabel = selectedNode === null || selectedNode === void 0 ? void 0 : (_selectedNode$data = selectedNode.data) === null || _selectedNode$data === void 0 ? void 0 : _selectedNode$data.label;\n    informationFlows.forEach(flow => {\n      var _flow$0$data, _flow$1$data;\n      let flowLabel0 = (_flow$0$data = flow[0].data) === null || _flow$0$data === void 0 ? void 0 : _flow$0$data.label;\n      let flowLabel1 = (_flow$1$data = flow[1].data) === null || _flow$1$data === void 0 ? void 0 : _flow$1$data.label;\n      if (flowLabel0 === selectedLabel || flowLabel1 === selectedLabel) {\n        const [sourceNode, destinationNode] = flow;\n        showOneFlowOnGraph(sourceNode, destinationNode);\n      }\n    });\n    let newInformationFlows = [];\n    informationFlows.forEach(flow => {\n      var _flow$0$data2, _flow$1$data2;\n      let flowLabel0 = (_flow$0$data2 = flow[0].data) === null || _flow$0$data2 === void 0 ? void 0 : _flow$0$data2.label;\n      let flowLabel1 = (_flow$1$data2 = flow[1].data) === null || _flow$1$data2 === void 0 ? void 0 : _flow$1$data2.label;\n      if (flowLabel0 === selectedLabel || flowLabel1 === selectedLabel) {\n        newInformationFlows.push(flow);\n      }\n    });\n    setSelectedInformationFlows(newInformationFlows);\n    setSelectedFlowShow(true);\n  };\n\n  // Function to show a single flow on the graph\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\n    setNodes(nds => nds.map(n => n.id === sourceNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid blue\"\n      }\n    } : n.id === destinationNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid green\"\n      }\n    } : n));\n    const path = findPath(sourceNode.id, destinationNode.id);\n    if (!path || path.length === 0) {\n      console.error(\"No path found between the selected nodes.\");\n      return;\n    }\n    setEdges(eds => eds.map(edge => {\n      var _edge$style, _edge$style2;\n      const isInPath = path.includes(edge.source) && path.includes(edge.target);\n      const isForwardDirection = edge.source === path[0] && edge.target === path[1];\n      const isBackwardDirection = edge.target === path[0] && edge.source === path[1];\n      return {\n        ...edge,\n        animated: isInPath ? true : edge.animated,\n        style: {\n          ...edge.style,\n          stroke: isInPath ? \"green\" : (_edge$style = edge.style) === null || _edge$style === void 0 ? void 0 : _edge$style.stroke,\n          strokeDasharray: isInPath ? \"5,5\" : (_edge$style2 = edge.style) === null || _edge$style2 === void 0 ? void 0 : _edge$style2.strokeDasharray\n        },\n        markerEnd: isInPath ? {\n          type: MarkerType.ArrowClosed,\n          color: \"green\",\n          orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\"\n        } : edge.markerEnd\n      };\n    }));\n  };\n\n  // Function to export information flows as a JSON file\n  const exportInformationFlows = () => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(informationFlows));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n\n  // Function to import information flows from a JSON file\n  const importInformationFlows = event => {\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      try {\n        const importedFlows = JSON.parse(e.target.result);\n        if (Array.isArray(importedFlows)) {\n          setInformationFlows(importedFlows.map(([sourceNode, destinationNode]) => {\n            return [nodes.find(node => node.id === sourceNode.id) || sourceNode, nodes.find(node => node.id === destinationNode.id) || destinationNode];\n          }));\n          alert(\"Information Flows loaded successfully.\");\n        } else {\n          alert(\"Invalid JSON format.\");\n        }\n      } catch (error) {\n        alert(\"Failed to load the JSON file. Please check the file format.\");\n      }\n    };\n    if (event.target.files.length > 0) {\n      fileReader.readAsText(event.target.files[0]);\n    }\n  };\n  const handleNodeClick = (event, nodeData) => {\n    var _informationFlows$fin;\n    const id = nodeData.id;\n    const node = nodes.find(n => n.id === id);\n    setSelectedNode(node);\n    const selectedInformationFlow = informationFlows === null || informationFlows === void 0 ? void 0 : (_informationFlows$fin = informationFlows.find(flow => flow.find(flowId => (flowId === null || flowId === void 0 ? void 0 : flowId.id) === nodeData.id))) === null || _informationFlows$fin === void 0 ? void 0 : _informationFlows$fin.find(infoFlow => (infoFlow === null || infoFlow === void 0 ? void 0 : infoFlow.id) === (nodeData === null || nodeData === void 0 ? void 0 : nodeData.id));\n    setSelectedInformationFlow(selectedInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(false);\n      if (!sourceNode) {\n        setSourceNode(node);\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid blue\"\n          }\n        } : n));\n      } else if (sourceNode.id !== id) {\n        if (!areSameLevel(sourceNode, node)) {\n          alert(\"Information flow can only be added between nodes at the same level.\");\n          return;\n        }\n        const path = findPath(sourceNode.id, node.id);\n        setEdges(eds => eds.map(edge => {\n          var _edge$style3, _edge$style4, _edge$style5;\n          const isInPath = path.includes(edge.source) && path.includes(edge.target);\n          return {\n            ...edge,\n            animated: (edge === null || edge === void 0 ? void 0 : (_edge$style3 = edge.style) === null || _edge$style3 === void 0 ? void 0 : _edge$style3.stroke) === \"green\" || isInPath ? true : false,\n            style: {\n              stroke: (edge === null || edge === void 0 ? void 0 : (_edge$style4 = edge.style) === null || _edge$style4 === void 0 ? void 0 : _edge$style4.stroke) === \"green\" ? \"green\" : isInPath ? \"green\" : \"black\"\n            },\n            markerEnd: {\n              type: (edge === null || edge === void 0 ? void 0 : (_edge$style5 = edge.style) === null || _edge$style5 === void 0 ? void 0 : _edge$style5.stroke) === \"green\" || isInPath ? MarkerType.ArrowClosed : null,\n              color: \"green\",\n              width: 20,\n              height: 20\n            }\n          };\n        }));\n        setDestinationNode(node);\n        let informationFl = [...informationFlows];\n        const isDuplicate = informationFl.some(flow => flow[0].id === sourceNode.id && flow[1].id === node.id);\n        if (!isDuplicate) {\n          informationFl.push([sourceNode, node]);\n          setInformationFlows(informationFl);\n        }\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid green\"\n          }\n        } : n));\n        setTimeout(resetSelection, 1000);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"98vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-8\",\n      style: {\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-3\",\n        style: {\n          position: \"absolute\",\n          top: -88,\n          right: \"-23vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: resetSelection,\n          children: \"Add Information Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 11\n        }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-secondary ml-2 mt-10\",\n          onClick: exportInformationFlows,\n          children: \"Export Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importInformationFlows,\n          style: {\n            display: \"none\"\n          },\n          id: \"uploadFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"uploadFile\",\n          className: \"btn btn-secondary ml-2 mt-2\",\n          children: \"Import Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes.map(node => ({\n          ...node,\n          data: {\n            ...node.data,\n            disable: disableAdd\n          }\n        })),\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: handleNodeClick,\n        onPaneClick: () => setSelectedNode(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }, this), sourceNode && destinationNode == null ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 mb-2 bg-secondary text-white\",\n        children: \"Select the Destination Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }, this) : \"\", resetFlow & enableInformationFlow ? /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"fixed\",\n        top: \"90%\",\n        left: \"20%\"\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-3 mb-2 bg-secondary text-white\",\n        children: \"Select the Source Node\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 9\n    }, this) : \"\", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-4\",\n      style: {\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mr-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Holon Details\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 385,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nameofNode\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 387,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nameofNode\",\n              className: \"form-control\",\n              value: selectedNode.data.label,\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  label: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 388,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 386,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeDescription\",\n              children: \"Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 408,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              id: \"nodeDescription\",\n              className: \"form-control\",\n              style: {\n                height: \"200px\",\n                width: \"100%\"\n              },\n              placeholder: \"An example description...\",\n              value: selectedNode.data.description || \"\",\n              onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n                ...node,\n                data: {\n                  ...node.data,\n                  description: e.target.value\n                }\n              } : node))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 409,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"border border-dark p-4 my-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              className: \"mb-3\",\n              children: \"Information Flows\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 435,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              value: informationFlows.length > 0 ? selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF = selectedInformationFlow.data) === null || _selectedInformationF === void 0 ? void 0 : _selectedInformationF.label : selectedNode.data.label,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 436,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group mb-3\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"nodeInfoFlows\",\n              children: \"Information Flows Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 449,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              id: \"nodeInfoFlows\",\n              className: \"form-control\",\n              style: {\n                height: \"100px\",\n                width: \"100%\"\n              },\n              value: informationFlows.length > 0 ? selectedInformationFlow === null || selectedInformationFlow === void 0 ? void 0 : (_selectedInformationF2 = selectedInformationFlow.data) === null || _selectedInformationF2 === void 0 ? void 0 : _selectedInformationF2.description : selectedNode.data.description,\n              readOnly: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 452,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 448,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: enableInformationFlow && /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"lead\",\n              children: \"Selected Information Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 466,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: () => showInformationFlowOnTheGraphs(),\n              children: \"Show All Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 472,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success mx-1\",\n              onClick: () => showSelectedHolonFlowOnTheGraphs(),\n              children: \"Selected Holon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 478,\n              columnNumber: 17\n            }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-primary mx-2\",\n              onClick: resetGraphs,\n              children: \"Reset Flow\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 485,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 471,\n            columnNumber: 15\n          }, this), !selectedFlowShow && informationFlows.map((nodePair, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 alert alert-success\",\n              style: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 506,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 505,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  gap: 20\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-success\",\n                  onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                  children: \"Show Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 512,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-danger\",\n                  onClick: () => {\n                    const nodeId1 = nodePair[0].id;\n                    const nodeId2 = nodePair[1].id;\n                    setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                    resetGraphs();\n                  },\n                  children: \"Delete Information Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 520,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 511,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 496,\n              columnNumber: 21\n            }, this);\n          }), selectedFlowShow && selectedInformationFlows.map((nodePair, index) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"mt-3 alert alert-success\",\n              style: {\n                display: \"flex\",\n                justifyContent: \"space-between\",\n                alignItems: \"center\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"strong\", {\n                  children: [nodePair[0].data.label, \" \", \"-->\", \" \", nodePair[1].data.label]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 557,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 556,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"flex\",\n                  gap: 20\n                },\n                children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-success\",\n                  onClick: () => showOneFlowOnGraph(nodePair[0], nodePair[1]),\n                  children: \"Show Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 563,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                  className: \"btn btn-danger\",\n                  onClick: () => {\n                    const nodeId1 = nodePair[0].id;\n                    const nodeId2 = nodePair[1].id;\n                    setInformationFlows(flows => flows.filter(pair => !(pair[0].id === nodeId1 && pair[1].id === nodeId2)));\n                    resetGraphs();\n                  },\n                  children: \"Delete Information Flow\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 571,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 562,\n                columnNumber: 23\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 547,\n              columnNumber: 21\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 433,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 597,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 378,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: isModalOpen,\n      onRequestClose: () => setIsModalOpen(false),\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"modal-title\",\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"close\",\n          onClick: () => setIsModalOpen(false),\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 608,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"newNodeLabel\",\n            children: \"New Node Label\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 613,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"newNodeLabel\",\n            className: \"form-control\",\n            placeholder: \"New Node Label\",\n            value: newNodeLabel,\n            onChange: e => setNewNodeLabel(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 614,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-secondary\",\n          onClick: () => setIsModalOpen(false),\n          children: \"Close\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn btn-primary\",\n          onClick: () => {\n            setNodes(nds => [...nds, {\n              id: `${nds.length + 1}`,\n              type: \"customNode\",\n              data: {\n                label: newNodeLabel,\n                level: 1\n              },\n              // Set the level here\n              position: {\n                x: Math.random() * 400,\n                y: Math.random() * 400\n              }\n            }]);\n            setIsModalOpen(false);\n            setNewNodeLabel(\"\");\n          },\n          children: \"Add Node\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 624,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 309,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"BceDYfEKdLy9oQsGhAkX/RAO24I=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","jsxDEV","_jsxDEV","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","_selectedInformationF","_selectedInformationF2","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","selectedInformationFlow","setSelectedInformationFlow","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","setDisableAdd","resetFlow","setResetFlow","informationFlows","setInformationFlows","selectedInformationFlows","setSelectedInformationFlows","selectedFlowShow","setSelectedFlowShow","onConnect","params","eds","areSameLevel","node1","node2","data","level","findPath","sourceId","targetId","visited","Set","queue","length","path","shift","node","has","add","filter","edge","source","target","forEach","nextNode","push","resetSelection","nds","map","n","style","border","animated","stroke","resetGraphs","showInformationFlowOnTheGraphs","flow","showOneFlowOnGraph","showSelectedHolonFlowOnTheGraphs","_selectedNode$data","selectedLabel","label","_flow$0$data","_flow$1$data","flowLabel0","flowLabel1","newInformationFlows","_flow$0$data2","_flow$1$data2","id","console","error","_edge$style","_edge$style2","isInPath","includes","isForwardDirection","isBackwardDirection","strokeDasharray","markerEnd","type","ArrowClosed","color","orient","exportInformationFlows","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","importInformationFlows","event","fileReader","FileReader","onload","e","importedFlows","parse","result","Array","isArray","find","alert","files","readAsText","handleNodeClick","nodeData","_informationFlows$fin","flowId","infoFlow","_edge$style3","_edge$style4","_edge$style5","width","height","informationFl","isDuplicate","some","setTimeout","className","display","children","position","top","right","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","htmlFor","disable","fitView","onNodeClick","onPaneClick","left","borderLeft","value","placeholder","description","readOnly","nodePair","index","justifyContent","alignItems","gap","nodeId1","nodeId2","flows","pair","isOpen","onRequestClose","x","Math","random","y","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd, setDisableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n  const [selectedInformationFlows, setSelectedInformationFlows] = useState([]);\r\n  const [selectedFlowShow, setSelectedFlowShow] = useState(false);\r\n\r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n\r\n  // Function to check if two nodes are at the same level\r\n  const areSameLevel = (node1, node2) => {\r\n    return node1.data.level === node2.data.level;\r\n  };\r\n\r\n  // Function to find a path between two nodes\r\n  const findPath = (sourceId, targetId) => {\r\n    const visited = new Set();\r\n    const queue = [[sourceId]];\r\n\r\n    while (queue.length > 0) {\r\n      const path = queue.shift();\r\n      const node = path[path.length - 1];\r\n\r\n      if (node === targetId) {\r\n        return path;\r\n      }\r\n\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        edges\r\n          .filter((edge) => edge.source === node || edge.target === node)\r\n          .forEach((edge) => {\r\n            const nextNode = edge.source === node ? edge.target : edge.source;\r\n            queue.push([...path, nextNode]);\r\n          });\r\n      }\r\n    }\r\n    return [];\r\n  };\r\n\r\n  // Function to reset the selection of nodes and edges\r\n  const resetSelection = () => {\r\n    setEnableInformationFlow(!enableInformationFlow);\r\n    if (enableInformationFlow) {\r\n      setResetFlow(true);\r\n      setSourceNode(null);\r\n      setDestinationNode(null);\r\n      setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n      setEdges((eds) =>\r\n        eds.map((edge) => ({\r\n          ...edge,\r\n          animated: false,\r\n          style: { stroke: \"black\" },\r\n        }))\r\n      );\r\n    }\r\n  };\r\n\r\n  // Function to reset the graph styles\r\n  const resetGraphs = () => {\r\n    setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n    setEdges((eds) =>\r\n      eds.map((edge) => ({\r\n        ...edge,\r\n        animated: false,\r\n        style: { stroke: \"black\" },\r\n      }))\r\n    );\r\n    setSelectedFlowShow(false);\r\n  };\r\n\r\n  // Function to show all information flows on the graph\r\n  const showInformationFlowOnTheGraphs = () => {\r\n    informationFlows.forEach((flow) => {\r\n      const [sourceNode, destinationNode] = flow;\r\n      showOneFlowOnGraph(sourceNode, destinationNode);\r\n    });\r\n    setSelectedFlowShow(false);\r\n  };\r\n\r\n  // Function to show information flows for a selected holon\r\n  const showSelectedHolonFlowOnTheGraphs = () => {\r\n    resetGraphs();\r\n    let selectedLabel = selectedNode?.data?.label;\r\n    informationFlows.forEach((flow) => {\r\n      let flowLabel0 = flow[0].data?.label;\r\n      let flowLabel1 = flow[1].data?.label;\r\n      if (flowLabel0 === selectedLabel || flowLabel1 === selectedLabel) {\r\n        const [sourceNode, destinationNode] = flow;\r\n        showOneFlowOnGraph(sourceNode, destinationNode);\r\n      }\r\n    });\r\n    let newInformationFlows = [];\r\n    informationFlows.forEach((flow) => {\r\n      let flowLabel0 = flow[0].data?.label;\r\n      let flowLabel1 = flow[1].data?.label;\r\n      if (flowLabel0 === selectedLabel || flowLabel1 === selectedLabel) {\r\n        newInformationFlows.push(flow);\r\n      }\r\n    });\r\n    setSelectedInformationFlows(newInformationFlows);\r\n    setSelectedFlowShow(true);\r\n  };\r\n\r\n  // Function to show a single flow on the graph\r\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\r\n    setNodes((nds) =>\r\n      nds.map((n) =>\r\n        n.id === sourceNode.id\r\n          ? { ...n, style: { border: \"2px solid blue\" } }\r\n          : n.id === destinationNode.id\r\n          ? { ...n, style: { border: \"2px solid green\" } }\r\n          : n\r\n      )\r\n    );\r\n\r\n    const path = findPath(sourceNode.id, destinationNode.id);\r\n\r\n    if (!path || path.length === 0) {\r\n      console.error(\"No path found between the selected nodes.\");\r\n      return;\r\n    }\r\n\r\n    setEdges((eds) =>\r\n      eds.map((edge) => {\r\n        const isInPath =\r\n          path.includes(edge.source) && path.includes(edge.target);\r\n        const isForwardDirection =\r\n          edge.source === path[0] && edge.target === path[1];\r\n        const isBackwardDirection =\r\n          edge.target === path[0] && edge.source === path[1];\r\n\r\n        return {\r\n          ...edge,\r\n          animated: isInPath ? true : edge.animated,\r\n          style: {\r\n            ...edge.style,\r\n            stroke: isInPath ? \"green\" : edge.style?.stroke,\r\n            strokeDasharray: isInPath ? \"5,5\" : edge.style?.strokeDasharray,\r\n          },\r\n          markerEnd: isInPath\r\n            ? {\r\n                type: MarkerType.ArrowClosed,\r\n                color: \"green\",\r\n                orient: isForwardDirection ? \"auto\" : \"auto-start-reverse\",\r\n              }\r\n            : edge.markerEnd,\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  // Function to export information flows as a JSON file\r\n  const exportInformationFlows = () => {\r\n    const dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(informationFlows));\r\n    const downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\r\n    document.body.appendChild(downloadAnchorNode);\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  };\r\n\r\n  // Function to import information flows from a JSON file\r\n  const importInformationFlows = (event) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = (e) => {\r\n      try {\r\n        const importedFlows = JSON.parse(e.target.result);\r\n        if (Array.isArray(importedFlows)) {\r\n          setInformationFlows(\r\n            importedFlows.map(([sourceNode, destinationNode]) => {\r\n              return [\r\n                nodes.find((node) => node.id === sourceNode.id) || sourceNode,\r\n                nodes.find((node) => node.id === destinationNode.id) ||\r\n                  destinationNode,\r\n              ];\r\n            })\r\n          );\r\n          alert(\"Information Flows loaded successfully.\");\r\n        } else {\r\n          alert(\"Invalid JSON format.\");\r\n        }\r\n      } catch (error) {\r\n        alert(\"Failed to load the JSON file. Please check the file format.\");\r\n      }\r\n    };\r\n\r\n    if (event.target.files.length > 0) {\r\n      fileReader.readAsText(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const handleNodeClick = (event, nodeData) => {\r\n    const id = nodeData.id;\r\n    const node = nodes.find((n) => n.id === id);\r\n    setSelectedNode(node);\r\n    const selectedInformationFlow = informationFlows\r\n      ?.find((flow) => flow.find((flowId) => flowId?.id === nodeData.id))\r\n      ?.find((infoFlow) => infoFlow?.id === nodeData?.id);\r\n    setSelectedInformationFlow(selectedInformationFlow);\r\n\r\n    if (enableInformationFlow) {\r\n      setResetFlow(false);\r\n      if (!sourceNode) {\r\n        setSourceNode(node);\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id ? { ...n, style: { border: \"2px solid blue\" } } : n\r\n          )\r\n        );\r\n      } else if (sourceNode.id !== id) {\r\n        if (!areSameLevel(sourceNode, node)) {\r\n          alert(\"Information flow can only be added between nodes at the same level.\");\r\n          return;\r\n        }\r\n\r\n        const path = findPath(sourceNode.id, node.id);\r\n        setEdges((eds) =>\r\n          eds.map((edge) => {\r\n            const isInPath =\r\n              path.includes(edge.source) && path.includes(edge.target);\r\n            return {\r\n              ...edge,\r\n              animated:\r\n                edge?.style?.stroke === \"green\" || isInPath ? true : false,\r\n              style: {\r\n                stroke:\r\n                  edge?.style?.stroke === \"green\"\r\n                    ? \"green\"\r\n                    : isInPath\r\n                    ? \"green\"\r\n                    : \"black\",\r\n              },\r\n              markerEnd: {\r\n                type:\r\n                  edge?.style?.stroke === \"green\" || isInPath\r\n                    ? MarkerType.ArrowClosed\r\n                    : null,\r\n                color: \"green\",\r\n                width: 20,\r\n                height: 20,\r\n              },\r\n            };\r\n          })\r\n        );\r\n\r\n        setDestinationNode(node);\r\n        let informationFl = [...informationFlows];\r\n\r\n        const isDuplicate = informationFl.some(\r\n          (flow) => flow[0].id === sourceNode.id && flow[1].id === node.id\r\n        );\r\n\r\n        if (!isDuplicate) {\r\n          informationFl.push([sourceNode, node]);\r\n          setInformationFlows(informationFl);\r\n        }\r\n\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id\r\n              ? { ...n, style: { border: \"2px solid green\" } }\r\n              : n\r\n          )\r\n        );\r\n        setTimeout(resetSelection, 1000);\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className=\"container-fluid\"\r\n      style={{ display: \"flex\", height: \"100vh\", width: \"98vw\" }}\r\n    >\r\n      <div className=\"col-8\" style={{ height: \"100%\" }}>\r\n        <div\r\n          className=\"d-flex justify-content-between align-items-center mb-3\"\r\n          style={{ position: \"absolute\", top: -88, right: \"-23vw\" }}\r\n        >\r\n          <button className={\"btn btn-success\"} onClick={resetSelection}>\r\n            Add Information Flow\r\n          </button>\r\n          {informationFlows.length > 0 && (\r\n            <button\r\n              className={\"btn btn-secondary ml-2 mt-10\"}\r\n              onClick={exportInformationFlows}\r\n            >\r\n              Export Information Flows\r\n            </button>\r\n          )}\r\n\r\n          <input\r\n            type=\"file\"\r\n            accept=\".json\"\r\n            onChange={importInformationFlows}\r\n            style={{ display: \"none\" }}\r\n            id=\"uploadFile\"\r\n          />\r\n          <label htmlFor=\"uploadFile\" className=\"btn btn-secondary ml-2 mt-2\">\r\n            Import Information Flows\r\n          </label>\r\n        </div>\r\n\r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes.map((node) => ({\r\n            ...node,\r\n            data: {\r\n              ...node.data,\r\n              disable: disableAdd,\r\n            },\r\n          }))}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={handleNodeClick}\r\n          onPaneClick={() => setSelectedNode(null)}\r\n        />\r\n      </div>\r\n      {sourceNode && destinationNode == null ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"p-3 mb-2 bg-secondary text-white\">\r\n            Select the Destination Node\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      {resetFlow & enableInformationFlow ? (\r\n        <div style={{ position: \"fixed\", top: \"90%\", left: \"20%\" }}>\r\n          <div className=\"p-3 mb-2 bg-secondary text-white\">Select the Source Node</div>\r\n        </div>\r\n      ) : (\r\n        \"\"\r\n      )}\r\n      <div\r\n        className=\"col-4\"\r\n        style={{ padding: \"10px\", borderLeft: \"1px solid #ccc\" }}\r\n      >\r\n        {selectedNode ? (\r\n          <div className=\"mr-3\">\r\n            <div className=\"border border-dark p-4\">\r\n              <h4>Holon Details</h4>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nameofNode\">Name</label>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nameofNode\"\r\n                  className=\"form-control\"\r\n                  value={selectedNode.data.label}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? {\r\n                              ...node,\r\n                              data: { ...node.data, label: e.target.value },\r\n                            }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeDescription\">Description</label>\r\n                <textarea\r\n                  id=\"nodeDescription\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"200px\", width: \"100%\" }}\r\n                  placeholder=\"An example description...\"\r\n                  value={selectedNode.data.description || \"\"}\r\n                  onChange={(e) =>\r\n                    setNodes((nds) =>\r\n                      nds.map((node) =>\r\n                        node.id === selectedNode.id\r\n                          ? {\r\n                              ...node,\r\n                              data: {\r\n                                ...node.data,\r\n                                description: e.target.value,\r\n                              },\r\n                            }\r\n                          : node\r\n                      )\r\n                    )\r\n                  }\r\n                />\r\n              </div>\r\n            </div>\r\n            <div className=\"border border-dark p-4 my-2\">\r\n              <div className=\"form-group mb-3\">\r\n                <h4 className=\"mb-3\">Information Flows</h4>\r\n                <input\r\n                  type=\"text\"\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.data?.label\r\n                      : selectedNode.data.label\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n              <div className=\"form-group mb-3\">\r\n                <label htmlFor=\"nodeInfoFlows\">\r\n                  Information Flows Description\r\n                </label>\r\n                <textarea\r\n                  type=\"text\"\r\n                  id=\"nodeInfoFlows\"\r\n                  className=\"form-control\"\r\n                  style={{ height: \"100px\", width: \"100%\" }}\r\n                  value={\r\n                    informationFlows.length > 0\r\n                      ? selectedInformationFlow?.data?.description\r\n                      : selectedNode.data.description\r\n                  }\r\n                  readOnly\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                {enableInformationFlow && (\r\n                  <p className=\"lead\">Selected Information Flow</p>\r\n                )}\r\n              </div>\r\n              <div>\r\n                <button\r\n                  className={\"btn btn-success mx-1\"}\r\n                  onClick={() => showInformationFlowOnTheGraphs()}\r\n                >\r\n                  Show All Flow\r\n                </button>\r\n                <button\r\n                  className={\"btn btn-success mx-1\"}\r\n                  onClick={() => showSelectedHolonFlowOnTheGraphs()}\r\n                >\r\n                  Selected Holon\r\n                </button>\r\n                {informationFlows.length > 0 && (\r\n                  <button\r\n                    className={\"btn btn-primary mx-2\"}\r\n                    onClick={resetGraphs}\r\n                  >\r\n                    Reset Flow\r\n                  </button>\r\n                )}\r\n              </div>\r\n              {!selectedFlowShow &&\r\n                informationFlows.map((nodePair, index) => {\r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      className=\"mt-3 alert alert-success\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <div>\r\n                        <strong>\r\n                          {nodePair[0].data.label} {\"-->\"}{\" \"}\r\n                          {nodePair[1].data.label}\r\n                        </strong>\r\n                      </div>\r\n                      <div style={{ display: \"flex\", gap: 20 }}>\r\n                        <button\r\n                          className={\"btn btn-success\"}\r\n                          onClick={() =>\r\n                            showOneFlowOnGraph(nodePair[0], nodePair[1])\r\n                          }\r\n                        >\r\n                          Show Flow\r\n                        </button>\r\n                        <button\r\n                          className={\"btn btn-danger\"}\r\n                          onClick={() => {\r\n                            const nodeId1 = nodePair[0].id;\r\n                            const nodeId2 = nodePair[1].id;\r\n                            setInformationFlows((flows) =>\r\n                              flows.filter(\r\n                                (pair) =>\r\n                                  !(\r\n                                    pair[0].id === nodeId1 &&\r\n                                    pair[1].id === nodeId2\r\n                                  )\r\n                              )\r\n                            );\r\n                            resetGraphs();\r\n                          }}\r\n                        >\r\n                          Delete Information Flow\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n\r\n              {selectedFlowShow &&\r\n                selectedInformationFlows.map((nodePair, index) => {\r\n                  return (\r\n                    <div\r\n                      key={index}\r\n                      className=\"mt-3 alert alert-success\"\r\n                      style={{\r\n                        display: \"flex\",\r\n                        justifyContent: \"space-between\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <div>\r\n                        <strong>\r\n                          {nodePair[0].data.label} {\"-->\"}{\" \"}\r\n                          {nodePair[1].data.label}\r\n                        </strong>\r\n                      </div>\r\n                      <div style={{ display: \"flex\", gap: 20 }}>\r\n                        <button\r\n                          className={\"btn btn-success\"}\r\n                          onClick={() =>\r\n                            showOneFlowOnGraph(nodePair[0], nodePair[1])\r\n                          }\r\n                        >\r\n                          Show Flow\r\n                        </button>\r\n                        <button\r\n                          className={\"btn btn-danger\"}\r\n                          onClick={() => {\r\n                            const nodeId1 = nodePair[0].id;\r\n                            const nodeId2 = nodePair[1].id;\r\n                            setInformationFlows((flows) =>\r\n                              flows.filter(\r\n                                (pair) =>\r\n                                  !(\r\n                                    pair[0].id === nodeId1 &&\r\n                                    pair[1].id === nodeId2\r\n                                  )\r\n                              )\r\n                            );\r\n                            resetGraphs();\r\n                          }}\r\n                        >\r\n                          Delete Information Flow\r\n                        </button>\r\n                      </div>\r\n                    </div>\r\n                  );\r\n                })}\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          <div>No Selection</div>\r\n        )}\r\n      </div>\r\n      <Modal isOpen={isModalOpen} onRequestClose={() => setIsModalOpen(false)}>\r\n        <div className=\"modal-header\">\r\n          <h5 className=\"modal-title\">Add Node</h5>\r\n          <button\r\n            type=\"button\"\r\n            className=\"close\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            <span>&times;</span>\r\n          </button>\r\n        </div>\r\n        <div className=\"modal-body\">\r\n          <div className=\"form-group mb-3\">\r\n            <label htmlFor=\"newNodeLabel\">New Node Label</label>\r\n            <input\r\n              type=\"text\"\r\n              id=\"newNodeLabel\"\r\n              className=\"form-control\"\r\n              placeholder=\"New Node Label\"\r\n              value={newNodeLabel}\r\n              onChange={(e) => setNewNodeLabel(e.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"modal-footer\">\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-secondary\"\r\n            onClick={() => setIsModalOpen(false)}\r\n          >\r\n            Close\r\n          </button>\r\n          <button\r\n            type=\"button\"\r\n            className=\"btn btn-primary\"\r\n            onClick={() => {\r\n              setNodes((nds) => [\r\n                ...nds,\r\n                {\r\n                  id: `${nds.length + 1}`,\r\n                  type: \"customNode\",\r\n                  data: { label: newNodeLabel, level: 1 }, // Set the level here\r\n                  position: { x: Math.random() * 400, y: Math.random() * 400 },\r\n                },\r\n              ]);\r\n              setIsModalOpen(false);\r\n              setNewNodeLabel(\"\");\r\n            }}\r\n          >\r\n            Add Node\r\n          </button>\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}