{"ast":null,"code":"var _jsxFileName = \"C:\\\\Em1\\\\Kastel\\\\dpc4dts-demonstrator\\\\src\\\\CommunicationReactFlow.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport ReactFlow, { addEdge, useNodesState, useEdgesState, MarkerType } from \"reactflow\";\nimport Modal from \"react-modal\";\nimport \"reactflow/dist/style.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./styles.css\";\nimport CustomNodeFlow from \"./CustomNodeFlow\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst nodeTypes = {\n  customNode: CustomNodeFlow\n};\nconst fitViewOptions = {\n  padding: 0.5\n};\nModal.setAppElement(\"#root\");\nfunction CommunicationReactFlow(props) {\n  _s();\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\n  const [sourceNode, setSourceNode] = useState(null);\n  const [destinationNode, setDestinationNode] = useState();\n  const [selectedNode, setSelectedNode] = useState(null);\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\n  const [disableAdd, setDisableAdd] = useState(false);\n  const [resetFlow, setResetFlow] = useState(false);\n  const [informationFlows, setInformationFlows] = useState([]);\n  const [sameLevelFlows, setSameLevelFlows] = useState([]); // Stores same-level flows\n\n  const onConnect = useCallback(params => setEdges(eds => addEdge(params, eds)), [setEdges]);\n  const exportInformationFlows = () => {\n    const dataStr = \"data:text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(informationFlows));\n    const downloadAnchorNode = document.createElement(\"a\");\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\n    document.body.appendChild(downloadAnchorNode);\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n  const importInformationFlows = event => {\n    const fileReader = new FileReader();\n    fileReader.onload = e => {\n      try {\n        const importedFlows = JSON.parse(e.target.result);\n        if (Array.isArray(importedFlows)) {\n          setInformationFlows(importedFlows.map(([sourceNode, destinationNode]) => [nodes.find(node => node.id === sourceNode.id) || sourceNode, nodes.find(node => node.id === destinationNode.id) || destinationNode]));\n          alert(\"Information Flows loaded successfully.\");\n        } else {\n          alert(\"Invalid JSON format.\");\n        }\n      } catch (error) {\n        alert(\"Failed to load the JSON file. Please check the file format.\");\n      }\n    };\n    if (event.target.files.length > 0) {\n      fileReader.readAsText(event.target.files[0]);\n    }\n  };\n\n  // Function to get level of a node based on its `id`\n  const getNodeLevel = nodeId => {\n    var _node$data;\n    const node = nodes.find(n => n.id === nodeId);\n    return (node === null || node === void 0 ? void 0 : (_node$data = node.data) === null || _node$data === void 0 ? void 0 : _node$data.level) || 0; // Assuming `level` is predefined in each node's data\n  };\n  const handleNodeClick = (event, nodeData) => {\n    const id = nodeData.id;\n    const node = nodes.find(n => n.id === id);\n    setSelectedNode(node);\n    setSelectedInformationFlow(informationFlows.find(flow => flow.find(flowNode => flowNode.id === nodeData.id)));\n    if (enableInformationFlow) {\n      setResetFlow(false);\n      if (!sourceNode) {\n        setSourceNode(node);\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid blue\"\n          }\n        } : n));\n      } else if (sourceNode.id !== id) {\n        setDestinationNode(node);\n        const isDuplicate = informationFlows.some(flow => flow[0].id === sourceNode.id && flow[1].id === node.id);\n        if (!isDuplicate) {\n          setInformationFlows([...informationFlows, [sourceNode, node]]);\n        }\n        setNodes(nds => nds.map(n => n.id === node.id ? {\n          ...n,\n          style: {\n            border: \"2px solid green\"\n          }\n        } : n));\n        setTimeout(resetSelection, 1000);\n      }\n    }\n\n    // Update sameLevelFlows based on the selected node's level\n    updateSameLevelFlows(node);\n  };\n\n  // Update same-level flows for the selected node\n  const updateSameLevelFlows = node => {\n    const level = getNodeLevel(node.id);\n    const filteredFlows = informationFlows.filter(([source, target]) => getNodeLevel(source.id) === level && getNodeLevel(target.id) === level);\n    setSameLevelFlows(filteredFlows);\n  };\n  const showInformationFlowOnTheGraphs = () => {\n    informationFlows.forEach(flow => {\n      const [sourceNode, destinationNode] = flow;\n      showOneFlowOnGraph(sourceNode, destinationNode);\n    });\n  };\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\n    setNodes(nds => nds.map(n => n.id === sourceNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid blue\"\n      }\n    } : n.id === destinationNode.id ? {\n      ...n,\n      style: {\n        border: \"2px solid green\"\n      }\n    } : n));\n    const path = findPath(sourceNode.id, destinationNode.id);\n    if (!path || path.length === 0) {\n      console.error(\"No path found between the selected nodes.\");\n      return;\n    }\n    setEdges(eds => eds.map(edge => {\n      const isInPath = path.includes(edge.source) && path.includes(edge.target);\n      return {\n        ...edge,\n        animated: isInPath,\n        style: {\n          stroke: isInPath ? \"green\" : \"black\"\n        },\n        markerEnd: isInPath ? {\n          type: MarkerType.ArrowClosed,\n          color: \"green\",\n          orient: \"auto\"\n        } : undefined\n      };\n    }));\n  };\n  const findPath = (sourceId, targetId) => {\n    const visited = new Set();\n    const queue = [[sourceId]];\n    while (queue.length > 0) {\n      const path = queue.shift();\n      const node = path[path.length - 1];\n      if (node === targetId) return path;\n      if (!visited.has(node)) {\n        visited.add(node);\n        edges.filter(edge => edge.source === node || edge.target === node).forEach(edge => {\n          const nextNode = edge.source === node ? edge.target : edge.source;\n          queue.push([...path, nextNode]);\n        });\n      }\n    }\n    return [];\n  };\n  const resetSelection = () => {\n    setEnableInformationFlow(!enableInformationFlow);\n    if (enableInformationFlow) {\n      setResetFlow(true);\n      setSourceNode(null);\n      setDestinationNode(null);\n      setNodes(nds => nds.map(n => ({\n        ...n,\n        style: {\n          border: \"none\"\n        }\n      })));\n      setEdges(eds => eds.map(edge => ({\n        ...edge,\n        animated: false,\n        style: {\n          stroke: \"black\"\n        }\n      })));\n    }\n  };\n  const resetGraphs = () => {\n    setNodes(nds => nds.map(n => ({\n      ...n,\n      style: {\n        border: \"none\"\n      }\n    })));\n    setEdges(eds => eds.map(edge => ({\n      ...edge,\n      animated: false,\n      style: {\n        stroke: \"black\"\n      }\n    })));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container-fluid\",\n    style: {\n      display: \"flex\",\n      height: \"100vh\",\n      width: \"100vw\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-9\",\n      style: {\n        height: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex justify-content-between align-items-center mb-3\",\n        style: {\n          position: \"absolute\",\n          top: -88,\n          right: \"-23vw\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: resetSelection,\n          children: \"Add Information Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary ml-2\",\n          onClick: exportInformationFlows,\n          children: \"Export Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".json\",\n          onChange: importInformationFlows,\n          style: {\n            display: \"none\"\n          },\n          id: \"uploadFile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"uploadFile\",\n          className: \"btn btn-secondary ml-2 mt-2\",\n          children: \"Import Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 236,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodeTypes: nodeTypes,\n        nodes: nodes.map(node => ({\n          ...node,\n          data: {\n            ...node.data,\n            disable: disableAdd\n          }\n        })),\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onConnect: onConnect,\n        fitView: true,\n        fitViewOptions: fitViewOptions,\n        style: {\n          width: \"100%\",\n          height: \"90%\"\n        },\n        onNodeClick: handleNodeClick,\n        onPaneClick: () => setSelectedNode(null)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"col-3\",\n      style: {\n        padding: \"10px\",\n        borderLeft: \"1px solid #ccc\"\n      },\n      children: selectedNode ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mr-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Holon Details\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nameofNode\",\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"nameofNode\",\n            className: \"form-control\",\n            value: selectedNode.data.label,\n            onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n              ...node,\n              data: {\n                ...node.data,\n                label: e.target.value\n              }\n            } : node))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-group mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"nodeDescription\",\n            children: \"Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            id: \"nodeDescription\",\n            className: \"form-control\",\n            style: {\n              height: \"200px\",\n              width: \"100%\"\n            },\n            placeholder: \"An example description...\",\n            value: selectedNode.data.description || \"\",\n            onChange: e => setNodes(nds => nds.map(node => node.id === selectedNode.id ? {\n              ...node,\n              data: {\n                ...node.data,\n                description: e.target.value\n              }\n            } : node))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 279,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-success\",\n          onClick: showInformationFlowOnTheGraphs,\n          children: \"Show All Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 13\n        }, this), informationFlows.length > 0 && /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn-primary mx-2\",\n          onClick: resetGraphs,\n          children: \"Reset Flow\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n          className: \"mt-4\",\n          children: \"Same Level Information Flows\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 304,\n          columnNumber: 13\n        }, this), sameLevelFlows.map(([src, dest]) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert alert-success\",\n          style: {\n            display: \"flex\",\n            justifyContent: \"space-between\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [src.data.label, \" \", \" --> \", \" \", dest.data.label]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 308,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 307,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn btn-success\",\n            onClick: () => showOneFlowOnGraph(src, dest),\n            children: \"Show Flow\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 17\n          }, this)]\n        }, src.id + dest.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 15\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"No Selection\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 224,\n    columnNumber: 5\n  }, this);\n}\n_s(CommunicationReactFlow, \"snYKBVOq+Hm4FclhKwh4I9qkovA=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = CommunicationReactFlow;\nexport default CommunicationReactFlow;\nvar _c;\n$RefreshReg$(_c, \"CommunicationReactFlow\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","ReactFlow","addEdge","useNodesState","useEdgesState","MarkerType","Modal","CustomNodeFlow","jsxDEV","_jsxDEV","nodeTypes","customNode","fitViewOptions","padding","setAppElement","CommunicationReactFlow","props","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","sourceNode","setSourceNode","destinationNode","setDestinationNode","selectedNode","setSelectedNode","selectedInformationFlow","setSelectedInformationFlow","isModalOpen","setIsModalOpen","enableInformationFlow","setEnableInformationFlow","newNodeLabel","setNewNodeLabel","disableAdd","setDisableAdd","resetFlow","setResetFlow","informationFlows","setInformationFlows","sameLevelFlows","setSameLevelFlows","onConnect","params","eds","exportInformationFlows","dataStr","encodeURIComponent","JSON","stringify","downloadAnchorNode","document","createElement","setAttribute","body","appendChild","click","remove","importInformationFlows","event","fileReader","FileReader","onload","e","importedFlows","parse","target","result","Array","isArray","map","find","node","id","alert","error","files","length","readAsText","getNodeLevel","nodeId","_node$data","n","data","level","handleNodeClick","nodeData","flow","flowNode","nds","style","border","isDuplicate","some","setTimeout","resetSelection","updateSameLevelFlows","filteredFlows","filter","source","showInformationFlowOnTheGraphs","forEach","showOneFlowOnGraph","path","findPath","console","edge","isInPath","includes","animated","stroke","markerEnd","type","ArrowClosed","color","orient","undefined","sourceId","targetId","visited","Set","queue","shift","has","add","nextNode","push","resetGraphs","className","display","height","width","children","position","top","right","onClick","fileName","_jsxFileName","lineNumber","columnNumber","accept","onChange","htmlFor","disable","fitView","onNodeClick","onPaneClick","borderLeft","value","label","placeholder","description","src","dest","justifyContent","alignItems","_c","$RefreshReg$"],"sources":["C:/Em1/Kastel/dpc4dts-demonstrator/src/CommunicationReactFlow.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\r\nimport ReactFlow, {\r\n  addEdge,\r\n  useNodesState,\r\n  useEdgesState,\r\n  MarkerType,\r\n} from \"reactflow\";\r\nimport Modal from \"react-modal\";\r\nimport \"reactflow/dist/style.css\";\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles.css\";\r\nimport CustomNodeFlow from \"./CustomNodeFlow\";\r\n\r\nconst nodeTypes = {\r\n  customNode: CustomNodeFlow,\r\n};\r\n\r\nconst fitViewOptions = { padding: 0.5 };\r\n\r\nModal.setAppElement(\"#root\");\r\n\r\nfunction CommunicationReactFlow(props) {\r\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.nodes);\r\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.edges);\r\n  const [sourceNode, setSourceNode] = useState(null);\r\n  const [destinationNode, setDestinationNode] = useState();\r\n  const [selectedNode, setSelectedNode] = useState(null);\r\n  const [selectedInformationFlow, setSelectedInformationFlow] = useState(null);\r\n  const [isModalOpen, setIsModalOpen] = useState(false);\r\n  const [enableInformationFlow, setEnableInformationFlow] = useState(false);\r\n  const [newNodeLabel, setNewNodeLabel] = useState(\"\");\r\n  const [disableAdd, setDisableAdd] = useState(false);\r\n  const [resetFlow, setResetFlow] = useState(false);\r\n  const [informationFlows, setInformationFlows] = useState([]);\r\n  const [sameLevelFlows, setSameLevelFlows] = useState([]); // Stores same-level flows\r\n  \r\n  const onConnect = useCallback(\r\n    (params) => setEdges((eds) => addEdge(params, eds)),\r\n    [setEdges]\r\n  );\r\n\r\n  const exportInformationFlows = () => {\r\n    const dataStr =\r\n      \"data:text/json;charset=utf-8,\" +\r\n      encodeURIComponent(JSON.stringify(informationFlows));\r\n    const downloadAnchorNode = document.createElement(\"a\");\r\n    downloadAnchorNode.setAttribute(\"href\", dataStr);\r\n    downloadAnchorNode.setAttribute(\"download\", \"informationFlows.json\");\r\n    document.body.appendChild(downloadAnchorNode);\r\n    downloadAnchorNode.click();\r\n    downloadAnchorNode.remove();\r\n  };\r\n\r\n  const importInformationFlows = (event) => {\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = (e) => {\r\n      try {\r\n        const importedFlows = JSON.parse(e.target.result);\r\n        if (Array.isArray(importedFlows)) {\r\n          setInformationFlows(\r\n            importedFlows.map(([sourceNode, destinationNode]) => [\r\n              nodes.find((node) => node.id === sourceNode.id) || sourceNode,\r\n              nodes.find((node) => node.id === destinationNode.id) ||\r\n                destinationNode,\r\n            ])\r\n          );\r\n          alert(\"Information Flows loaded successfully.\");\r\n        } else {\r\n          alert(\"Invalid JSON format.\");\r\n        }\r\n      } catch (error) {\r\n        alert(\"Failed to load the JSON file. Please check the file format.\");\r\n      }\r\n    };\r\n\r\n    if (event.target.files.length > 0) {\r\n      fileReader.readAsText(event.target.files[0]);\r\n    }\r\n  };\r\n\r\n  // Function to get level of a node based on its `id`\r\n  const getNodeLevel = (nodeId) => {\r\n    const node = nodes.find((n) => n.id === nodeId);\r\n    return node?.data?.level || 0; // Assuming `level` is predefined in each node's data\r\n  };\r\n\r\n  const handleNodeClick = (event, nodeData) => {\r\n    const id = nodeData.id;\r\n    const node = nodes.find((n) => n.id === id);\r\n    setSelectedNode(node);\r\n    setSelectedInformationFlow(\r\n      informationFlows.find((flow) =>\r\n        flow.find((flowNode) => flowNode.id === nodeData.id)\r\n      )\r\n    );\r\n\r\n    if (enableInformationFlow) {\r\n      setResetFlow(false);\r\n      if (!sourceNode) {\r\n        setSourceNode(node);\r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id ? { ...n, style: { border: \"2px solid blue\" } } : n\r\n          )\r\n        );\r\n      } else if (sourceNode.id !== id) {\r\n        setDestinationNode(node);\r\n\r\n        const isDuplicate = informationFlows.some(\r\n          (flow) => flow[0].id === sourceNode.id && flow[1].id === node.id\r\n        );\r\n\r\n        if (!isDuplicate) {\r\n          setInformationFlows([...informationFlows, [sourceNode, node]]);\r\n        }\r\n        \r\n        setNodes((nds) =>\r\n          nds.map((n) =>\r\n            n.id === node.id\r\n              ? { ...n, style: { border: \"2px solid green\" } }\r\n              : n\r\n          )\r\n        );\r\n        setTimeout(resetSelection, 1000);\r\n      }\r\n    }\r\n\r\n    // Update sameLevelFlows based on the selected node's level\r\n    updateSameLevelFlows(node);\r\n  };\r\n\r\n  // Update same-level flows for the selected node\r\n  const updateSameLevelFlows = (node) => {\r\n    const level = getNodeLevel(node.id);\r\n    const filteredFlows = informationFlows.filter(\r\n      ([source, target]) => getNodeLevel(source.id) === level && getNodeLevel(target.id) === level\r\n    );\r\n    setSameLevelFlows(filteredFlows);\r\n  };\r\n\r\n  const showInformationFlowOnTheGraphs = () => {\r\n    informationFlows.forEach((flow) => {\r\n      const [sourceNode, destinationNode] = flow;\r\n      showOneFlowOnGraph(sourceNode, destinationNode);\r\n    });\r\n  };\r\n\r\n  const showOneFlowOnGraph = (sourceNode, destinationNode) => {\r\n    setNodes((nds) =>\r\n      nds.map((n) =>\r\n        n.id === sourceNode.id\r\n          ? { ...n, style: { border: \"2px solid blue\" } }\r\n          : n.id === destinationNode.id\r\n          ? { ...n, style: { border: \"2px solid green\" } }\r\n          : n\r\n      )\r\n    );\r\n\r\n    const path = findPath(sourceNode.id, destinationNode.id);\r\n    if (!path || path.length === 0) {\r\n      console.error(\"No path found between the selected nodes.\");\r\n      return;\r\n    }\r\n\r\n    setEdges((eds) =>\r\n      eds.map((edge) => {\r\n        const isInPath = path.includes(edge.source) && path.includes(edge.target);\r\n        return {\r\n          ...edge,\r\n          animated: isInPath,\r\n          style: { stroke: isInPath ? \"green\" : \"black\" },\r\n          markerEnd: isInPath\r\n            ? { type: MarkerType.ArrowClosed, color: \"green\", orient: \"auto\" }\r\n            : undefined,\r\n        };\r\n      })\r\n    );\r\n  };\r\n\r\n  const findPath = (sourceId, targetId) => {\r\n    const visited = new Set();\r\n    const queue = [[sourceId]];\r\n\r\n    while (queue.length > 0) {\r\n      const path = queue.shift();\r\n      const node = path[path.length - 1];\r\n\r\n      if (node === targetId) return path;\r\n\r\n      if (!visited.has(node)) {\r\n        visited.add(node);\r\n        edges\r\n          .filter((edge) => edge.source === node || edge.target === node)\r\n          .forEach((edge) => {\r\n            const nextNode = edge.source === node ? edge.target : edge.source;\r\n            queue.push([...path, nextNode]);\r\n          });\r\n      }\r\n    }\r\n    return [];\r\n  };\r\n\r\n  const resetSelection = () => {\r\n    setEnableInformationFlow(!enableInformationFlow);\r\n    if (enableInformationFlow) {\r\n      setResetFlow(true);\r\n      setSourceNode(null);\r\n      setDestinationNode(null);\r\n      setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n      setEdges((eds) =>\r\n        eds.map((edge) => ({ ...edge, animated: false, style: { stroke: \"black\" } }))\r\n      );\r\n    }\r\n  };\r\n\r\n  const resetGraphs = () => {\r\n    setNodes((nds) => nds.map((n) => ({ ...n, style: { border: \"none\" } })));\r\n    setEdges((eds) =>\r\n      eds.map((edge) => ({ ...edge, animated: false, style: { stroke: \"black\" } }))\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container-fluid\" style={{ display: \"flex\", height: \"100vh\", width: \"100vw\" }}>\r\n      <div className=\"col-9\" style={{ height: \"100%\" }}>\r\n        <div className=\"d-flex justify-content-between align-items-center mb-3\" style={{ position: \"absolute\", top: -88, right: \"-23vw\" }}>\r\n          <button className=\"btn btn-success\" onClick={resetSelection}>\r\n            Add Information Flow\r\n          </button>\r\n          {informationFlows.length > 0 && (\r\n            <button className=\"btn btn-primary ml-2\" onClick={exportInformationFlows}>\r\n              Export Information Flows\r\n            </button>\r\n          )}\r\n          <input type=\"file\" accept=\".json\" onChange={importInformationFlows} style={{ display: \"none\" }} id=\"uploadFile\" />\r\n          <label htmlFor=\"uploadFile\" className=\"btn btn-secondary ml-2 mt-2\">\r\n            Import Information Flows\r\n          </label>\r\n        </div>\r\n        \r\n        <ReactFlow\r\n          nodeTypes={nodeTypes}\r\n          nodes={nodes.map((node) => ({ ...node, data: { ...node.data, disable: disableAdd } }))}\r\n          edges={edges}\r\n          onNodesChange={onNodesChange}\r\n          onEdgesChange={onEdgesChange}\r\n          onConnect={onConnect}\r\n          fitView\r\n          fitViewOptions={fitViewOptions}\r\n          style={{ width: \"100%\", height: \"90%\" }}\r\n          onNodeClick={handleNodeClick}\r\n          onPaneClick={() => setSelectedNode(null)}\r\n        />\r\n      </div>\r\n      <div className=\"col-3\" style={{ padding: \"10px\", borderLeft: \"1px solid #ccc\" }}>\r\n        {selectedNode ? (\r\n          <div className=\"mr-3\">\r\n            <h3>Holon Details</h3>\r\n            <div className=\"form-group mb-3\">\r\n              <label htmlFor=\"nameofNode\">Name</label>\r\n              <input\r\n                type=\"text\"\r\n                id=\"nameofNode\"\r\n                className=\"form-control\"\r\n                value={selectedNode.data.label}\r\n                onChange={(e) =>\r\n                  setNodes((nds) =>\r\n                    nds.map((node) =>\r\n                      node.id === selectedNode.id\r\n                        ? { ...node, data: { ...node.data, label: e.target.value } }\r\n                        : node\r\n                    )\r\n                  )\r\n                }\r\n              />\r\n            </div>\r\n            <div className=\"form-group mb-3\">\r\n              <label htmlFor=\"nodeDescription\">Description</label>\r\n              <textarea\r\n                id=\"nodeDescription\"\r\n                className=\"form-control\"\r\n                style={{ height: \"200px\", width: \"100%\" }}\r\n                placeholder=\"An example description...\"\r\n                value={selectedNode.data.description || \"\"}\r\n                onChange={(e) =>\r\n                  setNodes((nds) =>\r\n                    nds.map((node) =>\r\n                      node.id === selectedNode.id\r\n                        ? { ...node, data: { ...node.data, description: e.target.value } }\r\n                        : node\r\n                    )\r\n                  )\r\n                }\r\n              />\r\n            </div>\r\n            <button className=\"btn btn-success\" onClick={showInformationFlowOnTheGraphs}>\r\n              Show All Flow\r\n            </button>\r\n            {informationFlows.length > 0 && (\r\n              <button className=\"btn btn-primary mx-2\" onClick={resetGraphs}>\r\n                Reset Flow\r\n              </button>\r\n            )}\r\n            <h5 className=\"mt-4\">Same Level Information Flows</h5>\r\n            {sameLevelFlows.map(([src, dest]) => (\r\n              <div className=\"alert alert-success\" key={src.id + dest.id} style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n                <div>\r\n                  <strong>\r\n                    {src.data.label} {\" --> \"} {dest.data.label}\r\n                  </strong>\r\n                </div>\r\n                <button className=\"btn btn-success\" onClick={() => showOneFlowOnGraph(src, dest)}>\r\n                  Show Flow\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        ) : (\r\n          <div>No Selection</div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CommunicationReactFlow;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC/D,OAAOC,SAAS,IACdC,OAAO,EACPC,aAAa,EACbC,aAAa,EACbC,UAAU,QACL,WAAW;AAClB,OAAOC,KAAK,MAAM,aAAa;AAC/B,OAAO,0BAA0B;AACjC,OAAO,sCAAsC;AAC7C,OAAO,cAAc;AACrB,OAAOC,cAAc,MAAM,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9C,MAAMC,SAAS,GAAG;EAChBC,UAAU,EAAEJ;AACd,CAAC;AAED,MAAMK,cAAc,GAAG;EAAEC,OAAO,EAAE;AAAI,CAAC;AAEvCP,KAAK,CAACQ,aAAa,CAAC,OAAO,CAAC;AAE5B,SAASC,sBAAsBA,CAACC,KAAK,EAAE;EAAAC,EAAA;EACrC,MAAM,CAACC,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGjB,aAAa,CAACa,KAAK,CAACE,KAAK,CAAC;EACnE,MAAM,CAACG,KAAK,EAAEC,QAAQ,EAAEC,aAAa,CAAC,GAAGnB,aAAa,CAACY,KAAK,CAACK,KAAK,CAAC;EACnE,MAAM,CAACG,UAAU,EAAEC,aAAa,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAClD,MAAM,CAAC0B,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,CAAC;EACxD,MAAM,CAAC4B,YAAY,EAAEC,eAAe,CAAC,GAAG7B,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAAC8B,uBAAuB,EAAEC,0BAA0B,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EAC5E,MAAM,CAACgC,WAAW,EAAEC,cAAc,CAAC,GAAGjC,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACkC,qBAAqB,EAAEC,wBAAwB,CAAC,GAAGnC,QAAQ,CAAC,KAAK,CAAC;EACzE,MAAM,CAACoC,YAAY,EAAEC,eAAe,CAAC,GAAGrC,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACsC,UAAU,EAAEC,aAAa,CAAC,GAAGvC,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACwC,SAAS,EAAEC,YAAY,CAAC,GAAGzC,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC0C,gBAAgB,EAAEC,mBAAmB,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAAC4C,cAAc,EAAEC,iBAAiB,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAE1D,MAAM8C,SAAS,GAAGhD,WAAW,CAC1BiD,MAAM,IAAKzB,QAAQ,CAAE0B,GAAG,IAAK9C,OAAO,CAAC6C,MAAM,EAAEC,GAAG,CAAC,CAAC,EACnD,CAAC1B,QAAQ,CACX,CAAC;EAED,MAAM2B,sBAAsB,GAAGA,CAAA,KAAM;IACnC,MAAMC,OAAO,GACX,+BAA+B,GAC/BC,kBAAkB,CAACC,IAAI,CAACC,SAAS,CAACX,gBAAgB,CAAC,CAAC;IACtD,MAAMY,kBAAkB,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACtDF,kBAAkB,CAACG,YAAY,CAAC,MAAM,EAAEP,OAAO,CAAC;IAChDI,kBAAkB,CAACG,YAAY,CAAC,UAAU,EAAE,uBAAuB,CAAC;IACpEF,QAAQ,CAACG,IAAI,CAACC,WAAW,CAACL,kBAAkB,CAAC;IAC7CA,kBAAkB,CAACM,KAAK,CAAC,CAAC;IAC1BN,kBAAkB,CAACO,MAAM,CAAC,CAAC;EAC7B,CAAC;EAED,MAAMC,sBAAsB,GAAIC,KAAK,IAAK;IACxC,MAAMC,UAAU,GAAG,IAAIC,UAAU,CAAC,CAAC;IACnCD,UAAU,CAACE,MAAM,GAAIC,CAAC,IAAK;MACzB,IAAI;QACF,MAAMC,aAAa,GAAGhB,IAAI,CAACiB,KAAK,CAACF,CAAC,CAACG,MAAM,CAACC,MAAM,CAAC;QACjD,IAAIC,KAAK,CAACC,OAAO,CAACL,aAAa,CAAC,EAAE;UAChCzB,mBAAmB,CACjByB,aAAa,CAACM,GAAG,CAAC,CAAC,CAAClD,UAAU,EAAEE,eAAe,CAAC,KAAK,CACnDR,KAAK,CAACyD,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKrD,UAAU,CAACqD,EAAE,CAAC,IAAIrD,UAAU,EAC7DN,KAAK,CAACyD,IAAI,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKnD,eAAe,CAACmD,EAAE,CAAC,IAClDnD,eAAe,CAClB,CACH,CAAC;UACDoD,KAAK,CAAC,wCAAwC,CAAC;QACjD,CAAC,MAAM;UACLA,KAAK,CAAC,sBAAsB,CAAC;QAC/B;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdD,KAAK,CAAC,6DAA6D,CAAC;MACtE;IACF,CAAC;IAED,IAAIf,KAAK,CAACO,MAAM,CAACU,KAAK,CAACC,MAAM,GAAG,CAAC,EAAE;MACjCjB,UAAU,CAACkB,UAAU,CAACnB,KAAK,CAACO,MAAM,CAACU,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9C;EACF,CAAC;;EAED;EACA,MAAMG,YAAY,GAAIC,MAAM,IAAK;IAAA,IAAAC,UAAA;IAC/B,MAAMT,IAAI,GAAG1D,KAAK,CAACyD,IAAI,CAAEW,CAAC,IAAKA,CAAC,CAACT,EAAE,KAAKO,MAAM,CAAC;IAC/C,OAAO,CAAAR,IAAI,aAAJA,IAAI,wBAAAS,UAAA,GAAJT,IAAI,CAAEW,IAAI,cAAAF,UAAA,uBAAVA,UAAA,CAAYG,KAAK,KAAI,CAAC,CAAC,CAAC;EACjC,CAAC;EAED,MAAMC,eAAe,GAAGA,CAAC1B,KAAK,EAAE2B,QAAQ,KAAK;IAC3C,MAAMb,EAAE,GAAGa,QAAQ,CAACb,EAAE;IACtB,MAAMD,IAAI,GAAG1D,KAAK,CAACyD,IAAI,CAAEW,CAAC,IAAKA,CAAC,CAACT,EAAE,KAAKA,EAAE,CAAC;IAC3ChD,eAAe,CAAC+C,IAAI,CAAC;IACrB7C,0BAA0B,CACxBW,gBAAgB,CAACiC,IAAI,CAAEgB,IAAI,IACzBA,IAAI,CAAChB,IAAI,CAAEiB,QAAQ,IAAKA,QAAQ,CAACf,EAAE,KAAKa,QAAQ,CAACb,EAAE,CACrD,CACF,CAAC;IAED,IAAI3C,qBAAqB,EAAE;MACzBO,YAAY,CAAC,KAAK,CAAC;MACnB,IAAI,CAACjB,UAAU,EAAE;QACfC,aAAa,CAACmD,IAAI,CAAC;QACnBzD,QAAQ,CAAE0E,GAAG,IACXA,GAAG,CAACnB,GAAG,CAAEY,CAAC,IACRA,CAAC,CAACT,EAAE,KAAKD,IAAI,CAACC,EAAE,GAAG;UAAE,GAAGS,CAAC;UAAEQ,KAAK,EAAE;YAAEC,MAAM,EAAE;UAAiB;QAAE,CAAC,GAAGT,CACrE,CACF,CAAC;MACH,CAAC,MAAM,IAAI9D,UAAU,CAACqD,EAAE,KAAKA,EAAE,EAAE;QAC/BlD,kBAAkB,CAACiD,IAAI,CAAC;QAExB,MAAMoB,WAAW,GAAGtD,gBAAgB,CAACuD,IAAI,CACtCN,IAAI,IAAKA,IAAI,CAAC,CAAC,CAAC,CAACd,EAAE,KAAKrD,UAAU,CAACqD,EAAE,IAAIc,IAAI,CAAC,CAAC,CAAC,CAACd,EAAE,KAAKD,IAAI,CAACC,EAChE,CAAC;QAED,IAAI,CAACmB,WAAW,EAAE;UAChBrD,mBAAmB,CAAC,CAAC,GAAGD,gBAAgB,EAAE,CAAClB,UAAU,EAAEoD,IAAI,CAAC,CAAC,CAAC;QAChE;QAEAzD,QAAQ,CAAE0E,GAAG,IACXA,GAAG,CAACnB,GAAG,CAAEY,CAAC,IACRA,CAAC,CAACT,EAAE,KAAKD,IAAI,CAACC,EAAE,GACZ;UAAE,GAAGS,CAAC;UAAEQ,KAAK,EAAE;YAAEC,MAAM,EAAE;UAAkB;QAAE,CAAC,GAC9CT,CACN,CACF,CAAC;QACDY,UAAU,CAACC,cAAc,EAAE,IAAI,CAAC;MAClC;IACF;;IAEA;IACAC,oBAAoB,CAACxB,IAAI,CAAC;EAC5B,CAAC;;EAED;EACA,MAAMwB,oBAAoB,GAAIxB,IAAI,IAAK;IACrC,MAAMY,KAAK,GAAGL,YAAY,CAACP,IAAI,CAACC,EAAE,CAAC;IACnC,MAAMwB,aAAa,GAAG3D,gBAAgB,CAAC4D,MAAM,CAC3C,CAAC,CAACC,MAAM,EAAEjC,MAAM,CAAC,KAAKa,YAAY,CAACoB,MAAM,CAAC1B,EAAE,CAAC,KAAKW,KAAK,IAAIL,YAAY,CAACb,MAAM,CAACO,EAAE,CAAC,KAAKW,KACzF,CAAC;IACD3C,iBAAiB,CAACwD,aAAa,CAAC;EAClC,CAAC;EAED,MAAMG,8BAA8B,GAAGA,CAAA,KAAM;IAC3C9D,gBAAgB,CAAC+D,OAAO,CAAEd,IAAI,IAAK;MACjC,MAAM,CAACnE,UAAU,EAAEE,eAAe,CAAC,GAAGiE,IAAI;MAC1Ce,kBAAkB,CAAClF,UAAU,EAAEE,eAAe,CAAC;IACjD,CAAC,CAAC;EACJ,CAAC;EAED,MAAMgF,kBAAkB,GAAGA,CAAClF,UAAU,EAAEE,eAAe,KAAK;IAC1DP,QAAQ,CAAE0E,GAAG,IACXA,GAAG,CAACnB,GAAG,CAAEY,CAAC,IACRA,CAAC,CAACT,EAAE,KAAKrD,UAAU,CAACqD,EAAE,GAClB;MAAE,GAAGS,CAAC;MAAEQ,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAiB;IAAE,CAAC,GAC7CT,CAAC,CAACT,EAAE,KAAKnD,eAAe,CAACmD,EAAE,GAC3B;MAAE,GAAGS,CAAC;MAAEQ,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAkB;IAAE,CAAC,GAC9CT,CACN,CACF,CAAC;IAED,MAAMqB,IAAI,GAAGC,QAAQ,CAACpF,UAAU,CAACqD,EAAE,EAAEnD,eAAe,CAACmD,EAAE,CAAC;IACxD,IAAI,CAAC8B,IAAI,IAAIA,IAAI,CAAC1B,MAAM,KAAK,CAAC,EAAE;MAC9B4B,OAAO,CAAC9B,KAAK,CAAC,2CAA2C,CAAC;MAC1D;IACF;IAEAzD,QAAQ,CAAE0B,GAAG,IACXA,GAAG,CAAC0B,GAAG,CAAEoC,IAAI,IAAK;MAChB,MAAMC,QAAQ,GAAGJ,IAAI,CAACK,QAAQ,CAACF,IAAI,CAACP,MAAM,CAAC,IAAII,IAAI,CAACK,QAAQ,CAACF,IAAI,CAACxC,MAAM,CAAC;MACzE,OAAO;QACL,GAAGwC,IAAI;QACPG,QAAQ,EAAEF,QAAQ;QAClBjB,KAAK,EAAE;UAAEoB,MAAM,EAAEH,QAAQ,GAAG,OAAO,GAAG;QAAQ,CAAC;QAC/CI,SAAS,EAAEJ,QAAQ,GACf;UAAEK,IAAI,EAAE/G,UAAU,CAACgH,WAAW;UAAEC,KAAK,EAAE,OAAO;UAAEC,MAAM,EAAE;QAAO,CAAC,GAChEC;MACN,CAAC;IACH,CAAC,CACH,CAAC;EACH,CAAC;EAED,MAAMZ,QAAQ,GAAGA,CAACa,QAAQ,EAAEC,QAAQ,KAAK;IACvC,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;IACzB,MAAMC,KAAK,GAAG,CAAC,CAACJ,QAAQ,CAAC,CAAC;IAE1B,OAAOI,KAAK,CAAC5C,MAAM,GAAG,CAAC,EAAE;MACvB,MAAM0B,IAAI,GAAGkB,KAAK,CAACC,KAAK,CAAC,CAAC;MAC1B,MAAMlD,IAAI,GAAG+B,IAAI,CAACA,IAAI,CAAC1B,MAAM,GAAG,CAAC,CAAC;MAElC,IAAIL,IAAI,KAAK8C,QAAQ,EAAE,OAAOf,IAAI;MAElC,IAAI,CAACgB,OAAO,CAACI,GAAG,CAACnD,IAAI,CAAC,EAAE;QACtB+C,OAAO,CAACK,GAAG,CAACpD,IAAI,CAAC;QACjBvD,KAAK,CACFiF,MAAM,CAAEQ,IAAI,IAAKA,IAAI,CAACP,MAAM,KAAK3B,IAAI,IAAIkC,IAAI,CAACxC,MAAM,KAAKM,IAAI,CAAC,CAC9D6B,OAAO,CAAEK,IAAI,IAAK;UACjB,MAAMmB,QAAQ,GAAGnB,IAAI,CAACP,MAAM,KAAK3B,IAAI,GAAGkC,IAAI,CAACxC,MAAM,GAAGwC,IAAI,CAACP,MAAM;UACjEsB,KAAK,CAACK,IAAI,CAAC,CAAC,GAAGvB,IAAI,EAAEsB,QAAQ,CAAC,CAAC;QACjC,CAAC,CAAC;MACN;IACF;IACA,OAAO,EAAE;EACX,CAAC;EAED,MAAM9B,cAAc,GAAGA,CAAA,KAAM;IAC3BhE,wBAAwB,CAAC,CAACD,qBAAqB,CAAC;IAChD,IAAIA,qBAAqB,EAAE;MACzBO,YAAY,CAAC,IAAI,CAAC;MAClBhB,aAAa,CAAC,IAAI,CAAC;MACnBE,kBAAkB,CAAC,IAAI,CAAC;MACxBR,QAAQ,CAAE0E,GAAG,IAAKA,GAAG,CAACnB,GAAG,CAAEY,CAAC,KAAM;QAAE,GAAGA,CAAC;QAAEQ,KAAK,EAAE;UAAEC,MAAM,EAAE;QAAO;MAAE,CAAC,CAAC,CAAC,CAAC;MACxEzE,QAAQ,CAAE0B,GAAG,IACXA,GAAG,CAAC0B,GAAG,CAAEoC,IAAI,KAAM;QAAE,GAAGA,IAAI;QAAEG,QAAQ,EAAE,KAAK;QAAEnB,KAAK,EAAE;UAAEoB,MAAM,EAAE;QAAQ;MAAE,CAAC,CAAC,CAC9E,CAAC;IACH;EACF,CAAC;EAED,MAAMiB,WAAW,GAAGA,CAAA,KAAM;IACxBhH,QAAQ,CAAE0E,GAAG,IAAKA,GAAG,CAACnB,GAAG,CAAEY,CAAC,KAAM;MAAE,GAAGA,CAAC;MAAEQ,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAO;IAAE,CAAC,CAAC,CAAC,CAAC;IACxEzE,QAAQ,CAAE0B,GAAG,IACXA,GAAG,CAAC0B,GAAG,CAAEoC,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAEG,QAAQ,EAAE,KAAK;MAAEnB,KAAK,EAAE;QAAEoB,MAAM,EAAE;MAAQ;IAAE,CAAC,CAAC,CAC9E,CAAC;EACH,CAAC;EAED,oBACEzG,OAAA;IAAK2H,SAAS,EAAC,iBAAiB;IAACtC,KAAK,EAAE;MAAEuC,OAAO,EAAE,MAAM;MAAEC,MAAM,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAQ,CAAE;IAAAC,QAAA,gBAC3F/H,OAAA;MAAK2H,SAAS,EAAC,OAAO;MAACtC,KAAK,EAAE;QAAEwC,MAAM,EAAE;MAAO,CAAE;MAAAE,QAAA,gBAC/C/H,OAAA;QAAK2H,SAAS,EAAC,wDAAwD;QAACtC,KAAK,EAAE;UAAE2C,QAAQ,EAAE,UAAU;UAAEC,GAAG,EAAE,CAAC,EAAE;UAAEC,KAAK,EAAE;QAAQ,CAAE;QAAAH,QAAA,gBAChI/H,OAAA;UAAQ2H,SAAS,EAAC,iBAAiB;UAACQ,OAAO,EAAEzC,cAAe;UAAAqC,QAAA,EAAC;QAE7D;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACRtG,gBAAgB,CAACuC,MAAM,GAAG,CAAC,iBAC1BxE,OAAA;UAAQ2H,SAAS,EAAC,sBAAsB;UAACQ,OAAO,EAAE3F,sBAAuB;UAAAuF,QAAA,EAAC;QAE1E;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT,eACDvI,OAAA;UAAO2G,IAAI,EAAC,MAAM;UAAC6B,MAAM,EAAC,OAAO;UAACC,QAAQ,EAAEpF,sBAAuB;UAACgC,KAAK,EAAE;YAAEuC,OAAO,EAAE;UAAO,CAAE;UAACxD,EAAE,EAAC;QAAY;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eAClHvI,OAAA;UAAO0I,OAAO,EAAC,YAAY;UAACf,SAAS,EAAC,6BAA6B;UAAAI,QAAA,EAAC;QAEpE;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAO,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACL,CAAC,eAENvI,OAAA,CAACR,SAAS;QACRS,SAAS,EAAEA,SAAU;QACrBQ,KAAK,EAAEA,KAAK,CAACwD,GAAG,CAAEE,IAAI,KAAM;UAAE,GAAGA,IAAI;UAAEW,IAAI,EAAE;YAAE,GAAGX,IAAI,CAACW,IAAI;YAAE6D,OAAO,EAAE9G;UAAW;QAAE,CAAC,CAAC,CAAE;QACvFjB,KAAK,EAAEA,KAAM;QACbD,aAAa,EAAEA,aAAc;QAC7BG,aAAa,EAAEA,aAAc;QAC7BuB,SAAS,EAAEA,SAAU;QACrBuG,OAAO;QACPzI,cAAc,EAAEA,cAAe;QAC/BkF,KAAK,EAAE;UAAEyC,KAAK,EAAE,MAAM;UAAED,MAAM,EAAE;QAAM,CAAE;QACxCgB,WAAW,EAAE7D,eAAgB;QAC7B8D,WAAW,EAAEA,CAAA,KAAM1H,eAAe,CAAC,IAAI;MAAE;QAAAgH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1C,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,eACNvI,OAAA;MAAK2H,SAAS,EAAC,OAAO;MAACtC,KAAK,EAAE;QAAEjF,OAAO,EAAE,MAAM;QAAE2I,UAAU,EAAE;MAAiB,CAAE;MAAAhB,QAAA,EAC7E5G,YAAY,gBACXnB,OAAA;QAAK2H,SAAS,EAAC,MAAM;QAAAI,QAAA,gBACnB/H,OAAA;UAAA+H,QAAA,EAAI;QAAa;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtBvI,OAAA;UAAK2H,SAAS,EAAC,iBAAiB;UAAAI,QAAA,gBAC9B/H,OAAA;YAAO0I,OAAO,EAAC,YAAY;YAAAX,QAAA,EAAC;UAAI;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACxCvI,OAAA;YACE2G,IAAI,EAAC,MAAM;YACXvC,EAAE,EAAC,YAAY;YACfuD,SAAS,EAAC,cAAc;YACxBqB,KAAK,EAAE7H,YAAY,CAAC2D,IAAI,CAACmE,KAAM;YAC/BR,QAAQ,EAAG/E,CAAC,IACVhD,QAAQ,CAAE0E,GAAG,IACXA,GAAG,CAACnB,GAAG,CAAEE,IAAI,IACXA,IAAI,CAACC,EAAE,KAAKjD,YAAY,CAACiD,EAAE,GACvB;cAAE,GAAGD,IAAI;cAAEW,IAAI,EAAE;gBAAE,GAAGX,IAAI,CAACW,IAAI;gBAAEmE,KAAK,EAAEvF,CAAC,CAACG,MAAM,CAACmF;cAAM;YAAE,CAAC,GAC1D7E,IACN,CACF;UACD;YAAAiE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNvI,OAAA;UAAK2H,SAAS,EAAC,iBAAiB;UAAAI,QAAA,gBAC9B/H,OAAA;YAAO0I,OAAO,EAAC,iBAAiB;YAAAX,QAAA,EAAC;UAAW;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAO,CAAC,eACpDvI,OAAA;YACEoE,EAAE,EAAC,iBAAiB;YACpBuD,SAAS,EAAC,cAAc;YACxBtC,KAAK,EAAE;cAAEwC,MAAM,EAAE,OAAO;cAAEC,KAAK,EAAE;YAAO,CAAE;YAC1CoB,WAAW,EAAC,2BAA2B;YACvCF,KAAK,EAAE7H,YAAY,CAAC2D,IAAI,CAACqE,WAAW,IAAI,EAAG;YAC3CV,QAAQ,EAAG/E,CAAC,IACVhD,QAAQ,CAAE0E,GAAG,IACXA,GAAG,CAACnB,GAAG,CAAEE,IAAI,IACXA,IAAI,CAACC,EAAE,KAAKjD,YAAY,CAACiD,EAAE,GACvB;cAAE,GAAGD,IAAI;cAAEW,IAAI,EAAE;gBAAE,GAAGX,IAAI,CAACW,IAAI;gBAAEqE,WAAW,EAAEzF,CAAC,CAACG,MAAM,CAACmF;cAAM;YAAE,CAAC,GAChE7E,IACN,CACF;UACD;YAAAiE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACF,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC,CAAC,eACNvI,OAAA;UAAQ2H,SAAS,EAAC,iBAAiB;UAACQ,OAAO,EAAEpC,8BAA+B;UAAAgC,QAAA,EAAC;QAE7E;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,EACRtG,gBAAgB,CAACuC,MAAM,GAAG,CAAC,iBAC1BxE,OAAA;UAAQ2H,SAAS,EAAC,sBAAsB;UAACQ,OAAO,EAAET,WAAY;UAAAK,QAAA,EAAC;QAE/D;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CACT,eACDvI,OAAA;UAAI2H,SAAS,EAAC,MAAM;UAAAI,QAAA,EAAC;QAA4B;UAAAK,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,EACrDpG,cAAc,CAAC8B,GAAG,CAAC,CAAC,CAACmF,GAAG,EAAEC,IAAI,CAAC,kBAC9BrJ,OAAA;UAAK2H,SAAS,EAAC,qBAAqB;UAAwBtC,KAAK,EAAE;YAAEuC,OAAO,EAAE,MAAM;YAAE0B,cAAc,EAAE,eAAe;YAAEC,UAAU,EAAE;UAAS,CAAE;UAAAxB,QAAA,gBAC5I/H,OAAA;YAAA+H,QAAA,eACE/H,OAAA;cAAA+H,QAAA,GACGqB,GAAG,CAACtE,IAAI,CAACmE,KAAK,EAAC,GAAC,EAAC,OAAO,EAAC,GAAC,EAACI,IAAI,CAACvE,IAAI,CAACmE,KAAK;YAAA;cAAAb,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OACrC;UAAC;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACN,CAAC,eACNvI,OAAA;YAAQ2H,SAAS,EAAC,iBAAiB;YAACQ,OAAO,EAAEA,CAAA,KAAMlC,kBAAkB,CAACmD,GAAG,EAAEC,IAAI,CAAE;YAAAtB,QAAA,EAAC;UAElF;YAAAK,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA,GAR+Ba,GAAG,CAAChF,EAAE,GAAGiF,IAAI,CAACjF,EAAE;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASrD,CACN,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,gBAENvI,OAAA;QAAA+H,QAAA,EAAK;MAAY;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK;IACvB;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAAC/H,EAAA,CA9SQF,sBAAsB;EAAA,QACYZ,aAAa,EACbC,aAAa;AAAA;AAAA6J,EAAA,GAF/ClJ,sBAAsB;AAgT/B,eAAeA,sBAAsB;AAAC,IAAAkJ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}